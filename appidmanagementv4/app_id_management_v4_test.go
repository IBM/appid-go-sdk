/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package appidmanagementv4_test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/appid-go-sdk/appidmanagementv4"
	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`AppIDManagementV4`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(appIDManagementService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(appIDManagementService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
				URL: "https://appidmanagementv4/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(appIDManagementService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"APP_ID_MANAGEMENT_URL":       "https://appidmanagementv4/api",
				"APP_ID_MANAGEMENT_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4UsingExternalConfig(&appidmanagementv4.AppIDManagementV4Options{})
				Expect(appIDManagementService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := appIDManagementService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != appIDManagementService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(appIDManagementService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(appIDManagementService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4UsingExternalConfig(&appidmanagementv4.AppIDManagementV4Options{
					URL: "https://testService/api",
				})
				Expect(appIDManagementService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := appIDManagementService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != appIDManagementService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(appIDManagementService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(appIDManagementService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4UsingExternalConfig(&appidmanagementv4.AppIDManagementV4Options{})
				err := appIDManagementService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := appIDManagementService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != appIDManagementService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(appIDManagementService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(appIDManagementService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"APP_ID_MANAGEMENT_URL":       "https://appidmanagementv4/api",
				"APP_ID_MANAGEMENT_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4UsingExternalConfig(&appidmanagementv4.AppIDManagementV4Options{})

			It(`Instantiate service client with error`, func() {
				Expect(appIDManagementService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"APP_ID_MANAGEMENT_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4UsingExternalConfig(&appidmanagementv4.AppIDManagementV4Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(appIDManagementService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = appidmanagementv4.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListApplications(listApplicationsOptions *ListApplicationsOptions) - Operation response error`, func() {
		listApplicationsPath := "/management/v4/testString/applications"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listApplicationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListApplications with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListApplicationsOptions model
				listApplicationsOptionsModel := new(appidmanagementv4.ListApplicationsOptions)
				listApplicationsOptionsModel.TenantID = core.StringPtr("testString")
				listApplicationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.ListApplications(listApplicationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.ListApplications(listApplicationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListApplications(listApplicationsOptions *ListApplicationsOptions)`, func() {
		listApplicationsPath := "/management/v4/testString/applications"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listApplicationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applications": [{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}]}`)
				}))
			})
			It(`Invoke ListApplications successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ListApplicationsOptions model
				listApplicationsOptionsModel := new(appidmanagementv4.ListApplicationsOptions)
				listApplicationsOptionsModel.TenantID = core.StringPtr("testString")
				listApplicationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.ListApplicationsWithContext(ctx, listApplicationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.ListApplications(listApplicationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.ListApplicationsWithContext(ctx, listApplicationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listApplicationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applications": [{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}]}`)
				}))
			})
			It(`Invoke ListApplications successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.ListApplications(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListApplicationsOptions model
				listApplicationsOptionsModel := new(appidmanagementv4.ListApplicationsOptions)
				listApplicationsOptionsModel.TenantID = core.StringPtr("testString")
				listApplicationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.ListApplications(listApplicationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListApplications with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListApplicationsOptions model
				listApplicationsOptionsModel := new(appidmanagementv4.ListApplicationsOptions)
				listApplicationsOptionsModel.TenantID = core.StringPtr("testString")
				listApplicationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.ListApplications(listApplicationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListApplicationsOptions model with no property values
				listApplicationsOptionsModelNew := new(appidmanagementv4.ListApplicationsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.ListApplications(listApplicationsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListApplications successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListApplicationsOptions model
				listApplicationsOptionsModel := new(appidmanagementv4.ListApplicationsOptions)
				listApplicationsOptionsModel.TenantID = core.StringPtr("testString")
				listApplicationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.ListApplications(listApplicationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterApplication(registerApplicationOptions *RegisterApplicationOptions) - Operation response error`, func() {
		registerApplicationPath := "/management/v4/testString/applications"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerApplicationPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RegisterApplication with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RegisterApplicationOptions model
				registerApplicationOptionsModel := new(appidmanagementv4.RegisterApplicationOptions)
				registerApplicationOptionsModel.TenantID = core.StringPtr("testString")
				registerApplicationOptionsModel.Name = core.StringPtr("testString")
				registerApplicationOptionsModel.Type = core.StringPtr("testString")
				registerApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.RegisterApplication(registerApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.RegisterApplication(registerApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterApplication(registerApplicationOptions *RegisterApplicationOptions)`, func() {
		registerApplicationPath := "/management/v4/testString/applications"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerApplicationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}`)
				}))
			})
			It(`Invoke RegisterApplication successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the RegisterApplicationOptions model
				registerApplicationOptionsModel := new(appidmanagementv4.RegisterApplicationOptions)
				registerApplicationOptionsModel.TenantID = core.StringPtr("testString")
				registerApplicationOptionsModel.Name = core.StringPtr("testString")
				registerApplicationOptionsModel.Type = core.StringPtr("testString")
				registerApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.RegisterApplicationWithContext(ctx, registerApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.RegisterApplication(registerApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.RegisterApplicationWithContext(ctx, registerApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerApplicationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}`)
				}))
			})
			It(`Invoke RegisterApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.RegisterApplication(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RegisterApplicationOptions model
				registerApplicationOptionsModel := new(appidmanagementv4.RegisterApplicationOptions)
				registerApplicationOptionsModel.TenantID = core.StringPtr("testString")
				registerApplicationOptionsModel.Name = core.StringPtr("testString")
				registerApplicationOptionsModel.Type = core.StringPtr("testString")
				registerApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.RegisterApplication(registerApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RegisterApplication with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RegisterApplicationOptions model
				registerApplicationOptionsModel := new(appidmanagementv4.RegisterApplicationOptions)
				registerApplicationOptionsModel.TenantID = core.StringPtr("testString")
				registerApplicationOptionsModel.Name = core.StringPtr("testString")
				registerApplicationOptionsModel.Type = core.StringPtr("testString")
				registerApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.RegisterApplication(registerApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RegisterApplicationOptions model with no property values
				registerApplicationOptionsModelNew := new(appidmanagementv4.RegisterApplicationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.RegisterApplication(registerApplicationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke RegisterApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RegisterApplicationOptions model
				registerApplicationOptionsModel := new(appidmanagementv4.RegisterApplicationOptions)
				registerApplicationOptionsModel.TenantID = core.StringPtr("testString")
				registerApplicationOptionsModel.Name = core.StringPtr("testString")
				registerApplicationOptionsModel.Type = core.StringPtr("testString")
				registerApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.RegisterApplication(registerApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetApplication(getApplicationOptions *GetApplicationOptions) - Operation response error`, func() {
		getApplicationPath := "/management/v4/testString/applications/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetApplication with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationOptions model
				getApplicationOptionsModel := new(appidmanagementv4.GetApplicationOptions)
				getApplicationOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetApplication(getApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetApplication(getApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetApplication(getApplicationOptions *GetApplicationOptions)`, func() {
		getApplicationPath := "/management/v4/testString/applications/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}`)
				}))
			})
			It(`Invoke GetApplication successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetApplicationOptions model
				getApplicationOptionsModel := new(appidmanagementv4.GetApplicationOptions)
				getApplicationOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetApplicationWithContext(ctx, getApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetApplication(getApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetApplicationWithContext(ctx, getApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}`)
				}))
			})
			It(`Invoke GetApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetApplication(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetApplicationOptions model
				getApplicationOptionsModel := new(appidmanagementv4.GetApplicationOptions)
				getApplicationOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetApplication(getApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetApplication with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationOptions model
				getApplicationOptionsModel := new(appidmanagementv4.GetApplicationOptions)
				getApplicationOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetApplication(getApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetApplicationOptions model with no property values
				getApplicationOptionsModelNew := new(appidmanagementv4.GetApplicationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetApplication(getApplicationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationOptions model
				getApplicationOptionsModel := new(appidmanagementv4.GetApplicationOptions)
				getApplicationOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetApplication(getApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateApplication(updateApplicationOptions *UpdateApplicationOptions) - Operation response error`, func() {
		updateApplicationPath := "/management/v4/testString/applications/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateApplicationPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateApplication with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateApplicationOptions model
				updateApplicationOptionsModel := new(appidmanagementv4.UpdateApplicationOptions)
				updateApplicationOptionsModel.TenantID = core.StringPtr("testString")
				updateApplicationOptionsModel.ClientID = core.StringPtr("testString")
				updateApplicationOptionsModel.Name = core.StringPtr("testString")
				updateApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateApplication(updateApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateApplication(updateApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateApplication(updateApplicationOptions *UpdateApplicationOptions)`, func() {
		updateApplicationPath := "/management/v4/testString/applications/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateApplicationPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}`)
				}))
			})
			It(`Invoke UpdateApplication successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateApplicationOptions model
				updateApplicationOptionsModel := new(appidmanagementv4.UpdateApplicationOptions)
				updateApplicationOptionsModel.TenantID = core.StringPtr("testString")
				updateApplicationOptionsModel.ClientID = core.StringPtr("testString")
				updateApplicationOptionsModel.Name = core.StringPtr("testString")
				updateApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateApplicationWithContext(ctx, updateApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateApplication(updateApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateApplicationWithContext(ctx, updateApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateApplicationPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"clientId": "ClientID", "tenantId": "TenantID", "secret": "Secret", "name": "Name", "oAuthServerUrl": "OAuthServerURL", "profilesUrl": "ProfilesURL", "discoveryEndpoint": "DiscoveryEndpoint", "type": "Type"}`)
				}))
			})
			It(`Invoke UpdateApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateApplication(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateApplicationOptions model
				updateApplicationOptionsModel := new(appidmanagementv4.UpdateApplicationOptions)
				updateApplicationOptionsModel.TenantID = core.StringPtr("testString")
				updateApplicationOptionsModel.ClientID = core.StringPtr("testString")
				updateApplicationOptionsModel.Name = core.StringPtr("testString")
				updateApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateApplication(updateApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateApplication with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateApplicationOptions model
				updateApplicationOptionsModel := new(appidmanagementv4.UpdateApplicationOptions)
				updateApplicationOptionsModel.TenantID = core.StringPtr("testString")
				updateApplicationOptionsModel.ClientID = core.StringPtr("testString")
				updateApplicationOptionsModel.Name = core.StringPtr("testString")
				updateApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateApplication(updateApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateApplicationOptions model with no property values
				updateApplicationOptionsModelNew := new(appidmanagementv4.UpdateApplicationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateApplication(updateApplicationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke UpdateApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateApplicationOptions model
				updateApplicationOptionsModel := new(appidmanagementv4.UpdateApplicationOptions)
				updateApplicationOptionsModel.TenantID = core.StringPtr("testString")
				updateApplicationOptionsModel.ClientID = core.StringPtr("testString")
				updateApplicationOptionsModel.Name = core.StringPtr("testString")
				updateApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateApplication(updateApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteApplication(deleteApplicationOptions *DeleteApplicationOptions)`, func() {
		deleteApplicationPath := "/management/v4/testString/applications/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteApplicationPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteApplication successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.DeleteApplication(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteApplicationOptions model
				deleteApplicationOptionsModel := new(appidmanagementv4.DeleteApplicationOptions)
				deleteApplicationOptionsModel.TenantID = core.StringPtr("testString")
				deleteApplicationOptionsModel.ClientID = core.StringPtr("testString")
				deleteApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.DeleteApplication(deleteApplicationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteApplication with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the DeleteApplicationOptions model
				deleteApplicationOptionsModel := new(appidmanagementv4.DeleteApplicationOptions)
				deleteApplicationOptionsModel.TenantID = core.StringPtr("testString")
				deleteApplicationOptionsModel.ClientID = core.StringPtr("testString")
				deleteApplicationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.DeleteApplication(deleteApplicationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteApplicationOptions model with no property values
				deleteApplicationOptionsModelNew := new(appidmanagementv4.DeleteApplicationOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.DeleteApplication(deleteApplicationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetApplicationScopes(getApplicationScopesOptions *GetApplicationScopesOptions) - Operation response error`, func() {
		getApplicationScopesPath := "/management/v4/testString/applications/testString/scopes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationScopesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetApplicationScopes with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationScopesOptions model
				getApplicationScopesOptionsModel := new(appidmanagementv4.GetApplicationScopesOptions)
				getApplicationScopesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetApplicationScopes(getApplicationScopesOptions *GetApplicationScopesOptions)`, func() {
		getApplicationScopesPath := "/management/v4/testString/applications/testString/scopes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationScopesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"scopes": ["Scopes"]}`)
				}))
			})
			It(`Invoke GetApplicationScopes successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetApplicationScopesOptions model
				getApplicationScopesOptionsModel := new(appidmanagementv4.GetApplicationScopesOptions)
				getApplicationScopesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetApplicationScopesWithContext(ctx, getApplicationScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetApplicationScopesWithContext(ctx, getApplicationScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationScopesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"scopes": ["Scopes"]}`)
				}))
			})
			It(`Invoke GetApplicationScopes successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetApplicationScopes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetApplicationScopesOptions model
				getApplicationScopesOptionsModel := new(appidmanagementv4.GetApplicationScopesOptions)
				getApplicationScopesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetApplicationScopes with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationScopesOptions model
				getApplicationScopesOptionsModel := new(appidmanagementv4.GetApplicationScopesOptions)
				getApplicationScopesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetApplicationScopesOptions model with no property values
				getApplicationScopesOptionsModelNew := new(appidmanagementv4.GetApplicationScopesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetApplicationScopes successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationScopesOptions model
				getApplicationScopesOptionsModel := new(appidmanagementv4.GetApplicationScopesOptions)
				getApplicationScopesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetApplicationScopes(getApplicationScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PutApplicationsScopes(putApplicationsScopesOptions *PutApplicationsScopesOptions) - Operation response error`, func() {
		putApplicationsScopesPath := "/management/v4/testString/applications/testString/scopes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putApplicationsScopesPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PutApplicationsScopes with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PutApplicationsScopesOptions model
				putApplicationsScopesOptionsModel := new(appidmanagementv4.PutApplicationsScopesOptions)
				putApplicationsScopesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.Scopes = []string{"cartoons", "horror", "animated"}
				putApplicationsScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PutApplicationsScopes(putApplicationsScopesOptions *PutApplicationsScopesOptions)`, func() {
		putApplicationsScopesPath := "/management/v4/testString/applications/testString/scopes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putApplicationsScopesPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"scopes": ["Scopes"]}`)
				}))
			})
			It(`Invoke PutApplicationsScopes successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the PutApplicationsScopesOptions model
				putApplicationsScopesOptionsModel := new(appidmanagementv4.PutApplicationsScopesOptions)
				putApplicationsScopesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.Scopes = []string{"cartoons", "horror", "animated"}
				putApplicationsScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.PutApplicationsScopesWithContext(ctx, putApplicationsScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.PutApplicationsScopesWithContext(ctx, putApplicationsScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putApplicationsScopesPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"scopes": ["Scopes"]}`)
				}))
			})
			It(`Invoke PutApplicationsScopes successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.PutApplicationsScopes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PutApplicationsScopesOptions model
				putApplicationsScopesOptionsModel := new(appidmanagementv4.PutApplicationsScopesOptions)
				putApplicationsScopesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.Scopes = []string{"cartoons", "horror", "animated"}
				putApplicationsScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PutApplicationsScopes with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PutApplicationsScopesOptions model
				putApplicationsScopesOptionsModel := new(appidmanagementv4.PutApplicationsScopesOptions)
				putApplicationsScopesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.Scopes = []string{"cartoons", "horror", "animated"}
				putApplicationsScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PutApplicationsScopesOptions model with no property values
				putApplicationsScopesOptionsModelNew := new(appidmanagementv4.PutApplicationsScopesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PutApplicationsScopes successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PutApplicationsScopesOptions model
				putApplicationsScopesOptionsModel := new(appidmanagementv4.PutApplicationsScopesOptions)
				putApplicationsScopesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsScopesOptionsModel.Scopes = []string{"cartoons", "horror", "animated"}
				putApplicationsScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.PutApplicationsScopes(putApplicationsScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetApplicationRoles(getApplicationRolesOptions *GetApplicationRolesOptions) - Operation response error`, func() {
		getApplicationRolesPath := "/management/v4/testString/applications/testString/roles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationRolesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetApplicationRoles with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationRolesOptions model
				getApplicationRolesOptionsModel := new(appidmanagementv4.GetApplicationRolesOptions)
				getApplicationRolesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetApplicationRoles(getApplicationRolesOptions *GetApplicationRolesOptions)`, func() {
		getApplicationRolesPath := "/management/v4/testString/applications/testString/roles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationRolesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "adult"}]}`)
				}))
			})
			It(`Invoke GetApplicationRoles successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetApplicationRolesOptions model
				getApplicationRolesOptionsModel := new(appidmanagementv4.GetApplicationRolesOptions)
				getApplicationRolesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetApplicationRolesWithContext(ctx, getApplicationRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetApplicationRolesWithContext(ctx, getApplicationRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getApplicationRolesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "adult"}]}`)
				}))
			})
			It(`Invoke GetApplicationRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetApplicationRoles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetApplicationRolesOptions model
				getApplicationRolesOptionsModel := new(appidmanagementv4.GetApplicationRolesOptions)
				getApplicationRolesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetApplicationRoles with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationRolesOptions model
				getApplicationRolesOptionsModel := new(appidmanagementv4.GetApplicationRolesOptions)
				getApplicationRolesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetApplicationRolesOptions model with no property values
				getApplicationRolesOptionsModelNew := new(appidmanagementv4.GetApplicationRolesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetApplicationRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetApplicationRolesOptions model
				getApplicationRolesOptionsModel := new(appidmanagementv4.GetApplicationRolesOptions)
				getApplicationRolesOptionsModel.TenantID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.ClientID = core.StringPtr("testString")
				getApplicationRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetApplicationRoles(getApplicationRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PutApplicationsRoles(putApplicationsRolesOptions *PutApplicationsRolesOptions) - Operation response error`, func() {
		putApplicationsRolesPath := "/management/v4/testString/applications/testString/roles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putApplicationsRolesPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PutApplicationsRoles with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the PutApplicationsRolesOptions model
				putApplicationsRolesOptionsModel := new(appidmanagementv4.PutApplicationsRolesOptions)
				putApplicationsRolesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				putApplicationsRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PutApplicationsRoles(putApplicationsRolesOptions *PutApplicationsRolesOptions)`, func() {
		putApplicationsRolesPath := "/management/v4/testString/applications/testString/roles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putApplicationsRolesPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "child"}]}`)
				}))
			})
			It(`Invoke PutApplicationsRoles successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the PutApplicationsRolesOptions model
				putApplicationsRolesOptionsModel := new(appidmanagementv4.PutApplicationsRolesOptions)
				putApplicationsRolesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				putApplicationsRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.PutApplicationsRolesWithContext(ctx, putApplicationsRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.PutApplicationsRolesWithContext(ctx, putApplicationsRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putApplicationsRolesPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "child"}]}`)
				}))
			})
			It(`Invoke PutApplicationsRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.PutApplicationsRoles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the PutApplicationsRolesOptions model
				putApplicationsRolesOptionsModel := new(appidmanagementv4.PutApplicationsRolesOptions)
				putApplicationsRolesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				putApplicationsRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PutApplicationsRoles with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the PutApplicationsRolesOptions model
				putApplicationsRolesOptionsModel := new(appidmanagementv4.PutApplicationsRolesOptions)
				putApplicationsRolesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				putApplicationsRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PutApplicationsRolesOptions model with no property values
				putApplicationsRolesOptionsModelNew := new(appidmanagementv4.PutApplicationsRolesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PutApplicationsRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the PutApplicationsRolesOptions model
				putApplicationsRolesOptionsModel := new(appidmanagementv4.PutApplicationsRolesOptions)
				putApplicationsRolesOptionsModel.TenantID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.ClientID = core.StringPtr("testString")
				putApplicationsRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				putApplicationsRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.PutApplicationsRoles(putApplicationsRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCloudDirectoryUsers(listCloudDirectoryUsersOptions *ListCloudDirectoryUsersOptions) - Operation response error`, func() {
		listCloudDirectoryUsersPath := "/management/v4/testString/cloud_directory/Users"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCloudDirectoryUsersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["query"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListCloudDirectoryUsers with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListCloudDirectoryUsersOptions model
				listCloudDirectoryUsersOptionsModel := new(appidmanagementv4.ListCloudDirectoryUsersOptions)
				listCloudDirectoryUsersOptionsModel.TenantID = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				listCloudDirectoryUsersOptionsModel.Count = core.Int64Ptr(int64(0))
				listCloudDirectoryUsersOptionsModel.Query = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListCloudDirectoryUsers(listCloudDirectoryUsersOptions *ListCloudDirectoryUsersOptions)`, func() {
		listCloudDirectoryUsersPath := "/management/v4/testString/cloud_directory/Users"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCloudDirectoryUsersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["query"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"totalResults": 12, "itemsPerPage": 12, "Resources": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke ListCloudDirectoryUsers successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ListCloudDirectoryUsersOptions model
				listCloudDirectoryUsersOptionsModel := new(appidmanagementv4.ListCloudDirectoryUsersOptions)
				listCloudDirectoryUsersOptionsModel.TenantID = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				listCloudDirectoryUsersOptionsModel.Count = core.Int64Ptr(int64(0))
				listCloudDirectoryUsersOptionsModel.Query = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.ListCloudDirectoryUsersWithContext(ctx, listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.ListCloudDirectoryUsersWithContext(ctx, listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listCloudDirectoryUsersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["query"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"totalResults": 12, "itemsPerPage": 12, "Resources": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke ListCloudDirectoryUsers successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.ListCloudDirectoryUsers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListCloudDirectoryUsersOptions model
				listCloudDirectoryUsersOptionsModel := new(appidmanagementv4.ListCloudDirectoryUsersOptions)
				listCloudDirectoryUsersOptionsModel.TenantID = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				listCloudDirectoryUsersOptionsModel.Count = core.Int64Ptr(int64(0))
				listCloudDirectoryUsersOptionsModel.Query = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListCloudDirectoryUsers with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListCloudDirectoryUsersOptions model
				listCloudDirectoryUsersOptionsModel := new(appidmanagementv4.ListCloudDirectoryUsersOptions)
				listCloudDirectoryUsersOptionsModel.TenantID = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				listCloudDirectoryUsersOptionsModel.Count = core.Int64Ptr(int64(0))
				listCloudDirectoryUsersOptionsModel.Query = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListCloudDirectoryUsersOptions model with no property values
				listCloudDirectoryUsersOptionsModelNew := new(appidmanagementv4.ListCloudDirectoryUsersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListCloudDirectoryUsers successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListCloudDirectoryUsersOptions model
				listCloudDirectoryUsersOptionsModel := new(appidmanagementv4.ListCloudDirectoryUsersOptions)
				listCloudDirectoryUsersOptionsModel.TenantID = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				listCloudDirectoryUsersOptionsModel.Count = core.Int64Ptr(int64(0))
				listCloudDirectoryUsersOptionsModel.Query = core.StringPtr("testString")
				listCloudDirectoryUsersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.ListCloudDirectoryUsers(listCloudDirectoryUsersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateCloudDirectoryUser(createCloudDirectoryUserOptions *CreateCloudDirectoryUserOptions)`, func() {
		createCloudDirectoryUserPath := "/management/v4/testString/cloud_directory/Users"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCloudDirectoryUserPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateCloudDirectoryUser successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.CreateCloudDirectoryUser(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)

				// Construct an instance of the CreateCloudDirectoryUserOptions model
				createCloudDirectoryUserOptionsModel := new(appidmanagementv4.CreateCloudDirectoryUserOptions)
				createCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				createCloudDirectoryUserOptionsModel.Emails = []appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}
				createCloudDirectoryUserOptionsModel.Password = core.StringPtr("userPassword")
				createCloudDirectoryUserOptionsModel.Active = core.BoolPtr(true)
				createCloudDirectoryUserOptionsModel.UserName = core.StringPtr("myUserName")
				createCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.CreateCloudDirectoryUser(createCloudDirectoryUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CreateCloudDirectoryUser with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)

				// Construct an instance of the CreateCloudDirectoryUserOptions model
				createCloudDirectoryUserOptionsModel := new(appidmanagementv4.CreateCloudDirectoryUserOptions)
				createCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				createCloudDirectoryUserOptionsModel.Emails = []appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}
				createCloudDirectoryUserOptionsModel.Password = core.StringPtr("userPassword")
				createCloudDirectoryUserOptionsModel.Active = core.BoolPtr(true)
				createCloudDirectoryUserOptionsModel.UserName = core.StringPtr("myUserName")
				createCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.CreateCloudDirectoryUser(createCloudDirectoryUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CreateCloudDirectoryUserOptions model with no property values
				createCloudDirectoryUserOptionsModelNew := new(appidmanagementv4.CreateCloudDirectoryUserOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.CreateCloudDirectoryUser(createCloudDirectoryUserOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryUser(getCloudDirectoryUserOptions *GetCloudDirectoryUserOptions)`, func() {
		getCloudDirectoryUserPath := "/management/v4/testString/cloud_directory/Users/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryUserPath))
					Expect(req.Method).To(Equal("GET"))

					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectoryUser successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.GetCloudDirectoryUser(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetCloudDirectoryUserOptions model
				getCloudDirectoryUserOptionsModel := new(appidmanagementv4.GetCloudDirectoryUserOptions)
				getCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryUserOptionsModel.UserID = core.StringPtr("testString")
				getCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.GetCloudDirectoryUser(getCloudDirectoryUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetCloudDirectoryUser with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryUserOptions model
				getCloudDirectoryUserOptionsModel := new(appidmanagementv4.GetCloudDirectoryUserOptions)
				getCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryUserOptionsModel.UserID = core.StringPtr("testString")
				getCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.GetCloudDirectoryUser(getCloudDirectoryUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetCloudDirectoryUserOptions model with no property values
				getCloudDirectoryUserOptionsModelNew := new(appidmanagementv4.GetCloudDirectoryUserOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.GetCloudDirectoryUser(getCloudDirectoryUserOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateCloudDirectoryUser(updateCloudDirectoryUserOptions *UpdateCloudDirectoryUserOptions)`, func() {
		updateCloudDirectoryUserPath := "/management/v4/testString/cloud_directory/Users/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateCloudDirectoryUserPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateCloudDirectoryUser successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UpdateCloudDirectoryUser(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)

				// Construct an instance of the UpdateCloudDirectoryUserOptions model
				updateCloudDirectoryUserOptionsModel := new(appidmanagementv4.UpdateCloudDirectoryUserOptions)
				updateCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				updateCloudDirectoryUserOptionsModel.UserID = core.StringPtr("testString")
				updateCloudDirectoryUserOptionsModel.Emails = []appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}
				updateCloudDirectoryUserOptionsModel.Active = core.BoolPtr(true)
				updateCloudDirectoryUserOptionsModel.UserName = core.StringPtr("myUserName")
				updateCloudDirectoryUserOptionsModel.Password = core.StringPtr("userPassword")
				updateCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UpdateCloudDirectoryUser(updateCloudDirectoryUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateCloudDirectoryUser with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)

				// Construct an instance of the UpdateCloudDirectoryUserOptions model
				updateCloudDirectoryUserOptionsModel := new(appidmanagementv4.UpdateCloudDirectoryUserOptions)
				updateCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				updateCloudDirectoryUserOptionsModel.UserID = core.StringPtr("testString")
				updateCloudDirectoryUserOptionsModel.Emails = []appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}
				updateCloudDirectoryUserOptionsModel.Active = core.BoolPtr(true)
				updateCloudDirectoryUserOptionsModel.UserName = core.StringPtr("myUserName")
				updateCloudDirectoryUserOptionsModel.Password = core.StringPtr("userPassword")
				updateCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UpdateCloudDirectoryUser(updateCloudDirectoryUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateCloudDirectoryUserOptions model with no property values
				updateCloudDirectoryUserOptionsModelNew := new(appidmanagementv4.UpdateCloudDirectoryUserOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UpdateCloudDirectoryUser(updateCloudDirectoryUserOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteCloudDirectoryUser(deleteCloudDirectoryUserOptions *DeleteCloudDirectoryUserOptions)`, func() {
		deleteCloudDirectoryUserPath := "/management/v4/testString/cloud_directory/Users/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCloudDirectoryUserPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteCloudDirectoryUser successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.DeleteCloudDirectoryUser(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteCloudDirectoryUserOptions model
				deleteCloudDirectoryUserOptionsModel := new(appidmanagementv4.DeleteCloudDirectoryUserOptions)
				deleteCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				deleteCloudDirectoryUserOptionsModel.UserID = core.StringPtr("testString")
				deleteCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.DeleteCloudDirectoryUser(deleteCloudDirectoryUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteCloudDirectoryUser with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the DeleteCloudDirectoryUserOptions model
				deleteCloudDirectoryUserOptionsModel := new(appidmanagementv4.DeleteCloudDirectoryUserOptions)
				deleteCloudDirectoryUserOptionsModel.TenantID = core.StringPtr("testString")
				deleteCloudDirectoryUserOptionsModel.UserID = core.StringPtr("testString")
				deleteCloudDirectoryUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.DeleteCloudDirectoryUser(deleteCloudDirectoryUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteCloudDirectoryUserOptions model with no property values
				deleteCloudDirectoryUserOptionsModelNew := new(appidmanagementv4.DeleteCloudDirectoryUserOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.DeleteCloudDirectoryUser(deleteCloudDirectoryUserOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`InvalidateUserSSOSessions(invalidateUserSSOSessionsOptions *InvalidateUserSSOSessionsOptions)`, func() {
		invalidateUserSSOSessionsPath := "/management/v4/testString/cloud_directory/Users/testString/sso/logout"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(invalidateUserSSOSessionsPath))
					Expect(req.Method).To(Equal("POST"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke InvalidateUserSSOSessions successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.InvalidateUserSSOSessions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the InvalidateUserSSOSessionsOptions model
				invalidateUserSSOSessionsOptionsModel := new(appidmanagementv4.InvalidateUserSSOSessionsOptions)
				invalidateUserSSOSessionsOptionsModel.TenantID = core.StringPtr("testString")
				invalidateUserSSOSessionsOptionsModel.UserID = core.StringPtr("testString")
				invalidateUserSSOSessionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.InvalidateUserSSOSessions(invalidateUserSSOSessionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke InvalidateUserSSOSessions with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the InvalidateUserSSOSessionsOptions model
				invalidateUserSSOSessionsOptionsModel := new(appidmanagementv4.InvalidateUserSSOSessionsOptions)
				invalidateUserSSOSessionsOptionsModel.TenantID = core.StringPtr("testString")
				invalidateUserSSOSessionsOptionsModel.UserID = core.StringPtr("testString")
				invalidateUserSSOSessionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.InvalidateUserSSOSessions(invalidateUserSSOSessionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the InvalidateUserSSOSessionsOptions model with no property values
				invalidateUserSSOSessionsOptionsModelNew := new(appidmanagementv4.InvalidateUserSSOSessionsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.InvalidateUserSSOSessions(invalidateUserSSOSessionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryExport(cloudDirectoryExportOptions *CloudDirectoryExportOptions) - Operation response error`, func() {
		cloudDirectoryExportPath := "/management/v4/testString/cloud_directory/export"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryExportPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["encryption_secret"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CloudDirectoryExport with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryExportOptions model
				cloudDirectoryExportOptionsModel := new(appidmanagementv4.CloudDirectoryExportOptions)
				cloudDirectoryExportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				cloudDirectoryExportOptionsModel.Count = core.Int64Ptr(int64(0))
				cloudDirectoryExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryExport(cloudDirectoryExportOptions *CloudDirectoryExportOptions)`, func() {
		cloudDirectoryExportPath := "/management/v4/testString/cloud_directory/export"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryExportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_secret"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"users": [{"scimUser": {"anyKey": "anyValue"}, "passwordHash": "PasswordHash", "passwordHashAlg": "PasswordHashAlg", "profile": {"attributes": {"anyKey": "anyValue"}}, "roles": ["Roles"]}]}`)
				}))
			})
			It(`Invoke CloudDirectoryExport successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the CloudDirectoryExportOptions model
				cloudDirectoryExportOptionsModel := new(appidmanagementv4.CloudDirectoryExportOptions)
				cloudDirectoryExportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				cloudDirectoryExportOptionsModel.Count = core.Int64Ptr(int64(0))
				cloudDirectoryExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.CloudDirectoryExportWithContext(ctx, cloudDirectoryExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.CloudDirectoryExportWithContext(ctx, cloudDirectoryExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryExportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_secret"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"users": [{"scimUser": {"anyKey": "anyValue"}, "passwordHash": "PasswordHash", "passwordHashAlg": "PasswordHashAlg", "profile": {"attributes": {"anyKey": "anyValue"}}, "roles": ["Roles"]}]}`)
				}))
			})
			It(`Invoke CloudDirectoryExport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.CloudDirectoryExport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudDirectoryExportOptions model
				cloudDirectoryExportOptionsModel := new(appidmanagementv4.CloudDirectoryExportOptions)
				cloudDirectoryExportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				cloudDirectoryExportOptionsModel.Count = core.Int64Ptr(int64(0))
				cloudDirectoryExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CloudDirectoryExport with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryExportOptions model
				cloudDirectoryExportOptionsModel := new(appidmanagementv4.CloudDirectoryExportOptions)
				cloudDirectoryExportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				cloudDirectoryExportOptionsModel.Count = core.Int64Ptr(int64(0))
				cloudDirectoryExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CloudDirectoryExportOptions model with no property values
				cloudDirectoryExportOptionsModelNew := new(appidmanagementv4.CloudDirectoryExportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CloudDirectoryExport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryExportOptions model
				cloudDirectoryExportOptionsModel := new(appidmanagementv4.CloudDirectoryExportOptions)
				cloudDirectoryExportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				cloudDirectoryExportOptionsModel.Count = core.Int64Ptr(int64(0))
				cloudDirectoryExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.CloudDirectoryExport(cloudDirectoryExportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryImport(cloudDirectoryImportOptions *CloudDirectoryImportOptions) - Operation response error`, func() {
		cloudDirectoryImportPath := "/management/v4/testString/cloud_directory/import"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryImportPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["encryption_secret"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CloudDirectoryImport with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ExportUserUsersItemProfile model
				exportUserUsersItemProfileModel := new(appidmanagementv4.ExportUserUsersItemProfile)
				exportUserUsersItemProfileModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the ExportUserUsersItem model
				exportUserUsersItemModel := new(appidmanagementv4.ExportUserUsersItem)
				exportUserUsersItemModel.ScimUser = map[string]interface{}{"anyKey": "anyValue"}
				exportUserUsersItemModel.PasswordHash = core.StringPtr("testString")
				exportUserUsersItemModel.PasswordHashAlg = core.StringPtr("testString")
				exportUserUsersItemModel.Profile = exportUserUsersItemProfileModel
				exportUserUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the CloudDirectoryImportOptions model
				cloudDirectoryImportOptionsModel := new(appidmanagementv4.CloudDirectoryImportOptions)
				cloudDirectoryImportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.Users = []appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel}
				cloudDirectoryImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryImport(cloudDirectoryImportOptions *CloudDirectoryImportOptions)`, func() {
		cloudDirectoryImportPath := "/management/v4/testString/cloud_directory/import"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryImportPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["encryption_secret"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"added": 5, "failed": 6, "failReasons": [{"originalId": "OriginalID", "id": "ID", "email": "Email", "userName": "UserName", "error": {"anyKey": "anyValue"}}]}`)
				}))
			})
			It(`Invoke CloudDirectoryImport successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ExportUserUsersItemProfile model
				exportUserUsersItemProfileModel := new(appidmanagementv4.ExportUserUsersItemProfile)
				exportUserUsersItemProfileModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the ExportUserUsersItem model
				exportUserUsersItemModel := new(appidmanagementv4.ExportUserUsersItem)
				exportUserUsersItemModel.ScimUser = map[string]interface{}{"anyKey": "anyValue"}
				exportUserUsersItemModel.PasswordHash = core.StringPtr("testString")
				exportUserUsersItemModel.PasswordHashAlg = core.StringPtr("testString")
				exportUserUsersItemModel.Profile = exportUserUsersItemProfileModel
				exportUserUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the CloudDirectoryImportOptions model
				cloudDirectoryImportOptionsModel := new(appidmanagementv4.CloudDirectoryImportOptions)
				cloudDirectoryImportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.Users = []appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel}
				cloudDirectoryImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.CloudDirectoryImportWithContext(ctx, cloudDirectoryImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.CloudDirectoryImportWithContext(ctx, cloudDirectoryImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryImportPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["encryption_secret"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"added": 5, "failed": 6, "failReasons": [{"originalId": "OriginalID", "id": "ID", "email": "Email", "userName": "UserName", "error": {"anyKey": "anyValue"}}]}`)
				}))
			})
			It(`Invoke CloudDirectoryImport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.CloudDirectoryImport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExportUserUsersItemProfile model
				exportUserUsersItemProfileModel := new(appidmanagementv4.ExportUserUsersItemProfile)
				exportUserUsersItemProfileModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the ExportUserUsersItem model
				exportUserUsersItemModel := new(appidmanagementv4.ExportUserUsersItem)
				exportUserUsersItemModel.ScimUser = map[string]interface{}{"anyKey": "anyValue"}
				exportUserUsersItemModel.PasswordHash = core.StringPtr("testString")
				exportUserUsersItemModel.PasswordHashAlg = core.StringPtr("testString")
				exportUserUsersItemModel.Profile = exportUserUsersItemProfileModel
				exportUserUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the CloudDirectoryImportOptions model
				cloudDirectoryImportOptionsModel := new(appidmanagementv4.CloudDirectoryImportOptions)
				cloudDirectoryImportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.Users = []appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel}
				cloudDirectoryImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CloudDirectoryImport with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ExportUserUsersItemProfile model
				exportUserUsersItemProfileModel := new(appidmanagementv4.ExportUserUsersItemProfile)
				exportUserUsersItemProfileModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the ExportUserUsersItem model
				exportUserUsersItemModel := new(appidmanagementv4.ExportUserUsersItem)
				exportUserUsersItemModel.ScimUser = map[string]interface{}{"anyKey": "anyValue"}
				exportUserUsersItemModel.PasswordHash = core.StringPtr("testString")
				exportUserUsersItemModel.PasswordHashAlg = core.StringPtr("testString")
				exportUserUsersItemModel.Profile = exportUserUsersItemProfileModel
				exportUserUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the CloudDirectoryImportOptions model
				cloudDirectoryImportOptionsModel := new(appidmanagementv4.CloudDirectoryImportOptions)
				cloudDirectoryImportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.Users = []appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel}
				cloudDirectoryImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CloudDirectoryImportOptions model with no property values
				cloudDirectoryImportOptionsModelNew := new(appidmanagementv4.CloudDirectoryImportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CloudDirectoryImport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ExportUserUsersItemProfile model
				exportUserUsersItemProfileModel := new(appidmanagementv4.ExportUserUsersItemProfile)
				exportUserUsersItemProfileModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the ExportUserUsersItem model
				exportUserUsersItemModel := new(appidmanagementv4.ExportUserUsersItem)
				exportUserUsersItemModel.ScimUser = map[string]interface{}{"anyKey": "anyValue"}
				exportUserUsersItemModel.PasswordHash = core.StringPtr("testString")
				exportUserUsersItemModel.PasswordHashAlg = core.StringPtr("testString")
				exportUserUsersItemModel.Profile = exportUserUsersItemProfileModel
				exportUserUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the CloudDirectoryImportOptions model
				cloudDirectoryImportOptionsModel := new(appidmanagementv4.CloudDirectoryImportOptions)
				cloudDirectoryImportOptionsModel.EncryptionSecret = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryImportOptionsModel.Users = []appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel}
				cloudDirectoryImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.CloudDirectoryImport(cloudDirectoryImportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptions *CloudDirectoryGetUserinfoOptions) - Operation response error`, func() {
		cloudDirectoryGetUserinfoPath := "/management/v4/testString/cloud_directory/testString/userinfo"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryGetUserinfoPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CloudDirectoryGetUserinfo with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryGetUserinfoOptions model
				cloudDirectoryGetUserinfoOptionsModel := new(appidmanagementv4.CloudDirectoryGetUserinfoOptions)
				cloudDirectoryGetUserinfoOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptions *CloudDirectoryGetUserinfoOptions)`, func() {
		cloudDirectoryGetUserinfoPath := "/management/v4/testString/cloud_directory/testString/userinfo"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryGetUserinfoPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sub": "Sub", "identities": [{"provider": "Provider", "id": "ID", "idpUserInfo": {"anyKey": "anyValue"}}], "attributes": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke CloudDirectoryGetUserinfo successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the CloudDirectoryGetUserinfoOptions model
				cloudDirectoryGetUserinfoOptionsModel := new(appidmanagementv4.CloudDirectoryGetUserinfoOptions)
				cloudDirectoryGetUserinfoOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.CloudDirectoryGetUserinfoWithContext(ctx, cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.CloudDirectoryGetUserinfoWithContext(ctx, cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryGetUserinfoPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"sub": "Sub", "identities": [{"provider": "Provider", "id": "ID", "idpUserInfo": {"anyKey": "anyValue"}}], "attributes": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke CloudDirectoryGetUserinfo successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.CloudDirectoryGetUserinfo(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudDirectoryGetUserinfoOptions model
				cloudDirectoryGetUserinfoOptionsModel := new(appidmanagementv4.CloudDirectoryGetUserinfoOptions)
				cloudDirectoryGetUserinfoOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CloudDirectoryGetUserinfo with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryGetUserinfoOptions model
				cloudDirectoryGetUserinfoOptionsModel := new(appidmanagementv4.CloudDirectoryGetUserinfoOptions)
				cloudDirectoryGetUserinfoOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CloudDirectoryGetUserinfoOptions model with no property values
				cloudDirectoryGetUserinfoOptionsModelNew := new(appidmanagementv4.CloudDirectoryGetUserinfoOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CloudDirectoryGetUserinfo successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryGetUserinfoOptions model
				cloudDirectoryGetUserinfoOptionsModel := new(appidmanagementv4.CloudDirectoryGetUserinfoOptions)
				cloudDirectoryGetUserinfoOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryGetUserinfoOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.CloudDirectoryGetUserinfo(cloudDirectoryGetUserinfoOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`StartSignUp(startSignUpOptions *StartSignUpOptions)`, func() {
		startSignUpPath := "/management/v4/testString/cloud_directory/sign_up"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(startSignUpPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// TODO: Add check for shouldCreateProfile query parameter
					Expect(req.URL.Query()["language"]).To(Equal([]string{"testString"}))
					res.WriteHeader(201)
				}))
			})
			It(`Invoke StartSignUp successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.StartSignUp(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)

				// Construct an instance of the StartSignUpOptions model
				startSignUpOptionsModel := new(appidmanagementv4.StartSignUpOptions)
				startSignUpOptionsModel.TenantID = core.StringPtr("testString")
				startSignUpOptionsModel.ShouldCreateProfile = core.BoolPtr(true)
				startSignUpOptionsModel.Emails = []appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}
				startSignUpOptionsModel.Password = core.StringPtr("userPassword")
				startSignUpOptionsModel.Active = core.BoolPtr(true)
				startSignUpOptionsModel.UserName = core.StringPtr("myUserName")
				startSignUpOptionsModel.Language = core.StringPtr("testString")
				startSignUpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.StartSignUp(startSignUpOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke StartSignUp with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)

				// Construct an instance of the StartSignUpOptions model
				startSignUpOptionsModel := new(appidmanagementv4.StartSignUpOptions)
				startSignUpOptionsModel.TenantID = core.StringPtr("testString")
				startSignUpOptionsModel.ShouldCreateProfile = core.BoolPtr(true)
				startSignUpOptionsModel.Emails = []appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}
				startSignUpOptionsModel.Password = core.StringPtr("userPassword")
				startSignUpOptionsModel.Active = core.BoolPtr(true)
				startSignUpOptionsModel.UserName = core.StringPtr("myUserName")
				startSignUpOptionsModel.Language = core.StringPtr("testString")
				startSignUpOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.StartSignUp(startSignUpOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the StartSignUpOptions model with no property values
				startSignUpOptionsModelNew := new(appidmanagementv4.StartSignUpOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.StartSignUp(startSignUpOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UserVerificationResult(userVerificationResultOptions *UserVerificationResultOptions) - Operation response error`, func() {
		userVerificationResultPath := "/management/v4/testString/cloud_directory/sign_up/confirmation_result"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userVerificationResultPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UserVerificationResult with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UserVerificationResultOptions model
				userVerificationResultOptionsModel := new(appidmanagementv4.UserVerificationResultOptions)
				userVerificationResultOptionsModel.TenantID = core.StringPtr("testString")
				userVerificationResultOptionsModel.Context = core.StringPtr("testString")
				userVerificationResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UserVerificationResult(userVerificationResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UserVerificationResult(userVerificationResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UserVerificationResult(userVerificationResultOptions *UserVerificationResultOptions)`, func() {
		userVerificationResultPath := "/management/v4/testString/cloud_directory/sign_up/confirmation_result"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userVerificationResultPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"success": false, "uuid": "UUID"}`)
				}))
			})
			It(`Invoke UserVerificationResult successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UserVerificationResultOptions model
				userVerificationResultOptionsModel := new(appidmanagementv4.UserVerificationResultOptions)
				userVerificationResultOptionsModel.TenantID = core.StringPtr("testString")
				userVerificationResultOptionsModel.Context = core.StringPtr("testString")
				userVerificationResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UserVerificationResultWithContext(ctx, userVerificationResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UserVerificationResult(userVerificationResultOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UserVerificationResultWithContext(ctx, userVerificationResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userVerificationResultPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"success": false, "uuid": "UUID"}`)
				}))
			})
			It(`Invoke UserVerificationResult successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UserVerificationResult(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserVerificationResultOptions model
				userVerificationResultOptionsModel := new(appidmanagementv4.UserVerificationResultOptions)
				userVerificationResultOptionsModel.TenantID = core.StringPtr("testString")
				userVerificationResultOptionsModel.Context = core.StringPtr("testString")
				userVerificationResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UserVerificationResult(userVerificationResultOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UserVerificationResult with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UserVerificationResultOptions model
				userVerificationResultOptionsModel := new(appidmanagementv4.UserVerificationResultOptions)
				userVerificationResultOptionsModel.TenantID = core.StringPtr("testString")
				userVerificationResultOptionsModel.Context = core.StringPtr("testString")
				userVerificationResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UserVerificationResult(userVerificationResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UserVerificationResultOptions model with no property values
				userVerificationResultOptionsModelNew := new(appidmanagementv4.UserVerificationResultOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UserVerificationResult(userVerificationResultOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UserVerificationResult successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UserVerificationResultOptions model
				userVerificationResultOptionsModel := new(appidmanagementv4.UserVerificationResultOptions)
				userVerificationResultOptionsModel.TenantID = core.StringPtr("testString")
				userVerificationResultOptionsModel.Context = core.StringPtr("testString")
				userVerificationResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UserVerificationResult(userVerificationResultOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`StartForgotPassword(startForgotPasswordOptions *StartForgotPasswordOptions)`, func() {
		startForgotPasswordPath := "/management/v4/testString/cloud_directory/forgot_password"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(startForgotPasswordPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["language"]).To(Equal([]string{"testString"}))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke StartForgotPassword successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.StartForgotPassword(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the StartForgotPasswordOptions model
				startForgotPasswordOptionsModel := new(appidmanagementv4.StartForgotPasswordOptions)
				startForgotPasswordOptionsModel.TenantID = core.StringPtr("testString")
				startForgotPasswordOptionsModel.User = core.StringPtr("testString")
				startForgotPasswordOptionsModel.Language = core.StringPtr("testString")
				startForgotPasswordOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.StartForgotPassword(startForgotPasswordOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke StartForgotPassword with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the StartForgotPasswordOptions model
				startForgotPasswordOptionsModel := new(appidmanagementv4.StartForgotPasswordOptions)
				startForgotPasswordOptionsModel.TenantID = core.StringPtr("testString")
				startForgotPasswordOptionsModel.User = core.StringPtr("testString")
				startForgotPasswordOptionsModel.Language = core.StringPtr("testString")
				startForgotPasswordOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.StartForgotPassword(startForgotPasswordOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the StartForgotPasswordOptions model with no property values
				startForgotPasswordOptionsModelNew := new(appidmanagementv4.StartForgotPasswordOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.StartForgotPassword(startForgotPasswordOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ForgotPasswordResult(forgotPasswordResultOptions *ForgotPasswordResultOptions) - Operation response error`, func() {
		forgotPasswordResultPath := "/management/v4/testString/cloud_directory/forgot_password/confirmation_result"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(forgotPasswordResultPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ForgotPasswordResult with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ForgotPasswordResultOptions model
				forgotPasswordResultOptionsModel := new(appidmanagementv4.ForgotPasswordResultOptions)
				forgotPasswordResultOptionsModel.TenantID = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Context = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ForgotPasswordResult(forgotPasswordResultOptions *ForgotPasswordResultOptions)`, func() {
		forgotPasswordResultPath := "/management/v4/testString/cloud_directory/forgot_password/confirmation_result"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(forgotPasswordResultPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"success": false, "uuid": "UUID"}`)
				}))
			})
			It(`Invoke ForgotPasswordResult successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ForgotPasswordResultOptions model
				forgotPasswordResultOptionsModel := new(appidmanagementv4.ForgotPasswordResultOptions)
				forgotPasswordResultOptionsModel.TenantID = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Context = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.ForgotPasswordResultWithContext(ctx, forgotPasswordResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.ForgotPasswordResultWithContext(ctx, forgotPasswordResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(forgotPasswordResultPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"success": false, "uuid": "UUID"}`)
				}))
			})
			It(`Invoke ForgotPasswordResult successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.ForgotPasswordResult(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ForgotPasswordResultOptions model
				forgotPasswordResultOptionsModel := new(appidmanagementv4.ForgotPasswordResultOptions)
				forgotPasswordResultOptionsModel.TenantID = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Context = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ForgotPasswordResult with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ForgotPasswordResultOptions model
				forgotPasswordResultOptionsModel := new(appidmanagementv4.ForgotPasswordResultOptions)
				forgotPasswordResultOptionsModel.TenantID = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Context = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ForgotPasswordResultOptions model with no property values
				forgotPasswordResultOptionsModelNew := new(appidmanagementv4.ForgotPasswordResultOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ForgotPasswordResult successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ForgotPasswordResultOptions model
				forgotPasswordResultOptionsModel := new(appidmanagementv4.ForgotPasswordResultOptions)
				forgotPasswordResultOptionsModel.TenantID = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Context = core.StringPtr("testString")
				forgotPasswordResultOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.ForgotPasswordResult(forgotPasswordResultOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ChangePassword(changePasswordOptions *ChangePasswordOptions)`, func() {
		changePasswordPath := "/management/v4/testString/cloud_directory/change_password"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(changePasswordPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["language"]).To(Equal([]string{"testString"}))
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ChangePassword successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.ChangePassword(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the ChangePasswordOptions model
				changePasswordOptionsModel := new(appidmanagementv4.ChangePasswordOptions)
				changePasswordOptionsModel.TenantID = core.StringPtr("testString")
				changePasswordOptionsModel.NewPassword = core.StringPtr("testString")
				changePasswordOptionsModel.UUID = core.StringPtr("testString")
				changePasswordOptionsModel.ChangedIPAddress = core.StringPtr("testString")
				changePasswordOptionsModel.Language = core.StringPtr("testString")
				changePasswordOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.ChangePassword(changePasswordOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke ChangePassword with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ChangePasswordOptions model
				changePasswordOptionsModel := new(appidmanagementv4.ChangePasswordOptions)
				changePasswordOptionsModel.TenantID = core.StringPtr("testString")
				changePasswordOptionsModel.NewPassword = core.StringPtr("testString")
				changePasswordOptionsModel.UUID = core.StringPtr("testString")
				changePasswordOptionsModel.ChangedIPAddress = core.StringPtr("testString")
				changePasswordOptionsModel.Language = core.StringPtr("testString")
				changePasswordOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.ChangePassword(changePasswordOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the ChangePasswordOptions model with no property values
				changePasswordOptionsModelNew := new(appidmanagementv4.ChangePasswordOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.ChangePassword(changePasswordOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ResendNotification(resendNotificationOptions *ResendNotificationOptions) - Operation response error`, func() {
		resendNotificationPath := "/management/v4/testString/cloud_directory/resend/USER_VERIFICATION"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(resendNotificationPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["language"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ResendNotification with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ResendNotificationOptions model
				resendNotificationOptionsModel := new(appidmanagementv4.ResendNotificationOptions)
				resendNotificationOptionsModel.TenantID = core.StringPtr("testString")
				resendNotificationOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				resendNotificationOptionsModel.UUID = core.StringPtr("testString")
				resendNotificationOptionsModel.Language = core.StringPtr("testString")
				resendNotificationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.ResendNotification(resendNotificationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.ResendNotification(resendNotificationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ResendNotification(resendNotificationOptions *ResendNotificationOptions)`, func() {
		resendNotificationPath := "/management/v4/testString/cloud_directory/resend/USER_VERIFICATION"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(resendNotificationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["language"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"message": "Message"}`)
				}))
			})
			It(`Invoke ResendNotification successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ResendNotificationOptions model
				resendNotificationOptionsModel := new(appidmanagementv4.ResendNotificationOptions)
				resendNotificationOptionsModel.TenantID = core.StringPtr("testString")
				resendNotificationOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				resendNotificationOptionsModel.UUID = core.StringPtr("testString")
				resendNotificationOptionsModel.Language = core.StringPtr("testString")
				resendNotificationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.ResendNotificationWithContext(ctx, resendNotificationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.ResendNotification(resendNotificationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.ResendNotificationWithContext(ctx, resendNotificationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(resendNotificationPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["language"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"message": "Message"}`)
				}))
			})
			It(`Invoke ResendNotification successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.ResendNotification(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResendNotificationOptions model
				resendNotificationOptionsModel := new(appidmanagementv4.ResendNotificationOptions)
				resendNotificationOptionsModel.TenantID = core.StringPtr("testString")
				resendNotificationOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				resendNotificationOptionsModel.UUID = core.StringPtr("testString")
				resendNotificationOptionsModel.Language = core.StringPtr("testString")
				resendNotificationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.ResendNotification(resendNotificationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ResendNotification with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ResendNotificationOptions model
				resendNotificationOptionsModel := new(appidmanagementv4.ResendNotificationOptions)
				resendNotificationOptionsModel.TenantID = core.StringPtr("testString")
				resendNotificationOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				resendNotificationOptionsModel.UUID = core.StringPtr("testString")
				resendNotificationOptionsModel.Language = core.StringPtr("testString")
				resendNotificationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.ResendNotification(resendNotificationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ResendNotificationOptions model with no property values
				resendNotificationOptionsModelNew := new(appidmanagementv4.ResendNotificationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.ResendNotification(resendNotificationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke ResendNotification successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ResendNotificationOptions model
				resendNotificationOptionsModel := new(appidmanagementv4.ResendNotificationOptions)
				resendNotificationOptionsModel.TenantID = core.StringPtr("testString")
				resendNotificationOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				resendNotificationOptionsModel.UUID = core.StringPtr("testString")
				resendNotificationOptionsModel.Language = core.StringPtr("testString")
				resendNotificationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.ResendNotification(resendNotificationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CloudDirectoryRemove(cloudDirectoryRemoveOptions *CloudDirectoryRemoveOptions)`, func() {
		cloudDirectoryRemovePath := "/management/v4/testString/cloud_directory/remove/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(cloudDirectoryRemovePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke CloudDirectoryRemove successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.CloudDirectoryRemove(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CloudDirectoryRemoveOptions model
				cloudDirectoryRemoveOptionsModel := new(appidmanagementv4.CloudDirectoryRemoveOptions)
				cloudDirectoryRemoveOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryRemoveOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryRemoveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.CloudDirectoryRemove(cloudDirectoryRemoveOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CloudDirectoryRemove with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryRemoveOptions model
				cloudDirectoryRemoveOptionsModel := new(appidmanagementv4.CloudDirectoryRemoveOptions)
				cloudDirectoryRemoveOptionsModel.TenantID = core.StringPtr("testString")
				cloudDirectoryRemoveOptionsModel.UserID = core.StringPtr("testString")
				cloudDirectoryRemoveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.CloudDirectoryRemove(cloudDirectoryRemoveOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CloudDirectoryRemoveOptions model with no property values
				cloudDirectoryRemoveOptionsModelNew := new(appidmanagementv4.CloudDirectoryRemoveOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.CloudDirectoryRemove(cloudDirectoryRemoveOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTokensConfig(getTokensConfigOptions *GetTokensConfigOptions) - Operation response error`, func() {
		getTokensConfigPath := "/management/v4/testString/config/tokens"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTokensConfigPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTokensConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetTokensConfigOptions model
				getTokensConfigOptionsModel := new(appidmanagementv4.GetTokensConfigOptions)
				getTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				getTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetTokensConfig(getTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetTokensConfig(getTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTokensConfig(getTokensConfigOptions *GetTokensConfigOptions)`, func() {
		getTokensConfigPath := "/management/v4/testString/config/tokens"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTokensConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"idTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "accessTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "access": {"expires_in": 9}, "refresh": {"expires_in": 9, "enabled": false}, "anonymousAccess": {"expires_in": 9, "enabled": false}}`)
				}))
			})
			It(`Invoke GetTokensConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetTokensConfigOptions model
				getTokensConfigOptionsModel := new(appidmanagementv4.GetTokensConfigOptions)
				getTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				getTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetTokensConfigWithContext(ctx, getTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetTokensConfig(getTokensConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetTokensConfigWithContext(ctx, getTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTokensConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"idTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "accessTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "access": {"expires_in": 9}, "refresh": {"expires_in": 9, "enabled": false}, "anonymousAccess": {"expires_in": 9, "enabled": false}}`)
				}))
			})
			It(`Invoke GetTokensConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetTokensConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTokensConfigOptions model
				getTokensConfigOptionsModel := new(appidmanagementv4.GetTokensConfigOptions)
				getTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				getTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetTokensConfig(getTokensConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTokensConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetTokensConfigOptions model
				getTokensConfigOptionsModel := new(appidmanagementv4.GetTokensConfigOptions)
				getTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				getTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetTokensConfig(getTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTokensConfigOptions model with no property values
				getTokensConfigOptionsModelNew := new(appidmanagementv4.GetTokensConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetTokensConfig(getTokensConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTokensConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetTokensConfigOptions model
				getTokensConfigOptionsModel := new(appidmanagementv4.GetTokensConfigOptions)
				getTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				getTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetTokensConfig(getTokensConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PutTokensConfig(putTokensConfigOptions *PutTokensConfigOptions) - Operation response error`, func() {
		putTokensConfigPath := "/management/v4/testString/config/tokens"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putTokensConfigPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PutTokensConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the TokenClaimMapping model
				tokenClaimMappingModel := new(appidmanagementv4.TokenClaimMapping)
				tokenClaimMappingModel.Source = core.StringPtr("saml")
				tokenClaimMappingModel.SourceClaim = core.StringPtr("testString")
				tokenClaimMappingModel.DestinationClaim = core.StringPtr("testString")

				// Construct an instance of the AccessTokenConfigParams model
				accessTokenConfigParamsModel := new(appidmanagementv4.AccessTokenConfigParams)
				accessTokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(3600))

				// Construct an instance of the TokenConfigParams model
				tokenConfigParamsModel := new(appidmanagementv4.TokenConfigParams)
				tokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(2592000))
				tokenConfigParamsModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the PutTokensConfigOptions model
				putTokensConfigOptionsModel := new(appidmanagementv4.PutTokensConfigOptions)
				putTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				putTokensConfigOptionsModel.IDTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.AccessTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.Access = accessTokenConfigParamsModel
				putTokensConfigOptionsModel.Refresh = tokenConfigParamsModel
				putTokensConfigOptionsModel.AnonymousAccess = tokenConfigParamsModel
				putTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.PutTokensConfig(putTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.PutTokensConfig(putTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PutTokensConfig(putTokensConfigOptions *PutTokensConfigOptions)`, func() {
		putTokensConfigPath := "/management/v4/testString/config/tokens"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putTokensConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"idTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "accessTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "access": {"expires_in": 9}, "refresh": {"expires_in": 9, "enabled": false}, "anonymousAccess": {"expires_in": 9, "enabled": false}}`)
				}))
			})
			It(`Invoke PutTokensConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the TokenClaimMapping model
				tokenClaimMappingModel := new(appidmanagementv4.TokenClaimMapping)
				tokenClaimMappingModel.Source = core.StringPtr("saml")
				tokenClaimMappingModel.SourceClaim = core.StringPtr("testString")
				tokenClaimMappingModel.DestinationClaim = core.StringPtr("testString")

				// Construct an instance of the AccessTokenConfigParams model
				accessTokenConfigParamsModel := new(appidmanagementv4.AccessTokenConfigParams)
				accessTokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(3600))

				// Construct an instance of the TokenConfigParams model
				tokenConfigParamsModel := new(appidmanagementv4.TokenConfigParams)
				tokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(2592000))
				tokenConfigParamsModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the PutTokensConfigOptions model
				putTokensConfigOptionsModel := new(appidmanagementv4.PutTokensConfigOptions)
				putTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				putTokensConfigOptionsModel.IDTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.AccessTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.Access = accessTokenConfigParamsModel
				putTokensConfigOptionsModel.Refresh = tokenConfigParamsModel
				putTokensConfigOptionsModel.AnonymousAccess = tokenConfigParamsModel
				putTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.PutTokensConfigWithContext(ctx, putTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.PutTokensConfig(putTokensConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.PutTokensConfigWithContext(ctx, putTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(putTokensConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"idTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "accessTokenClaims": [{"source": "saml", "sourceClaim": "SourceClaim", "destinationClaim": "DestinationClaim"}], "access": {"expires_in": 9}, "refresh": {"expires_in": 9, "enabled": false}, "anonymousAccess": {"expires_in": 9, "enabled": false}}`)
				}))
			})
			It(`Invoke PutTokensConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.PutTokensConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TokenClaimMapping model
				tokenClaimMappingModel := new(appidmanagementv4.TokenClaimMapping)
				tokenClaimMappingModel.Source = core.StringPtr("saml")
				tokenClaimMappingModel.SourceClaim = core.StringPtr("testString")
				tokenClaimMappingModel.DestinationClaim = core.StringPtr("testString")

				// Construct an instance of the AccessTokenConfigParams model
				accessTokenConfigParamsModel := new(appidmanagementv4.AccessTokenConfigParams)
				accessTokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(3600))

				// Construct an instance of the TokenConfigParams model
				tokenConfigParamsModel := new(appidmanagementv4.TokenConfigParams)
				tokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(2592000))
				tokenConfigParamsModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the PutTokensConfigOptions model
				putTokensConfigOptionsModel := new(appidmanagementv4.PutTokensConfigOptions)
				putTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				putTokensConfigOptionsModel.IDTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.AccessTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.Access = accessTokenConfigParamsModel
				putTokensConfigOptionsModel.Refresh = tokenConfigParamsModel
				putTokensConfigOptionsModel.AnonymousAccess = tokenConfigParamsModel
				putTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.PutTokensConfig(putTokensConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PutTokensConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the TokenClaimMapping model
				tokenClaimMappingModel := new(appidmanagementv4.TokenClaimMapping)
				tokenClaimMappingModel.Source = core.StringPtr("saml")
				tokenClaimMappingModel.SourceClaim = core.StringPtr("testString")
				tokenClaimMappingModel.DestinationClaim = core.StringPtr("testString")

				// Construct an instance of the AccessTokenConfigParams model
				accessTokenConfigParamsModel := new(appidmanagementv4.AccessTokenConfigParams)
				accessTokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(3600))

				// Construct an instance of the TokenConfigParams model
				tokenConfigParamsModel := new(appidmanagementv4.TokenConfigParams)
				tokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(2592000))
				tokenConfigParamsModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the PutTokensConfigOptions model
				putTokensConfigOptionsModel := new(appidmanagementv4.PutTokensConfigOptions)
				putTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				putTokensConfigOptionsModel.IDTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.AccessTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.Access = accessTokenConfigParamsModel
				putTokensConfigOptionsModel.Refresh = tokenConfigParamsModel
				putTokensConfigOptionsModel.AnonymousAccess = tokenConfigParamsModel
				putTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.PutTokensConfig(putTokensConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PutTokensConfigOptions model with no property values
				putTokensConfigOptionsModelNew := new(appidmanagementv4.PutTokensConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.PutTokensConfig(putTokensConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PutTokensConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the TokenClaimMapping model
				tokenClaimMappingModel := new(appidmanagementv4.TokenClaimMapping)
				tokenClaimMappingModel.Source = core.StringPtr("saml")
				tokenClaimMappingModel.SourceClaim = core.StringPtr("testString")
				tokenClaimMappingModel.DestinationClaim = core.StringPtr("testString")

				// Construct an instance of the AccessTokenConfigParams model
				accessTokenConfigParamsModel := new(appidmanagementv4.AccessTokenConfigParams)
				accessTokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(3600))

				// Construct an instance of the TokenConfigParams model
				tokenConfigParamsModel := new(appidmanagementv4.TokenConfigParams)
				tokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(2592000))
				tokenConfigParamsModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the PutTokensConfigOptions model
				putTokensConfigOptionsModel := new(appidmanagementv4.PutTokensConfigOptions)
				putTokensConfigOptionsModel.TenantID = core.StringPtr("testString")
				putTokensConfigOptionsModel.IDTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.AccessTokenClaims = []appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}
				putTokensConfigOptionsModel.Access = accessTokenConfigParamsModel
				putTokensConfigOptionsModel.Refresh = tokenConfigParamsModel
				putTokensConfigOptionsModel.AnonymousAccess = tokenConfigParamsModel
				putTokensConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.PutTokensConfig(putTokensConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRedirectUris(getRedirectUrisOptions *GetRedirectUrisOptions) - Operation response error`, func() {
		getRedirectUrisPath := "/management/v4/testString/config/redirect_uris"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRedirectUrisPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRedirectUris with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRedirectUrisOptions model
				getRedirectUrisOptionsModel := new(appidmanagementv4.GetRedirectUrisOptions)
				getRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				getRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRedirectUris(getRedirectUrisOptions *GetRedirectUrisOptions)`, func() {
		getRedirectUrisPath := "/management/v4/testString/config/redirect_uris"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRedirectUrisPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"redirectUris": ["RedirectUris"]}`)
				}))
			})
			It(`Invoke GetRedirectUris successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetRedirectUrisOptions model
				getRedirectUrisOptionsModel := new(appidmanagementv4.GetRedirectUrisOptions)
				getRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				getRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetRedirectUrisWithContext(ctx, getRedirectUrisOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetRedirectUrisWithContext(ctx, getRedirectUrisOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRedirectUrisPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"redirectUris": ["RedirectUris"]}`)
				}))
			})
			It(`Invoke GetRedirectUris successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetRedirectUris(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRedirectUrisOptions model
				getRedirectUrisOptionsModel := new(appidmanagementv4.GetRedirectUrisOptions)
				getRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				getRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRedirectUris with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRedirectUrisOptions model
				getRedirectUrisOptionsModel := new(appidmanagementv4.GetRedirectUrisOptions)
				getRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				getRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRedirectUrisOptions model with no property values
				getRedirectUrisOptionsModelNew := new(appidmanagementv4.GetRedirectUrisOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRedirectUris successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRedirectUrisOptions model
				getRedirectUrisOptionsModel := new(appidmanagementv4.GetRedirectUrisOptions)
				getRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				getRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetRedirectUris(getRedirectUrisOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateRedirectUris(updateRedirectUrisOptions *UpdateRedirectUrisOptions)`, func() {
		updateRedirectUrisPath := "/management/v4/testString/config/redirect_uris"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRedirectUrisPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateRedirectUris successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UpdateRedirectUris(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RedirectURIConfig model
				redirectURIConfigModel := new(appidmanagementv4.RedirectURIConfig)
				redirectURIConfigModel.RedirectUris = []string{"http://localhost:3000/oauth-callback"}
				redirectURIConfigModel.TrustCloudIAMRedirectUris = core.BoolPtr(true)
				redirectURIConfigModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateRedirectUrisOptions model
				updateRedirectUrisOptionsModel := new(appidmanagementv4.UpdateRedirectUrisOptions)
				updateRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				updateRedirectUrisOptionsModel.RedirectUrisArray = redirectURIConfigModel
				updateRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UpdateRedirectUris(updateRedirectUrisOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateRedirectUris with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RedirectURIConfig model
				redirectURIConfigModel := new(appidmanagementv4.RedirectURIConfig)
				redirectURIConfigModel.RedirectUris = []string{"http://localhost:3000/oauth-callback"}
				redirectURIConfigModel.TrustCloudIAMRedirectUris = core.BoolPtr(true)
				redirectURIConfigModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the UpdateRedirectUrisOptions model
				updateRedirectUrisOptionsModel := new(appidmanagementv4.UpdateRedirectUrisOptions)
				updateRedirectUrisOptionsModel.TenantID = core.StringPtr("testString")
				updateRedirectUrisOptionsModel.RedirectUrisArray = redirectURIConfigModel
				updateRedirectUrisOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UpdateRedirectUris(updateRedirectUrisOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateRedirectUrisOptions model with no property values
				updateRedirectUrisOptionsModelNew := new(appidmanagementv4.UpdateRedirectUrisOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UpdateRedirectUris(updateRedirectUrisOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUserProfilesConfig(getUserProfilesConfigOptions *GetUserProfilesConfigOptions) - Operation response error`, func() {
		getUserProfilesConfigPath := "/management/v4/testString/config/users_profile"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserProfilesConfigPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUserProfilesConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetUserProfilesConfigOptions model
				getUserProfilesConfigOptionsModel := new(appidmanagementv4.GetUserProfilesConfigOptions)
				getUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				getUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUserProfilesConfig(getUserProfilesConfigOptions *GetUserProfilesConfigOptions)`, func() {
		getUserProfilesConfigPath := "/management/v4/testString/config/users_profile"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserProfilesConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke GetUserProfilesConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetUserProfilesConfigOptions model
				getUserProfilesConfigOptionsModel := new(appidmanagementv4.GetUserProfilesConfigOptions)
				getUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				getUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetUserProfilesConfigWithContext(ctx, getUserProfilesConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetUserProfilesConfigWithContext(ctx, getUserProfilesConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserProfilesConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke GetUserProfilesConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetUserProfilesConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUserProfilesConfigOptions model
				getUserProfilesConfigOptionsModel := new(appidmanagementv4.GetUserProfilesConfigOptions)
				getUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				getUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUserProfilesConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetUserProfilesConfigOptions model
				getUserProfilesConfigOptionsModel := new(appidmanagementv4.GetUserProfilesConfigOptions)
				getUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				getUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUserProfilesConfigOptions model with no property values
				getUserProfilesConfigOptionsModelNew := new(appidmanagementv4.GetUserProfilesConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetUserProfilesConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetUserProfilesConfigOptions model
				getUserProfilesConfigOptionsModel := new(appidmanagementv4.GetUserProfilesConfigOptions)
				getUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				getUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetUserProfilesConfig(getUserProfilesConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateUserProfilesConfig(updateUserProfilesConfigOptions *UpdateUserProfilesConfigOptions)`, func() {
		updateUserProfilesConfigPath := "/management/v4/testString/config/users_profile"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateUserProfilesConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateUserProfilesConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UpdateUserProfilesConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateUserProfilesConfigOptions model
				updateUserProfilesConfigOptionsModel := new(appidmanagementv4.UpdateUserProfilesConfigOptions)
				updateUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateUserProfilesConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UpdateUserProfilesConfig(updateUserProfilesConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateUserProfilesConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserProfilesConfigOptions model
				updateUserProfilesConfigOptionsModel := new(appidmanagementv4.UpdateUserProfilesConfigOptions)
				updateUserProfilesConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateUserProfilesConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateUserProfilesConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UpdateUserProfilesConfig(updateUserProfilesConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateUserProfilesConfigOptions model with no property values
				updateUserProfilesConfigOptionsModelNew := new(appidmanagementv4.UpdateUserProfilesConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UpdateUserProfilesConfig(updateUserProfilesConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetThemeText(getThemeTextOptions *GetThemeTextOptions) - Operation response error`, func() {
		getThemeTextPath := "/management/v4/testString/config/ui/theme_text"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getThemeTextPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetThemeText with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetThemeTextOptions model
				getThemeTextOptionsModel := new(appidmanagementv4.GetThemeTextOptions)
				getThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				getThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetThemeText(getThemeTextOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetThemeText(getThemeTextOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetThemeText(getThemeTextOptions *GetThemeTextOptions)`, func() {
		getThemeTextPath := "/management/v4/testString/config/ui/theme_text"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getThemeTextPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"footnote": "Footnote", "tabTitle": "TabTitle"}`)
				}))
			})
			It(`Invoke GetThemeText successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetThemeTextOptions model
				getThemeTextOptionsModel := new(appidmanagementv4.GetThemeTextOptions)
				getThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				getThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetThemeTextWithContext(ctx, getThemeTextOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetThemeText(getThemeTextOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetThemeTextWithContext(ctx, getThemeTextOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getThemeTextPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"footnote": "Footnote", "tabTitle": "TabTitle"}`)
				}))
			})
			It(`Invoke GetThemeText successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetThemeText(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetThemeTextOptions model
				getThemeTextOptionsModel := new(appidmanagementv4.GetThemeTextOptions)
				getThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				getThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetThemeText(getThemeTextOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetThemeText with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetThemeTextOptions model
				getThemeTextOptionsModel := new(appidmanagementv4.GetThemeTextOptions)
				getThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				getThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetThemeText(getThemeTextOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetThemeTextOptions model with no property values
				getThemeTextOptionsModelNew := new(appidmanagementv4.GetThemeTextOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetThemeText(getThemeTextOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetThemeText successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetThemeTextOptions model
				getThemeTextOptionsModel := new(appidmanagementv4.GetThemeTextOptions)
				getThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				getThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetThemeText(getThemeTextOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostThemeText(postThemeTextOptions *PostThemeTextOptions)`, func() {
		postThemeTextPath := "/management/v4/testString/config/ui/theme_text"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postThemeTextPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke PostThemeText successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.PostThemeText(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the PostThemeTextOptions model
				postThemeTextOptionsModel := new(appidmanagementv4.PostThemeTextOptions)
				postThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				postThemeTextOptionsModel.TabTitle = core.StringPtr("Login")
				postThemeTextOptionsModel.Footnote = core.StringPtr("Powered by App ID")
				postThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.PostThemeText(postThemeTextOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke PostThemeText with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostThemeTextOptions model
				postThemeTextOptionsModel := new(appidmanagementv4.PostThemeTextOptions)
				postThemeTextOptionsModel.TenantID = core.StringPtr("testString")
				postThemeTextOptionsModel.TabTitle = core.StringPtr("Login")
				postThemeTextOptionsModel.Footnote = core.StringPtr("Powered by App ID")
				postThemeTextOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.PostThemeText(postThemeTextOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the PostThemeTextOptions model with no property values
				postThemeTextOptionsModelNew := new(appidmanagementv4.PostThemeTextOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.PostThemeText(postThemeTextOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetThemeColor(getThemeColorOptions *GetThemeColorOptions) - Operation response error`, func() {
		getThemeColorPath := "/management/v4/testString/config/ui/theme_color"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getThemeColorPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetThemeColor with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetThemeColorOptions model
				getThemeColorOptionsModel := new(appidmanagementv4.GetThemeColorOptions)
				getThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				getThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetThemeColor(getThemeColorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetThemeColor(getThemeColorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetThemeColor(getThemeColorOptions *GetThemeColorOptions)`, func() {
		getThemeColorPath := "/management/v4/testString/config/ui/theme_color"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getThemeColorPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"headerColor": "HeaderColor"}`)
				}))
			})
			It(`Invoke GetThemeColor successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetThemeColorOptions model
				getThemeColorOptionsModel := new(appidmanagementv4.GetThemeColorOptions)
				getThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				getThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetThemeColorWithContext(ctx, getThemeColorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetThemeColor(getThemeColorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetThemeColorWithContext(ctx, getThemeColorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getThemeColorPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"headerColor": "HeaderColor"}`)
				}))
			})
			It(`Invoke GetThemeColor successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetThemeColor(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetThemeColorOptions model
				getThemeColorOptionsModel := new(appidmanagementv4.GetThemeColorOptions)
				getThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				getThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetThemeColor(getThemeColorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetThemeColor with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetThemeColorOptions model
				getThemeColorOptionsModel := new(appidmanagementv4.GetThemeColorOptions)
				getThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				getThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetThemeColor(getThemeColorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetThemeColorOptions model with no property values
				getThemeColorOptionsModelNew := new(appidmanagementv4.GetThemeColorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetThemeColor(getThemeColorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetThemeColor successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetThemeColorOptions model
				getThemeColorOptionsModel := new(appidmanagementv4.GetThemeColorOptions)
				getThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				getThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetThemeColor(getThemeColorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostThemeColor(postThemeColorOptions *PostThemeColorOptions)`, func() {
		postThemeColorPath := "/management/v4/testString/config/ui/theme_color"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postThemeColorPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke PostThemeColor successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.PostThemeColor(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the PostThemeColorOptions model
				postThemeColorOptionsModel := new(appidmanagementv4.PostThemeColorOptions)
				postThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				postThemeColorOptionsModel.HeaderColor = core.StringPtr("#EEF2F5")
				postThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.PostThemeColor(postThemeColorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke PostThemeColor with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostThemeColorOptions model
				postThemeColorOptionsModel := new(appidmanagementv4.PostThemeColorOptions)
				postThemeColorOptionsModel.TenantID = core.StringPtr("testString")
				postThemeColorOptionsModel.HeaderColor = core.StringPtr("#EEF2F5")
				postThemeColorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.PostThemeColor(postThemeColorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the PostThemeColorOptions model with no property values
				postThemeColorOptionsModelNew := new(appidmanagementv4.PostThemeColorOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.PostThemeColor(postThemeColorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMedia(getMediaOptions *GetMediaOptions) - Operation response error`, func() {
		getMediaPath := "/management/v4/testString/config/ui/media"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMediaPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMedia with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetMediaOptions model
				getMediaOptionsModel := new(appidmanagementv4.GetMediaOptions)
				getMediaOptionsModel.TenantID = core.StringPtr("testString")
				getMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetMedia(getMediaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetMedia(getMediaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMedia(getMediaOptions *GetMediaOptions)`, func() {
		getMediaPath := "/management/v4/testString/config/ui/media"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMediaPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"image": "Image"}`)
				}))
			})
			It(`Invoke GetMedia successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetMediaOptions model
				getMediaOptionsModel := new(appidmanagementv4.GetMediaOptions)
				getMediaOptionsModel.TenantID = core.StringPtr("testString")
				getMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetMediaWithContext(ctx, getMediaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetMedia(getMediaOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetMediaWithContext(ctx, getMediaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMediaPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"image": "Image"}`)
				}))
			})
			It(`Invoke GetMedia successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetMedia(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMediaOptions model
				getMediaOptionsModel := new(appidmanagementv4.GetMediaOptions)
				getMediaOptionsModel.TenantID = core.StringPtr("testString")
				getMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetMedia(getMediaOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMedia with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetMediaOptions model
				getMediaOptionsModel := new(appidmanagementv4.GetMediaOptions)
				getMediaOptionsModel.TenantID = core.StringPtr("testString")
				getMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetMedia(getMediaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetMediaOptions model with no property values
				getMediaOptionsModelNew := new(appidmanagementv4.GetMediaOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetMedia(getMediaOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetMedia successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetMediaOptions model
				getMediaOptionsModel := new(appidmanagementv4.GetMediaOptions)
				getMediaOptionsModel.TenantID = core.StringPtr("testString")
				getMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetMedia(getMediaOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostMedia(postMediaOptions *PostMediaOptions)`, func() {
		postMediaPath := "/management/v4/testString/config/ui/media"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postMediaPath))
					Expect(req.Method).To(Equal("POST"))

					Expect(req.URL.Query()["mediaType"]).To(Equal([]string{"logo"}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke PostMedia successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.PostMedia(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the PostMediaOptions model
				postMediaOptionsModel := new(appidmanagementv4.PostMediaOptions)
				postMediaOptionsModel.TenantID = core.StringPtr("testString")
				postMediaOptionsModel.MediaType = core.StringPtr("logo")
				postMediaOptionsModel.File = CreateMockReader("This is a mock file.")
				postMediaOptionsModel.FileContentType = core.StringPtr("testString")
				postMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.PostMedia(postMediaOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke PostMedia with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostMediaOptions model
				postMediaOptionsModel := new(appidmanagementv4.PostMediaOptions)
				postMediaOptionsModel.TenantID = core.StringPtr("testString")
				postMediaOptionsModel.MediaType = core.StringPtr("logo")
				postMediaOptionsModel.File = CreateMockReader("This is a mock file.")
				postMediaOptionsModel.FileContentType = core.StringPtr("testString")
				postMediaOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.PostMedia(postMediaOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the PostMediaOptions model with no property values
				postMediaOptionsModelNew := new(appidmanagementv4.PostMediaOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.PostMedia(postMediaOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSAMLMetadata(getSAMLMetadataOptions *GetSAMLMetadataOptions)`, func() {
		getSAMLMetadataPath := "/management/v4/testString/config/saml_metadata"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSAMLMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/xml")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"<SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol"><NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat><AssertionConsumerService index="1" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://us-south.appid.cloud.ibm.com/saml2/v1/login-acs"/></SPSSODescriptor>"`)
				}))
			})
			It(`Invoke GetSAMLMetadata successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetSAMLMetadataOptions model
				getSAMLMetadataOptionsModel := new(appidmanagementv4.GetSAMLMetadataOptions)
				getSAMLMetadataOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetSAMLMetadataWithContext(ctx, getSAMLMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetSAMLMetadata(getSAMLMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetSAMLMetadataWithContext(ctx, getSAMLMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSAMLMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/xml")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"<SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol"><NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat><AssertionConsumerService index="1" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://us-south.appid.cloud.ibm.com/saml2/v1/login-acs"/></SPSSODescriptor>"`)
				}))
			})
			It(`Invoke GetSAMLMetadata successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetSAMLMetadata(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSAMLMetadataOptions model
				getSAMLMetadataOptionsModel := new(appidmanagementv4.GetSAMLMetadataOptions)
				getSAMLMetadataOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetSAMLMetadata(getSAMLMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSAMLMetadata with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetSAMLMetadataOptions model
				getSAMLMetadataOptionsModel := new(appidmanagementv4.GetSAMLMetadataOptions)
				getSAMLMetadataOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetSAMLMetadata(getSAMLMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSAMLMetadataOptions model with no property values
				getSAMLMetadataOptionsModelNew := new(appidmanagementv4.GetSAMLMetadataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetSAMLMetadata(getSAMLMetadataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSAMLMetadata successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetSAMLMetadataOptions model
				getSAMLMetadataOptionsModel := new(appidmanagementv4.GetSAMLMetadataOptions)
				getSAMLMetadataOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetSAMLMetadata(getSAMLMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTemplate(getTemplateOptions *GetTemplateOptions) - Operation response error`, func() {
		getTemplatePath := "/management/v4/testString/config/cloud_directory/templates/USER_VERIFICATION/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplatePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTemplate with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetTemplateOptions model
				getTemplateOptionsModel := new(appidmanagementv4.GetTemplateOptions)
				getTemplateOptionsModel.TenantID = core.StringPtr("testString")
				getTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				getTemplateOptionsModel.Language = core.StringPtr("testString")
				getTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetTemplate(getTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetTemplate(getTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTemplate(getTemplateOptions *GetTemplateOptions)`, func() {
		getTemplatePath := "/management/v4/testString/config/cloud_directory/templates/USER_VERIFICATION/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplatePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"subject": "Subject", "html_body": "HTMLBody", "base64_encoded_html_body": "Base64EncodedHTMLBody", "plain_text_body": "PlainTextBody"}`)
				}))
			})
			It(`Invoke GetTemplate successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateOptions model
				getTemplateOptionsModel := new(appidmanagementv4.GetTemplateOptions)
				getTemplateOptionsModel.TenantID = core.StringPtr("testString")
				getTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				getTemplateOptionsModel.Language = core.StringPtr("testString")
				getTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetTemplateWithContext(ctx, getTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetTemplate(getTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetTemplateWithContext(ctx, getTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplatePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"subject": "Subject", "html_body": "HTMLBody", "base64_encoded_html_body": "Base64EncodedHTMLBody", "plain_text_body": "PlainTextBody"}`)
				}))
			})
			It(`Invoke GetTemplate successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateOptions model
				getTemplateOptionsModel := new(appidmanagementv4.GetTemplateOptions)
				getTemplateOptionsModel.TenantID = core.StringPtr("testString")
				getTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				getTemplateOptionsModel.Language = core.StringPtr("testString")
				getTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetTemplate(getTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplate with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetTemplateOptions model
				getTemplateOptionsModel := new(appidmanagementv4.GetTemplateOptions)
				getTemplateOptionsModel.TenantID = core.StringPtr("testString")
				getTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				getTemplateOptionsModel.Language = core.StringPtr("testString")
				getTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetTemplate(getTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateOptions model with no property values
				getTemplateOptionsModelNew := new(appidmanagementv4.GetTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetTemplate(getTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTemplate successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetTemplateOptions model
				getTemplateOptionsModel := new(appidmanagementv4.GetTemplateOptions)
				getTemplateOptionsModel.TenantID = core.StringPtr("testString")
				getTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				getTemplateOptionsModel.Language = core.StringPtr("testString")
				getTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetTemplate(getTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTemplate(updateTemplateOptions *UpdateTemplateOptions) - Operation response error`, func() {
		updateTemplatePath := "/management/v4/testString/config/cloud_directory/templates/USER_VERIFICATION/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTemplatePath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateTemplate with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateTemplateOptions model
				updateTemplateOptionsModel := new(appidmanagementv4.UpdateTemplateOptions)
				updateTemplateOptionsModel.TenantID = core.StringPtr("testString")
				updateTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				updateTemplateOptionsModel.Language = core.StringPtr("testString")
				updateTemplateOptionsModel.Subject = core.StringPtr("testString")
				updateTemplateOptionsModel.HTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Base64EncodedHTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.PlainTextBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateTemplate(updateTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateTemplate(updateTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateTemplate(updateTemplateOptions *UpdateTemplateOptions)`, func() {
		updateTemplatePath := "/management/v4/testString/config/cloud_directory/templates/USER_VERIFICATION/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTemplatePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"subject": "Subject", "html_body": "HTMLBody", "base64_encoded_html_body": "Base64EncodedHTMLBody", "plain_text_body": "PlainTextBody"}`)
				}))
			})
			It(`Invoke UpdateTemplate successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateTemplateOptions model
				updateTemplateOptionsModel := new(appidmanagementv4.UpdateTemplateOptions)
				updateTemplateOptionsModel.TenantID = core.StringPtr("testString")
				updateTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				updateTemplateOptionsModel.Language = core.StringPtr("testString")
				updateTemplateOptionsModel.Subject = core.StringPtr("testString")
				updateTemplateOptionsModel.HTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Base64EncodedHTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.PlainTextBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateTemplateWithContext(ctx, updateTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateTemplate(updateTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateTemplateWithContext(ctx, updateTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateTemplatePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"subject": "Subject", "html_body": "HTMLBody", "base64_encoded_html_body": "Base64EncodedHTMLBody", "plain_text_body": "PlainTextBody"}`)
				}))
			})
			It(`Invoke UpdateTemplate successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateTemplateOptions model
				updateTemplateOptionsModel := new(appidmanagementv4.UpdateTemplateOptions)
				updateTemplateOptionsModel.TenantID = core.StringPtr("testString")
				updateTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				updateTemplateOptionsModel.Language = core.StringPtr("testString")
				updateTemplateOptionsModel.Subject = core.StringPtr("testString")
				updateTemplateOptionsModel.HTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Base64EncodedHTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.PlainTextBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateTemplate(updateTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateTemplate with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateTemplateOptions model
				updateTemplateOptionsModel := new(appidmanagementv4.UpdateTemplateOptions)
				updateTemplateOptionsModel.TenantID = core.StringPtr("testString")
				updateTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				updateTemplateOptionsModel.Language = core.StringPtr("testString")
				updateTemplateOptionsModel.Subject = core.StringPtr("testString")
				updateTemplateOptionsModel.HTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Base64EncodedHTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.PlainTextBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateTemplate(updateTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateTemplateOptions model with no property values
				updateTemplateOptionsModelNew := new(appidmanagementv4.UpdateTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateTemplate(updateTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateTemplate successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateTemplateOptions model
				updateTemplateOptionsModel := new(appidmanagementv4.UpdateTemplateOptions)
				updateTemplateOptionsModel.TenantID = core.StringPtr("testString")
				updateTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				updateTemplateOptionsModel.Language = core.StringPtr("testString")
				updateTemplateOptionsModel.Subject = core.StringPtr("testString")
				updateTemplateOptionsModel.HTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Base64EncodedHTMLBody = core.StringPtr("testString")
				updateTemplateOptionsModel.PlainTextBody = core.StringPtr("testString")
				updateTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateTemplate(updateTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTemplate(deleteTemplateOptions *DeleteTemplateOptions)`, func() {
		deleteTemplatePath := "/management/v4/testString/config/cloud_directory/templates/USER_VERIFICATION/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTemplatePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTemplate successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.DeleteTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTemplateOptions model
				deleteTemplateOptionsModel := new(appidmanagementv4.DeleteTemplateOptions)
				deleteTemplateOptionsModel.TenantID = core.StringPtr("testString")
				deleteTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				deleteTemplateOptionsModel.Language = core.StringPtr("testString")
				deleteTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.DeleteTemplate(deleteTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTemplate with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the DeleteTemplateOptions model
				deleteTemplateOptionsModel := new(appidmanagementv4.DeleteTemplateOptions)
				deleteTemplateOptionsModel.TenantID = core.StringPtr("testString")
				deleteTemplateOptionsModel.TemplateName = core.StringPtr("USER_VERIFICATION")
				deleteTemplateOptionsModel.Language = core.StringPtr("testString")
				deleteTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.DeleteTemplate(deleteTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTemplateOptions model with no property values
				deleteTemplateOptionsModelNew := new(appidmanagementv4.DeleteTemplateOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.DeleteTemplate(deleteTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLocalization(getLocalizationOptions *GetLocalizationOptions) - Operation response error`, func() {
		getLocalizationPath := "/management/v4/testString/config/ui/languages"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLocalizationPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLocalization with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetLocalizationOptions model
				getLocalizationOptionsModel := new(appidmanagementv4.GetLocalizationOptions)
				getLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				getLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetLocalization(getLocalizationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetLocalization(getLocalizationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLocalization(getLocalizationOptions *GetLocalizationOptions)`, func() {
		getLocalizationPath := "/management/v4/testString/config/ui/languages"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLocalizationPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"languages": ["Languages"]}`)
				}))
			})
			It(`Invoke GetLocalization successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetLocalizationOptions model
				getLocalizationOptionsModel := new(appidmanagementv4.GetLocalizationOptions)
				getLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				getLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetLocalizationWithContext(ctx, getLocalizationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetLocalization(getLocalizationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetLocalizationWithContext(ctx, getLocalizationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLocalizationPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"languages": ["Languages"]}`)
				}))
			})
			It(`Invoke GetLocalization successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetLocalization(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLocalizationOptions model
				getLocalizationOptionsModel := new(appidmanagementv4.GetLocalizationOptions)
				getLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				getLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetLocalization(getLocalizationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLocalization with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetLocalizationOptions model
				getLocalizationOptionsModel := new(appidmanagementv4.GetLocalizationOptions)
				getLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				getLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetLocalization(getLocalizationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLocalizationOptions model with no property values
				getLocalizationOptionsModelNew := new(appidmanagementv4.GetLocalizationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetLocalization(getLocalizationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLocalization successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetLocalizationOptions model
				getLocalizationOptionsModel := new(appidmanagementv4.GetLocalizationOptions)
				getLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				getLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetLocalization(getLocalizationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLocalization(updateLocalizationOptions *UpdateLocalizationOptions)`, func() {
		updateLocalizationPath := "/management/v4/testString/config/ui/languages"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLocalizationPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UpdateLocalization successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UpdateLocalization(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateLocalizationOptions model
				updateLocalizationOptionsModel := new(appidmanagementv4.UpdateLocalizationOptions)
				updateLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				updateLocalizationOptionsModel.Languages = []string{"testString"}
				updateLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UpdateLocalization(updateLocalizationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateLocalization with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateLocalizationOptions model
				updateLocalizationOptionsModel := new(appidmanagementv4.UpdateLocalizationOptions)
				updateLocalizationOptionsModel.TenantID = core.StringPtr("testString")
				updateLocalizationOptionsModel.Languages = []string{"testString"}
				updateLocalizationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UpdateLocalization(updateLocalizationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateLocalizationOptions model with no property values
				updateLocalizationOptionsModelNew := new(appidmanagementv4.UpdateLocalizationOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UpdateLocalization(updateLocalizationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptions *GetCloudDirectorySenderDetailsOptions) - Operation response error`, func() {
		getCloudDirectorySenderDetailsPath := "/management/v4/testString/config/cloud_directory/sender_details"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectorySenderDetailsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCloudDirectorySenderDetails with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectorySenderDetailsOptions model
				getCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.GetCloudDirectorySenderDetailsOptions)
				getCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptions *GetCloudDirectorySenderDetailsOptions)`, func() {
		getCloudDirectorySenderDetailsPath := "/management/v4/testString/config/cloud_directory/sender_details"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectorySenderDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"senderDetails": {"from": {"name": "Name", "email": "Email"}, "reply_to": {"name": "Name", "email": "Email"}, "linkExpirationSec": 900}}`)
				}))
			})
			It(`Invoke GetCloudDirectorySenderDetails successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCloudDirectorySenderDetailsOptions model
				getCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.GetCloudDirectorySenderDetailsOptions)
				getCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCloudDirectorySenderDetailsWithContext(ctx, getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCloudDirectorySenderDetailsWithContext(ctx, getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectorySenderDetailsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"senderDetails": {"from": {"name": "Name", "email": "Email"}, "reply_to": {"name": "Name", "email": "Email"}, "linkExpirationSec": 900}}`)
				}))
			})
			It(`Invoke GetCloudDirectorySenderDetails successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCloudDirectorySenderDetails(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCloudDirectorySenderDetailsOptions model
				getCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.GetCloudDirectorySenderDetailsOptions)
				getCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCloudDirectorySenderDetails with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectorySenderDetailsOptions model
				getCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.GetCloudDirectorySenderDetailsOptions)
				getCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCloudDirectorySenderDetailsOptions model with no property values
				getCloudDirectorySenderDetailsOptionsModelNew := new(appidmanagementv4.GetCloudDirectorySenderDetailsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectorySenderDetails successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectorySenderDetailsOptions model
				getCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.GetCloudDirectorySenderDetailsOptions)
				getCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCloudDirectorySenderDetails(getCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectorySenderDetails(setCloudDirectorySenderDetailsOptions *SetCloudDirectorySenderDetailsOptions)`, func() {
		setCloudDirectorySenderDetailsPath := "/management/v4/testString/config/cloud_directory/sender_details"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectorySenderDetailsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke SetCloudDirectorySenderDetails successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.SetCloudDirectorySenderDetails(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetailsFrom model
				cloudDirectorySenderDetailsSenderDetailsFromModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsFrom)
				cloudDirectorySenderDetailsSenderDetailsFromModel.Name = core.StringPtr("testString")
				cloudDirectorySenderDetailsSenderDetailsFromModel.Email = core.StringPtr("testString")

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetailsReplyTo model
				cloudDirectorySenderDetailsSenderDetailsReplyToModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsReplyTo)
				cloudDirectorySenderDetailsSenderDetailsReplyToModel.Name = core.StringPtr("testString")
				cloudDirectorySenderDetailsSenderDetailsReplyToModel.Email = core.StringPtr("testString")

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetails model
				cloudDirectorySenderDetailsSenderDetailsModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetails)
				cloudDirectorySenderDetailsSenderDetailsModel.From = cloudDirectorySenderDetailsSenderDetailsFromModel
				cloudDirectorySenderDetailsSenderDetailsModel.ReplyTo = cloudDirectorySenderDetailsSenderDetailsReplyToModel
				cloudDirectorySenderDetailsSenderDetailsModel.LinkExpirationSec = core.Int64Ptr(int64(900))

				// Construct an instance of the SetCloudDirectorySenderDetailsOptions model
				setCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.SetCloudDirectorySenderDetailsOptions)
				setCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectorySenderDetailsOptionsModel.SenderDetails = cloudDirectorySenderDetailsSenderDetailsModel
				setCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.SetCloudDirectorySenderDetails(setCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke SetCloudDirectorySenderDetails with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetailsFrom model
				cloudDirectorySenderDetailsSenderDetailsFromModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsFrom)
				cloudDirectorySenderDetailsSenderDetailsFromModel.Name = core.StringPtr("testString")
				cloudDirectorySenderDetailsSenderDetailsFromModel.Email = core.StringPtr("testString")

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetailsReplyTo model
				cloudDirectorySenderDetailsSenderDetailsReplyToModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsReplyTo)
				cloudDirectorySenderDetailsSenderDetailsReplyToModel.Name = core.StringPtr("testString")
				cloudDirectorySenderDetailsSenderDetailsReplyToModel.Email = core.StringPtr("testString")

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetails model
				cloudDirectorySenderDetailsSenderDetailsModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetails)
				cloudDirectorySenderDetailsSenderDetailsModel.From = cloudDirectorySenderDetailsSenderDetailsFromModel
				cloudDirectorySenderDetailsSenderDetailsModel.ReplyTo = cloudDirectorySenderDetailsSenderDetailsReplyToModel
				cloudDirectorySenderDetailsSenderDetailsModel.LinkExpirationSec = core.Int64Ptr(int64(900))

				// Construct an instance of the SetCloudDirectorySenderDetailsOptions model
				setCloudDirectorySenderDetailsOptionsModel := new(appidmanagementv4.SetCloudDirectorySenderDetailsOptions)
				setCloudDirectorySenderDetailsOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectorySenderDetailsOptionsModel.SenderDetails = cloudDirectorySenderDetailsSenderDetailsModel
				setCloudDirectorySenderDetailsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.SetCloudDirectorySenderDetails(setCloudDirectorySenderDetailsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the SetCloudDirectorySenderDetailsOptions model with no property values
				setCloudDirectorySenderDetailsOptionsModelNew := new(appidmanagementv4.SetCloudDirectorySenderDetailsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.SetCloudDirectorySenderDetails(setCloudDirectorySenderDetailsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptions *GetCloudDirectoryActionURLOptions) - Operation response error`, func() {
		getCloudDirectoryActionURLPath := "/management/v4/testString/config/cloud_directory/action_url/on_user_verified"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryActionURLPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCloudDirectoryActionURL with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryActionURLOptions model
				getCloudDirectoryActionURLOptionsModel := new(appidmanagementv4.GetCloudDirectoryActionURLOptions)
				getCloudDirectoryActionURLOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				getCloudDirectoryActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptions *GetCloudDirectoryActionURLOptions)`, func() {
		getCloudDirectoryActionURLPath := "/management/v4/testString/config/cloud_directory/action_url/on_user_verified"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryActionURLPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actionUrl": "ActionURL"}`)
				}))
			})
			It(`Invoke GetCloudDirectoryActionURL successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCloudDirectoryActionURLOptions model
				getCloudDirectoryActionURLOptionsModel := new(appidmanagementv4.GetCloudDirectoryActionURLOptions)
				getCloudDirectoryActionURLOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				getCloudDirectoryActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCloudDirectoryActionURLWithContext(ctx, getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCloudDirectoryActionURLWithContext(ctx, getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryActionURLPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actionUrl": "ActionURL"}`)
				}))
			})
			It(`Invoke GetCloudDirectoryActionURL successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCloudDirectoryActionURL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCloudDirectoryActionURLOptions model
				getCloudDirectoryActionURLOptionsModel := new(appidmanagementv4.GetCloudDirectoryActionURLOptions)
				getCloudDirectoryActionURLOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				getCloudDirectoryActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCloudDirectoryActionURL with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryActionURLOptions model
				getCloudDirectoryActionURLOptionsModel := new(appidmanagementv4.GetCloudDirectoryActionURLOptions)
				getCloudDirectoryActionURLOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				getCloudDirectoryActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCloudDirectoryActionURLOptions model with no property values
				getCloudDirectoryActionURLOptionsModelNew := new(appidmanagementv4.GetCloudDirectoryActionURLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectoryActionURL successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryActionURLOptions model
				getCloudDirectoryActionURLOptionsModel := new(appidmanagementv4.GetCloudDirectoryActionURLOptions)
				getCloudDirectoryActionURLOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				getCloudDirectoryActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCloudDirectoryActionURL(getCloudDirectoryActionURLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryAction(setCloudDirectoryActionOptions *SetCloudDirectoryActionOptions) - Operation response error`, func() {
		setCloudDirectoryActionPath := "/management/v4/testString/config/cloud_directory/action_url/on_user_verified"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryActionPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetCloudDirectoryAction with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetCloudDirectoryActionOptions model
				setCloudDirectoryActionOptionsModel := new(appidmanagementv4.SetCloudDirectoryActionOptions)
				setCloudDirectoryActionOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Action = core.StringPtr("on_user_verified")
				setCloudDirectoryActionOptionsModel.ActionURL = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryAction(setCloudDirectoryActionOptions *SetCloudDirectoryActionOptions)`, func() {
		setCloudDirectoryActionPath := "/management/v4/testString/config/cloud_directory/action_url/on_user_verified"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actionUrl": "ActionURL"}`)
				}))
			})
			It(`Invoke SetCloudDirectoryAction successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the SetCloudDirectoryActionOptions model
				setCloudDirectoryActionOptionsModel := new(appidmanagementv4.SetCloudDirectoryActionOptions)
				setCloudDirectoryActionOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Action = core.StringPtr("on_user_verified")
				setCloudDirectoryActionOptionsModel.ActionURL = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetCloudDirectoryActionWithContext(ctx, setCloudDirectoryActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetCloudDirectoryActionWithContext(ctx, setCloudDirectoryActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actionUrl": "ActionURL"}`)
				}))
			})
			It(`Invoke SetCloudDirectoryAction successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SetCloudDirectoryActionOptions model
				setCloudDirectoryActionOptionsModel := new(appidmanagementv4.SetCloudDirectoryActionOptions)
				setCloudDirectoryActionOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Action = core.StringPtr("on_user_verified")
				setCloudDirectoryActionOptionsModel.ActionURL = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetCloudDirectoryAction with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetCloudDirectoryActionOptions model
				setCloudDirectoryActionOptionsModel := new(appidmanagementv4.SetCloudDirectoryActionOptions)
				setCloudDirectoryActionOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Action = core.StringPtr("on_user_verified")
				setCloudDirectoryActionOptionsModel.ActionURL = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetCloudDirectoryActionOptions model with no property values
				setCloudDirectoryActionOptionsModelNew := new(appidmanagementv4.SetCloudDirectoryActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetCloudDirectoryAction successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetCloudDirectoryActionOptions model
				setCloudDirectoryActionOptionsModel := new(appidmanagementv4.SetCloudDirectoryActionOptions)
				setCloudDirectoryActionOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Action = core.StringPtr("on_user_verified")
				setCloudDirectoryActionOptionsModel.ActionURL = core.StringPtr("testString")
				setCloudDirectoryActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAction(setCloudDirectoryActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteActionURL(deleteActionURLOptions *DeleteActionURLOptions)`, func() {
		deleteActionURLPath := "/management/v4/testString/config/cloud_directory/action_url/on_user_verified"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteActionURLPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteActionURL successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.DeleteActionURL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteActionURLOptions model
				deleteActionURLOptionsModel := new(appidmanagementv4.DeleteActionURLOptions)
				deleteActionURLOptionsModel.TenantID = core.StringPtr("testString")
				deleteActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				deleteActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.DeleteActionURL(deleteActionURLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteActionURL with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the DeleteActionURLOptions model
				deleteActionURLOptionsModel := new(appidmanagementv4.DeleteActionURLOptions)
				deleteActionURLOptionsModel.TenantID = core.StringPtr("testString")
				deleteActionURLOptionsModel.Action = core.StringPtr("on_user_verified")
				deleteActionURLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.DeleteActionURL(deleteActionURLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteActionURLOptions model with no property values
				deleteActionURLOptionsModelNew := new(appidmanagementv4.DeleteActionURLOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.DeleteActionURL(deleteActionURLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptions *GetCloudDirectoryPasswordRegexOptions) - Operation response error`, func() {
		getCloudDirectoryPasswordRegexPath := "/management/v4/testString/config/cloud_directory/password_regex"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryPasswordRegexPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCloudDirectoryPasswordRegex with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryPasswordRegexOptions model
				getCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.GetCloudDirectoryPasswordRegexOptions)
				getCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptions *GetCloudDirectoryPasswordRegexOptions)`, func() {
		getCloudDirectoryPasswordRegexPath := "/management/v4/testString/config/cloud_directory/password_regex"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryPasswordRegexPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regex": "Regex", "base64_encoded_regex": "Base64EncodedRegex", "error_message": "ErrorMessage"}`)
				}))
			})
			It(`Invoke GetCloudDirectoryPasswordRegex successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCloudDirectoryPasswordRegexOptions model
				getCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.GetCloudDirectoryPasswordRegexOptions)
				getCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCloudDirectoryPasswordRegexWithContext(ctx, getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCloudDirectoryPasswordRegexWithContext(ctx, getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryPasswordRegexPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regex": "Regex", "base64_encoded_regex": "Base64EncodedRegex", "error_message": "ErrorMessage"}`)
				}))
			})
			It(`Invoke GetCloudDirectoryPasswordRegex successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCloudDirectoryPasswordRegex(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCloudDirectoryPasswordRegexOptions model
				getCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.GetCloudDirectoryPasswordRegexOptions)
				getCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCloudDirectoryPasswordRegex with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryPasswordRegexOptions model
				getCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.GetCloudDirectoryPasswordRegexOptions)
				getCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCloudDirectoryPasswordRegexOptions model with no property values
				getCloudDirectoryPasswordRegexOptionsModelNew := new(appidmanagementv4.GetCloudDirectoryPasswordRegexOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectoryPasswordRegex successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryPasswordRegexOptions model
				getCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.GetCloudDirectoryPasswordRegexOptions)
				getCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCloudDirectoryPasswordRegex(getCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptions *SetCloudDirectoryPasswordRegexOptions) - Operation response error`, func() {
		setCloudDirectoryPasswordRegexPath := "/management/v4/testString/config/cloud_directory/password_regex"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryPasswordRegexPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetCloudDirectoryPasswordRegex with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetCloudDirectoryPasswordRegexOptions model
				setCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.SetCloudDirectoryPasswordRegexOptions)
				setCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Regex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Base64EncodedRegex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.ErrorMessage = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptions *SetCloudDirectoryPasswordRegexOptions)`, func() {
		setCloudDirectoryPasswordRegexPath := "/management/v4/testString/config/cloud_directory/password_regex"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryPasswordRegexPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regex": "Regex", "base64_encoded_regex": "Base64EncodedRegex", "error_message": "ErrorMessage"}`)
				}))
			})
			It(`Invoke SetCloudDirectoryPasswordRegex successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the SetCloudDirectoryPasswordRegexOptions model
				setCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.SetCloudDirectoryPasswordRegexOptions)
				setCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Regex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Base64EncodedRegex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.ErrorMessage = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetCloudDirectoryPasswordRegexWithContext(ctx, setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetCloudDirectoryPasswordRegexWithContext(ctx, setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryPasswordRegexPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regex": "Regex", "base64_encoded_regex": "Base64EncodedRegex", "error_message": "ErrorMessage"}`)
				}))
			})
			It(`Invoke SetCloudDirectoryPasswordRegex successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetCloudDirectoryPasswordRegex(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SetCloudDirectoryPasswordRegexOptions model
				setCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.SetCloudDirectoryPasswordRegexOptions)
				setCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Regex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Base64EncodedRegex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.ErrorMessage = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetCloudDirectoryPasswordRegex with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetCloudDirectoryPasswordRegexOptions model
				setCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.SetCloudDirectoryPasswordRegexOptions)
				setCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Regex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Base64EncodedRegex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.ErrorMessage = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetCloudDirectoryPasswordRegexOptions model with no property values
				setCloudDirectoryPasswordRegexOptionsModelNew := new(appidmanagementv4.SetCloudDirectoryPasswordRegexOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetCloudDirectoryPasswordRegex successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetCloudDirectoryPasswordRegexOptions model
				setCloudDirectoryPasswordRegexOptionsModel := new(appidmanagementv4.SetCloudDirectoryPasswordRegexOptions)
				setCloudDirectoryPasswordRegexOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Regex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Base64EncodedRegex = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.ErrorMessage = core.StringPtr("testString")
				setCloudDirectoryPasswordRegexOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetCloudDirectoryPasswordRegex(setCloudDirectoryPasswordRegexOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptions *GetCloudDirectoryEmailDispatcherOptions) - Operation response error`, func() {
		getCloudDirectoryEmailDispatcherPath := "/management/v4/testString/config/cloud_directory/email_dispatcher"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryEmailDispatcherPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCloudDirectoryEmailDispatcher with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryEmailDispatcherOptions model
				getCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.GetCloudDirectoryEmailDispatcherOptions)
				getCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptions *GetCloudDirectoryEmailDispatcherOptions)`, func() {
		getCloudDirectoryEmailDispatcherPath := "/management/v4/testString/config/cloud_directory/email_dispatcher"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryEmailDispatcherPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider": "sendgrid", "sendgrid": {"apiKey": "APIKey"}, "custom": {"url": "URL", "authorization": {"type": "value", "value": "Value", "username": "Username", "password": "Password"}}}`)
				}))
			})
			It(`Invoke GetCloudDirectoryEmailDispatcher successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCloudDirectoryEmailDispatcherOptions model
				getCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.GetCloudDirectoryEmailDispatcherOptions)
				getCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCloudDirectoryEmailDispatcherWithContext(ctx, getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCloudDirectoryEmailDispatcherWithContext(ctx, getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryEmailDispatcherPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider": "sendgrid", "sendgrid": {"apiKey": "APIKey"}, "custom": {"url": "URL", "authorization": {"type": "value", "value": "Value", "username": "Username", "password": "Password"}}}`)
				}))
			})
			It(`Invoke GetCloudDirectoryEmailDispatcher successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCloudDirectoryEmailDispatcher(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCloudDirectoryEmailDispatcherOptions model
				getCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.GetCloudDirectoryEmailDispatcherOptions)
				getCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCloudDirectoryEmailDispatcher with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryEmailDispatcherOptions model
				getCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.GetCloudDirectoryEmailDispatcherOptions)
				getCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCloudDirectoryEmailDispatcherOptions model with no property values
				getCloudDirectoryEmailDispatcherOptionsModelNew := new(appidmanagementv4.GetCloudDirectoryEmailDispatcherOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectoryEmailDispatcher successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryEmailDispatcherOptions model
				getCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.GetCloudDirectoryEmailDispatcherOptions)
				getCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCloudDirectoryEmailDispatcher(getCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptions *SetCloudDirectoryEmailDispatcherOptions) - Operation response error`, func() {
		setCloudDirectoryEmailDispatcherPath := "/management/v4/testString/config/cloud_directory/email_dispatcher"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryEmailDispatcherPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetCloudDirectoryEmailDispatcher with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the EmailDispatcherParamsSendgrid model
				emailDispatcherParamsSendgridModel := new(appidmanagementv4.EmailDispatcherParamsSendgrid)
				emailDispatcherParamsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustomAuthorization model
				emailDispatcherParamsCustomAuthorizationModel := new(appidmanagementv4.EmailDispatcherParamsCustomAuthorization)
				emailDispatcherParamsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailDispatcherParamsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustom model
				emailDispatcherParamsCustomModel := new(appidmanagementv4.EmailDispatcherParamsCustom)
				emailDispatcherParamsCustomModel.URL = core.StringPtr("testString")
				emailDispatcherParamsCustomModel.Authorization = emailDispatcherParamsCustomAuthorizationModel

				// Construct an instance of the SetCloudDirectoryEmailDispatcherOptions model
				setCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.SetCloudDirectoryEmailDispatcherOptions)
				setCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryEmailDispatcherOptionsModel.Provider = core.StringPtr("sendgrid")
				setCloudDirectoryEmailDispatcherOptionsModel.Sendgrid = emailDispatcherParamsSendgridModel
				setCloudDirectoryEmailDispatcherOptionsModel.Custom = emailDispatcherParamsCustomModel
				setCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptions *SetCloudDirectoryEmailDispatcherOptions)`, func() {
		setCloudDirectoryEmailDispatcherPath := "/management/v4/testString/config/cloud_directory/email_dispatcher"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryEmailDispatcherPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider": "sendgrid", "sendgrid": {"apiKey": "APIKey"}, "custom": {"url": "URL", "authorization": {"type": "value", "value": "Value", "username": "Username", "password": "Password"}}}`)
				}))
			})
			It(`Invoke SetCloudDirectoryEmailDispatcher successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the EmailDispatcherParamsSendgrid model
				emailDispatcherParamsSendgridModel := new(appidmanagementv4.EmailDispatcherParamsSendgrid)
				emailDispatcherParamsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustomAuthorization model
				emailDispatcherParamsCustomAuthorizationModel := new(appidmanagementv4.EmailDispatcherParamsCustomAuthorization)
				emailDispatcherParamsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailDispatcherParamsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustom model
				emailDispatcherParamsCustomModel := new(appidmanagementv4.EmailDispatcherParamsCustom)
				emailDispatcherParamsCustomModel.URL = core.StringPtr("testString")
				emailDispatcherParamsCustomModel.Authorization = emailDispatcherParamsCustomAuthorizationModel

				// Construct an instance of the SetCloudDirectoryEmailDispatcherOptions model
				setCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.SetCloudDirectoryEmailDispatcherOptions)
				setCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryEmailDispatcherOptionsModel.Provider = core.StringPtr("sendgrid")
				setCloudDirectoryEmailDispatcherOptionsModel.Sendgrid = emailDispatcherParamsSendgridModel
				setCloudDirectoryEmailDispatcherOptionsModel.Custom = emailDispatcherParamsCustomModel
				setCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetCloudDirectoryEmailDispatcherWithContext(ctx, setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetCloudDirectoryEmailDispatcherWithContext(ctx, setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryEmailDispatcherPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider": "sendgrid", "sendgrid": {"apiKey": "APIKey"}, "custom": {"url": "URL", "authorization": {"type": "value", "value": "Value", "username": "Username", "password": "Password"}}}`)
				}))
			})
			It(`Invoke SetCloudDirectoryEmailDispatcher successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetCloudDirectoryEmailDispatcher(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EmailDispatcherParamsSendgrid model
				emailDispatcherParamsSendgridModel := new(appidmanagementv4.EmailDispatcherParamsSendgrid)
				emailDispatcherParamsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustomAuthorization model
				emailDispatcherParamsCustomAuthorizationModel := new(appidmanagementv4.EmailDispatcherParamsCustomAuthorization)
				emailDispatcherParamsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailDispatcherParamsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustom model
				emailDispatcherParamsCustomModel := new(appidmanagementv4.EmailDispatcherParamsCustom)
				emailDispatcherParamsCustomModel.URL = core.StringPtr("testString")
				emailDispatcherParamsCustomModel.Authorization = emailDispatcherParamsCustomAuthorizationModel

				// Construct an instance of the SetCloudDirectoryEmailDispatcherOptions model
				setCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.SetCloudDirectoryEmailDispatcherOptions)
				setCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryEmailDispatcherOptionsModel.Provider = core.StringPtr("sendgrid")
				setCloudDirectoryEmailDispatcherOptionsModel.Sendgrid = emailDispatcherParamsSendgridModel
				setCloudDirectoryEmailDispatcherOptionsModel.Custom = emailDispatcherParamsCustomModel
				setCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetCloudDirectoryEmailDispatcher with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the EmailDispatcherParamsSendgrid model
				emailDispatcherParamsSendgridModel := new(appidmanagementv4.EmailDispatcherParamsSendgrid)
				emailDispatcherParamsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustomAuthorization model
				emailDispatcherParamsCustomAuthorizationModel := new(appidmanagementv4.EmailDispatcherParamsCustomAuthorization)
				emailDispatcherParamsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailDispatcherParamsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustom model
				emailDispatcherParamsCustomModel := new(appidmanagementv4.EmailDispatcherParamsCustom)
				emailDispatcherParamsCustomModel.URL = core.StringPtr("testString")
				emailDispatcherParamsCustomModel.Authorization = emailDispatcherParamsCustomAuthorizationModel

				// Construct an instance of the SetCloudDirectoryEmailDispatcherOptions model
				setCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.SetCloudDirectoryEmailDispatcherOptions)
				setCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryEmailDispatcherOptionsModel.Provider = core.StringPtr("sendgrid")
				setCloudDirectoryEmailDispatcherOptionsModel.Sendgrid = emailDispatcherParamsSendgridModel
				setCloudDirectoryEmailDispatcherOptionsModel.Custom = emailDispatcherParamsCustomModel
				setCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetCloudDirectoryEmailDispatcherOptions model with no property values
				setCloudDirectoryEmailDispatcherOptionsModelNew := new(appidmanagementv4.SetCloudDirectoryEmailDispatcherOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetCloudDirectoryEmailDispatcher successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the EmailDispatcherParamsSendgrid model
				emailDispatcherParamsSendgridModel := new(appidmanagementv4.EmailDispatcherParamsSendgrid)
				emailDispatcherParamsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustomAuthorization model
				emailDispatcherParamsCustomAuthorizationModel := new(appidmanagementv4.EmailDispatcherParamsCustomAuthorization)
				emailDispatcherParamsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailDispatcherParamsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailDispatcherParamsCustom model
				emailDispatcherParamsCustomModel := new(appidmanagementv4.EmailDispatcherParamsCustom)
				emailDispatcherParamsCustomModel.URL = core.StringPtr("testString")
				emailDispatcherParamsCustomModel.Authorization = emailDispatcherParamsCustomAuthorizationModel

				// Construct an instance of the SetCloudDirectoryEmailDispatcherOptions model
				setCloudDirectoryEmailDispatcherOptionsModel := new(appidmanagementv4.SetCloudDirectoryEmailDispatcherOptions)
				setCloudDirectoryEmailDispatcherOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryEmailDispatcherOptionsModel.Provider = core.StringPtr("sendgrid")
				setCloudDirectoryEmailDispatcherOptionsModel.Sendgrid = emailDispatcherParamsSendgridModel
				setCloudDirectoryEmailDispatcherOptionsModel.Custom = emailDispatcherParamsCustomModel
				setCloudDirectoryEmailDispatcherOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetCloudDirectoryEmailDispatcher(setCloudDirectoryEmailDispatcherOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`EmailSettingTest(emailSettingTestOptions *EmailSettingTestOptions) - Operation response error`, func() {
		emailSettingTestPath := "/management/v4/testString/config/cloud_directory/email_settings/test"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(emailSettingTestPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke EmailSettingTest with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsSendgrid model
				emailSettingsTestParamsEmailSettingsSendgridModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsSendgrid)
				emailSettingsTestParamsEmailSettingsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustomAuthorization model
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization)
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustom model
				emailSettingsTestParamsEmailSettingsCustomModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustom)
				emailSettingsTestParamsEmailSettingsCustomModel.URL = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomModel.Authorization = emailSettingsTestParamsEmailSettingsCustomAuthorizationModel

				// Construct an instance of the EmailSettingsTestParamsEmailSettings model
				emailSettingsTestParamsEmailSettingsModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettings)
				emailSettingsTestParamsEmailSettingsModel.Provider = core.StringPtr("sendgrid")
				emailSettingsTestParamsEmailSettingsModel.Sendgrid = emailSettingsTestParamsEmailSettingsSendgridModel
				emailSettingsTestParamsEmailSettingsModel.Custom = emailSettingsTestParamsEmailSettingsCustomModel

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsFrom model
				emailSettingsTestParamsSenderDetailsFromModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom)
				emailSettingsTestParamsSenderDetailsFromModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsFromModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsReplyTo model
				emailSettingsTestParamsSenderDetailsReplyToModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsReplyTo)
				emailSettingsTestParamsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsReplyToModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetails model
				emailSettingsTestParamsSenderDetailsModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetails)
				emailSettingsTestParamsSenderDetailsModel.From = emailSettingsTestParamsSenderDetailsFromModel
				emailSettingsTestParamsSenderDetailsModel.ReplyTo = emailSettingsTestParamsSenderDetailsReplyToModel

				// Construct an instance of the EmailSettingTestOptions model
				emailSettingTestOptionsModel := new(appidmanagementv4.EmailSettingTestOptions)
				emailSettingTestOptionsModel.TenantID = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailTo = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailSettings = emailSettingsTestParamsEmailSettingsModel
				emailSettingTestOptionsModel.SenderDetails = emailSettingsTestParamsSenderDetailsModel
				emailSettingTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.EmailSettingTest(emailSettingTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.EmailSettingTest(emailSettingTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`EmailSettingTest(emailSettingTestOptions *EmailSettingTestOptions)`, func() {
		emailSettingTestPath := "/management/v4/testString/config/cloud_directory/email_settings/test"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(emailSettingTestPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"success": false, "dispatcherStatusCode": 20, "dispatcherResponse": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke EmailSettingTest successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsSendgrid model
				emailSettingsTestParamsEmailSettingsSendgridModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsSendgrid)
				emailSettingsTestParamsEmailSettingsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustomAuthorization model
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization)
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustom model
				emailSettingsTestParamsEmailSettingsCustomModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustom)
				emailSettingsTestParamsEmailSettingsCustomModel.URL = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomModel.Authorization = emailSettingsTestParamsEmailSettingsCustomAuthorizationModel

				// Construct an instance of the EmailSettingsTestParamsEmailSettings model
				emailSettingsTestParamsEmailSettingsModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettings)
				emailSettingsTestParamsEmailSettingsModel.Provider = core.StringPtr("sendgrid")
				emailSettingsTestParamsEmailSettingsModel.Sendgrid = emailSettingsTestParamsEmailSettingsSendgridModel
				emailSettingsTestParamsEmailSettingsModel.Custom = emailSettingsTestParamsEmailSettingsCustomModel

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsFrom model
				emailSettingsTestParamsSenderDetailsFromModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom)
				emailSettingsTestParamsSenderDetailsFromModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsFromModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsReplyTo model
				emailSettingsTestParamsSenderDetailsReplyToModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsReplyTo)
				emailSettingsTestParamsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsReplyToModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetails model
				emailSettingsTestParamsSenderDetailsModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetails)
				emailSettingsTestParamsSenderDetailsModel.From = emailSettingsTestParamsSenderDetailsFromModel
				emailSettingsTestParamsSenderDetailsModel.ReplyTo = emailSettingsTestParamsSenderDetailsReplyToModel

				// Construct an instance of the EmailSettingTestOptions model
				emailSettingTestOptionsModel := new(appidmanagementv4.EmailSettingTestOptions)
				emailSettingTestOptionsModel.TenantID = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailTo = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailSettings = emailSettingsTestParamsEmailSettingsModel
				emailSettingTestOptionsModel.SenderDetails = emailSettingsTestParamsSenderDetailsModel
				emailSettingTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.EmailSettingTestWithContext(ctx, emailSettingTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.EmailSettingTest(emailSettingTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.EmailSettingTestWithContext(ctx, emailSettingTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(emailSettingTestPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"success": false, "dispatcherStatusCode": 20, "dispatcherResponse": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke EmailSettingTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.EmailSettingTest(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsSendgrid model
				emailSettingsTestParamsEmailSettingsSendgridModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsSendgrid)
				emailSettingsTestParamsEmailSettingsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustomAuthorization model
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization)
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustom model
				emailSettingsTestParamsEmailSettingsCustomModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustom)
				emailSettingsTestParamsEmailSettingsCustomModel.URL = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomModel.Authorization = emailSettingsTestParamsEmailSettingsCustomAuthorizationModel

				// Construct an instance of the EmailSettingsTestParamsEmailSettings model
				emailSettingsTestParamsEmailSettingsModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettings)
				emailSettingsTestParamsEmailSettingsModel.Provider = core.StringPtr("sendgrid")
				emailSettingsTestParamsEmailSettingsModel.Sendgrid = emailSettingsTestParamsEmailSettingsSendgridModel
				emailSettingsTestParamsEmailSettingsModel.Custom = emailSettingsTestParamsEmailSettingsCustomModel

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsFrom model
				emailSettingsTestParamsSenderDetailsFromModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom)
				emailSettingsTestParamsSenderDetailsFromModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsFromModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsReplyTo model
				emailSettingsTestParamsSenderDetailsReplyToModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsReplyTo)
				emailSettingsTestParamsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsReplyToModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetails model
				emailSettingsTestParamsSenderDetailsModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetails)
				emailSettingsTestParamsSenderDetailsModel.From = emailSettingsTestParamsSenderDetailsFromModel
				emailSettingsTestParamsSenderDetailsModel.ReplyTo = emailSettingsTestParamsSenderDetailsReplyToModel

				// Construct an instance of the EmailSettingTestOptions model
				emailSettingTestOptionsModel := new(appidmanagementv4.EmailSettingTestOptions)
				emailSettingTestOptionsModel.TenantID = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailTo = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailSettings = emailSettingsTestParamsEmailSettingsModel
				emailSettingTestOptionsModel.SenderDetails = emailSettingsTestParamsSenderDetailsModel
				emailSettingTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.EmailSettingTest(emailSettingTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke EmailSettingTest with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsSendgrid model
				emailSettingsTestParamsEmailSettingsSendgridModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsSendgrid)
				emailSettingsTestParamsEmailSettingsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustomAuthorization model
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization)
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustom model
				emailSettingsTestParamsEmailSettingsCustomModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustom)
				emailSettingsTestParamsEmailSettingsCustomModel.URL = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomModel.Authorization = emailSettingsTestParamsEmailSettingsCustomAuthorizationModel

				// Construct an instance of the EmailSettingsTestParamsEmailSettings model
				emailSettingsTestParamsEmailSettingsModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettings)
				emailSettingsTestParamsEmailSettingsModel.Provider = core.StringPtr("sendgrid")
				emailSettingsTestParamsEmailSettingsModel.Sendgrid = emailSettingsTestParamsEmailSettingsSendgridModel
				emailSettingsTestParamsEmailSettingsModel.Custom = emailSettingsTestParamsEmailSettingsCustomModel

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsFrom model
				emailSettingsTestParamsSenderDetailsFromModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom)
				emailSettingsTestParamsSenderDetailsFromModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsFromModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsReplyTo model
				emailSettingsTestParamsSenderDetailsReplyToModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsReplyTo)
				emailSettingsTestParamsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsReplyToModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetails model
				emailSettingsTestParamsSenderDetailsModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetails)
				emailSettingsTestParamsSenderDetailsModel.From = emailSettingsTestParamsSenderDetailsFromModel
				emailSettingsTestParamsSenderDetailsModel.ReplyTo = emailSettingsTestParamsSenderDetailsReplyToModel

				// Construct an instance of the EmailSettingTestOptions model
				emailSettingTestOptionsModel := new(appidmanagementv4.EmailSettingTestOptions)
				emailSettingTestOptionsModel.TenantID = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailTo = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailSettings = emailSettingsTestParamsEmailSettingsModel
				emailSettingTestOptionsModel.SenderDetails = emailSettingsTestParamsSenderDetailsModel
				emailSettingTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.EmailSettingTest(emailSettingTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the EmailSettingTestOptions model with no property values
				emailSettingTestOptionsModelNew := new(appidmanagementv4.EmailSettingTestOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.EmailSettingTest(emailSettingTestOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke EmailSettingTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsSendgrid model
				emailSettingsTestParamsEmailSettingsSendgridModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsSendgrid)
				emailSettingsTestParamsEmailSettingsSendgridModel.APIKey = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustomAuthorization model
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization)
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustom model
				emailSettingsTestParamsEmailSettingsCustomModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustom)
				emailSettingsTestParamsEmailSettingsCustomModel.URL = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomModel.Authorization = emailSettingsTestParamsEmailSettingsCustomAuthorizationModel

				// Construct an instance of the EmailSettingsTestParamsEmailSettings model
				emailSettingsTestParamsEmailSettingsModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettings)
				emailSettingsTestParamsEmailSettingsModel.Provider = core.StringPtr("sendgrid")
				emailSettingsTestParamsEmailSettingsModel.Sendgrid = emailSettingsTestParamsEmailSettingsSendgridModel
				emailSettingsTestParamsEmailSettingsModel.Custom = emailSettingsTestParamsEmailSettingsCustomModel

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsFrom model
				emailSettingsTestParamsSenderDetailsFromModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom)
				emailSettingsTestParamsSenderDetailsFromModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsFromModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsReplyTo model
				emailSettingsTestParamsSenderDetailsReplyToModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsReplyTo)
				emailSettingsTestParamsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsReplyToModel.Name = core.StringPtr("testString")

				// Construct an instance of the EmailSettingsTestParamsSenderDetails model
				emailSettingsTestParamsSenderDetailsModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetails)
				emailSettingsTestParamsSenderDetailsModel.From = emailSettingsTestParamsSenderDetailsFromModel
				emailSettingsTestParamsSenderDetailsModel.ReplyTo = emailSettingsTestParamsSenderDetailsReplyToModel

				// Construct an instance of the EmailSettingTestOptions model
				emailSettingTestOptionsModel := new(appidmanagementv4.EmailSettingTestOptions)
				emailSettingTestOptionsModel.TenantID = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailTo = core.StringPtr("testString")
				emailSettingTestOptionsModel.EmailSettings = emailSettingsTestParamsEmailSettingsModel
				emailSettingTestOptionsModel.SenderDetails = emailSettingsTestParamsSenderDetailsModel
				emailSettingTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.EmailSettingTest(emailSettingTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostEmailDispatcherTest(postEmailDispatcherTestOptions *PostEmailDispatcherTestOptions) - Operation response error`, func() {
		postEmailDispatcherTestPath := "/management/v4/testString/config/cloud_directory/email_dispatcher/test"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postEmailDispatcherTestPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PostEmailDispatcherTest with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostEmailDispatcherTestOptions model
				postEmailDispatcherTestOptionsModel := new(appidmanagementv4.PostEmailDispatcherTestOptions)
				postEmailDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Email = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostEmailDispatcherTest(postEmailDispatcherTestOptions *PostEmailDispatcherTestOptions)`, func() {
		postEmailDispatcherTestPath := "/management/v4/testString/config/cloud_directory/email_dispatcher/test"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postEmailDispatcherTestPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"statusCode": 10, "headers": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke PostEmailDispatcherTest successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the PostEmailDispatcherTestOptions model
				postEmailDispatcherTestOptionsModel := new(appidmanagementv4.PostEmailDispatcherTestOptions)
				postEmailDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Email = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.PostEmailDispatcherTestWithContext(ctx, postEmailDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.PostEmailDispatcherTestWithContext(ctx, postEmailDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postEmailDispatcherTestPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"statusCode": 10, "headers": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke PostEmailDispatcherTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.PostEmailDispatcherTest(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PostEmailDispatcherTestOptions model
				postEmailDispatcherTestOptionsModel := new(appidmanagementv4.PostEmailDispatcherTestOptions)
				postEmailDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Email = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PostEmailDispatcherTest with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostEmailDispatcherTestOptions model
				postEmailDispatcherTestOptionsModel := new(appidmanagementv4.PostEmailDispatcherTestOptions)
				postEmailDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Email = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PostEmailDispatcherTestOptions model with no property values
				postEmailDispatcherTestOptionsModelNew := new(appidmanagementv4.PostEmailDispatcherTestOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PostEmailDispatcherTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostEmailDispatcherTestOptions model
				postEmailDispatcherTestOptionsModel := new(appidmanagementv4.PostEmailDispatcherTestOptions)
				postEmailDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Email = core.StringPtr("testString")
				postEmailDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.PostEmailDispatcherTest(postEmailDispatcherTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostSMSDispatcherTest(postSMSDispatcherTestOptions *PostSMSDispatcherTestOptions) - Operation response error`, func() {
		postSMSDispatcherTestPath := "/management/v4/testString/config/cloud_directory/sms_dispatcher/test"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postSMSDispatcherTestPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PostSMSDispatcherTest with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostSMSDispatcherTestOptions model
				postSMSDispatcherTestOptionsModel := new(appidmanagementv4.PostSMSDispatcherTestOptions)
				postSMSDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postSMSDispatcherTestOptionsModel.PhoneNumber = core.StringPtr("+1-999-999-9999")
				postSMSDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostSMSDispatcherTest(postSMSDispatcherTestOptions *PostSMSDispatcherTestOptions)`, func() {
		postSMSDispatcherTestPath := "/management/v4/testString/config/cloud_directory/sms_dispatcher/test"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postSMSDispatcherTestPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"confirmationCode": 16, "phoneNumber": "PhoneNumber"}`)
				}))
			})
			It(`Invoke PostSMSDispatcherTest successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the PostSMSDispatcherTestOptions model
				postSMSDispatcherTestOptionsModel := new(appidmanagementv4.PostSMSDispatcherTestOptions)
				postSMSDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postSMSDispatcherTestOptionsModel.PhoneNumber = core.StringPtr("+1-999-999-9999")
				postSMSDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.PostSMSDispatcherTestWithContext(ctx, postSMSDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.PostSMSDispatcherTestWithContext(ctx, postSMSDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postSMSDispatcherTestPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"confirmationCode": 16, "phoneNumber": "PhoneNumber"}`)
				}))
			})
			It(`Invoke PostSMSDispatcherTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.PostSMSDispatcherTest(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PostSMSDispatcherTestOptions model
				postSMSDispatcherTestOptionsModel := new(appidmanagementv4.PostSMSDispatcherTestOptions)
				postSMSDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postSMSDispatcherTestOptionsModel.PhoneNumber = core.StringPtr("+1-999-999-9999")
				postSMSDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PostSMSDispatcherTest with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostSMSDispatcherTestOptions model
				postSMSDispatcherTestOptionsModel := new(appidmanagementv4.PostSMSDispatcherTestOptions)
				postSMSDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postSMSDispatcherTestOptionsModel.PhoneNumber = core.StringPtr("+1-999-999-9999")
				postSMSDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PostSMSDispatcherTestOptions model with no property values
				postSMSDispatcherTestOptionsModelNew := new(appidmanagementv4.PostSMSDispatcherTestOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PostSMSDispatcherTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostSMSDispatcherTestOptions model
				postSMSDispatcherTestOptionsModel := new(appidmanagementv4.PostSMSDispatcherTestOptions)
				postSMSDispatcherTestOptionsModel.TenantID = core.StringPtr("testString")
				postSMSDispatcherTestOptionsModel.PhoneNumber = core.StringPtr("+1-999-999-9999")
				postSMSDispatcherTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.PostSMSDispatcherTest(postSMSDispatcherTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptions *GetCloudDirectoryAdvancedPasswordManagementOptions) - Operation response error`, func() {
		getCloudDirectoryAdvancedPasswordManagementPath := "/management/v4/testString/config/cloud_directory/advanced_password_management"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryAdvancedPasswordManagementPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCloudDirectoryAdvancedPasswordManagement with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model
				getCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.GetCloudDirectoryAdvancedPasswordManagementOptions)
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptions *GetCloudDirectoryAdvancedPasswordManagementOptions)`, func() {
		getCloudDirectoryAdvancedPasswordManagementPath := "/management/v4/testString/config/cloud_directory/advanced_password_management"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryAdvancedPasswordManagementPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"advancedPasswordManagement": {"enabled": false, "passwordReuse": {"enabled": false, "config": {"maxPasswordReuse": 1}}, "preventPasswordWithUsername": {"enabled": false}, "passwordExpiration": {"enabled": false, "config": {"daysToExpire": 1}}, "lockOutPolicy": {"enabled": false, "config": {"lockOutTimeSec": 60, "numOfAttempts": 1}}, "minPasswordChangeInterval": {"enabled": false, "config": {"minHoursToChangePassword": 0}}}}`)
				}))
			})
			It(`Invoke GetCloudDirectoryAdvancedPasswordManagement successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model
				getCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.GetCloudDirectoryAdvancedPasswordManagementOptions)
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCloudDirectoryAdvancedPasswordManagementWithContext(ctx, getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCloudDirectoryAdvancedPasswordManagementWithContext(ctx, getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryAdvancedPasswordManagementPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"advancedPasswordManagement": {"enabled": false, "passwordReuse": {"enabled": false, "config": {"maxPasswordReuse": 1}}, "preventPasswordWithUsername": {"enabled": false}, "passwordExpiration": {"enabled": false, "config": {"daysToExpire": 1}}, "lockOutPolicy": {"enabled": false, "config": {"lockOutTimeSec": 60, "numOfAttempts": 1}}, "minPasswordChangeInterval": {"enabled": false, "config": {"minHoursToChangePassword": 0}}}}`)
				}))
			})
			It(`Invoke GetCloudDirectoryAdvancedPasswordManagement successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model
				getCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.GetCloudDirectoryAdvancedPasswordManagementOptions)
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCloudDirectoryAdvancedPasswordManagement with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model
				getCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.GetCloudDirectoryAdvancedPasswordManagementOptions)
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model with no property values
				getCloudDirectoryAdvancedPasswordManagementOptionsModelNew := new(appidmanagementv4.GetCloudDirectoryAdvancedPasswordManagementOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectoryAdvancedPasswordManagement successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model
				getCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.GetCloudDirectoryAdvancedPasswordManagementOptions)
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCloudDirectoryAdvancedPasswordManagement(getCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptions *SetCloudDirectoryAdvancedPasswordManagementOptions) - Operation response error`, func() {
		setCloudDirectoryAdvancedPasswordManagementPath := "/management/v4/testString/config/cloud_directory/advanced_password_management"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryAdvancedPasswordManagementPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetCloudDirectoryAdvancedPasswordManagement with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuseConfig model
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuseConfig)
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuse model
				apmSchemaAdvancedPasswordManagementPasswordReuseModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config = apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername model
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername)
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig model
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig)
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpiration model
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config = apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig model
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig)
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec = core.Int64Ptr(int64(60))
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicy model
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config = apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword = core.Int64Ptr(int64(0))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagement model
				apmSchemaAdvancedPasswordManagementModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagement)
				apmSchemaAdvancedPasswordManagementModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementModel.PasswordReuse = apmSchemaAdvancedPasswordManagementPasswordReuseModel
				apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername = apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel
				apmSchemaAdvancedPasswordManagementModel.PasswordExpiration = apmSchemaAdvancedPasswordManagementPasswordExpirationModel
				apmSchemaAdvancedPasswordManagementModel.LockOutPolicy = apmSchemaAdvancedPasswordManagementLockOutPolicyModel
				apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel

				// Construct an instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model
				setCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.SetCloudDirectoryAdvancedPasswordManagementOptions)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.AdvancedPasswordManagement = apmSchemaAdvancedPasswordManagementModel
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptions *SetCloudDirectoryAdvancedPasswordManagementOptions)`, func() {
		setCloudDirectoryAdvancedPasswordManagementPath := "/management/v4/testString/config/cloud_directory/advanced_password_management"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryAdvancedPasswordManagementPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"advancedPasswordManagement": {"enabled": false, "passwordReuse": {"enabled": false, "config": {"maxPasswordReuse": 1}}, "preventPasswordWithUsername": {"enabled": false}, "passwordExpiration": {"enabled": false, "config": {"daysToExpire": 1}}, "lockOutPolicy": {"enabled": false, "config": {"lockOutTimeSec": 60, "numOfAttempts": 1}}, "minPasswordChangeInterval": {"enabled": false, "config": {"minHoursToChangePassword": 0}}}}`)
				}))
			})
			It(`Invoke SetCloudDirectoryAdvancedPasswordManagement successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuseConfig model
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuseConfig)
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuse model
				apmSchemaAdvancedPasswordManagementPasswordReuseModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config = apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername model
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername)
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig model
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig)
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpiration model
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config = apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig model
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig)
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec = core.Int64Ptr(int64(60))
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicy model
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config = apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword = core.Int64Ptr(int64(0))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagement model
				apmSchemaAdvancedPasswordManagementModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagement)
				apmSchemaAdvancedPasswordManagementModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementModel.PasswordReuse = apmSchemaAdvancedPasswordManagementPasswordReuseModel
				apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername = apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel
				apmSchemaAdvancedPasswordManagementModel.PasswordExpiration = apmSchemaAdvancedPasswordManagementPasswordExpirationModel
				apmSchemaAdvancedPasswordManagementModel.LockOutPolicy = apmSchemaAdvancedPasswordManagementLockOutPolicyModel
				apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel

				// Construct an instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model
				setCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.SetCloudDirectoryAdvancedPasswordManagementOptions)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.AdvancedPasswordManagement = apmSchemaAdvancedPasswordManagementModel
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetCloudDirectoryAdvancedPasswordManagementWithContext(ctx, setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetCloudDirectoryAdvancedPasswordManagementWithContext(ctx, setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryAdvancedPasswordManagementPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"advancedPasswordManagement": {"enabled": false, "passwordReuse": {"enabled": false, "config": {"maxPasswordReuse": 1}}, "preventPasswordWithUsername": {"enabled": false}, "passwordExpiration": {"enabled": false, "config": {"daysToExpire": 1}}, "lockOutPolicy": {"enabled": false, "config": {"lockOutTimeSec": 60, "numOfAttempts": 1}}, "minPasswordChangeInterval": {"enabled": false, "config": {"minHoursToChangePassword": 0}}}}`)
				}))
			})
			It(`Invoke SetCloudDirectoryAdvancedPasswordManagement successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuseConfig model
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuseConfig)
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuse model
				apmSchemaAdvancedPasswordManagementPasswordReuseModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config = apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername model
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername)
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig model
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig)
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpiration model
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config = apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig model
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig)
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec = core.Int64Ptr(int64(60))
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicy model
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config = apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword = core.Int64Ptr(int64(0))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagement model
				apmSchemaAdvancedPasswordManagementModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagement)
				apmSchemaAdvancedPasswordManagementModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementModel.PasswordReuse = apmSchemaAdvancedPasswordManagementPasswordReuseModel
				apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername = apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel
				apmSchemaAdvancedPasswordManagementModel.PasswordExpiration = apmSchemaAdvancedPasswordManagementPasswordExpirationModel
				apmSchemaAdvancedPasswordManagementModel.LockOutPolicy = apmSchemaAdvancedPasswordManagementLockOutPolicyModel
				apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel

				// Construct an instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model
				setCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.SetCloudDirectoryAdvancedPasswordManagementOptions)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.AdvancedPasswordManagement = apmSchemaAdvancedPasswordManagementModel
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetCloudDirectoryAdvancedPasswordManagement with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuseConfig model
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuseConfig)
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuse model
				apmSchemaAdvancedPasswordManagementPasswordReuseModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config = apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername model
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername)
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig model
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig)
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpiration model
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config = apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig model
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig)
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec = core.Int64Ptr(int64(60))
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicy model
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config = apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword = core.Int64Ptr(int64(0))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagement model
				apmSchemaAdvancedPasswordManagementModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagement)
				apmSchemaAdvancedPasswordManagementModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementModel.PasswordReuse = apmSchemaAdvancedPasswordManagementPasswordReuseModel
				apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername = apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel
				apmSchemaAdvancedPasswordManagementModel.PasswordExpiration = apmSchemaAdvancedPasswordManagementPasswordExpirationModel
				apmSchemaAdvancedPasswordManagementModel.LockOutPolicy = apmSchemaAdvancedPasswordManagementLockOutPolicyModel
				apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel

				// Construct an instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model
				setCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.SetCloudDirectoryAdvancedPasswordManagementOptions)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.AdvancedPasswordManagement = apmSchemaAdvancedPasswordManagementModel
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model with no property values
				setCloudDirectoryAdvancedPasswordManagementOptionsModelNew := new(appidmanagementv4.SetCloudDirectoryAdvancedPasswordManagementOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetCloudDirectoryAdvancedPasswordManagement successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuseConfig model
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuseConfig)
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuse model
				apmSchemaAdvancedPasswordManagementPasswordReuseModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config = apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername model
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername)
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled = core.BoolPtr(true)

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig model
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig)
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpiration model
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config = apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig model
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig)
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec = core.Int64Ptr(int64(60))
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts = core.Int64Ptr(int64(1))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicy model
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config = apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword = core.Int64Ptr(int64(0))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel

				// Construct an instance of the ApmSchemaAdvancedPasswordManagement model
				apmSchemaAdvancedPasswordManagementModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagement)
				apmSchemaAdvancedPasswordManagementModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementModel.PasswordReuse = apmSchemaAdvancedPasswordManagementPasswordReuseModel
				apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername = apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel
				apmSchemaAdvancedPasswordManagementModel.PasswordExpiration = apmSchemaAdvancedPasswordManagementPasswordExpirationModel
				apmSchemaAdvancedPasswordManagementModel.LockOutPolicy = apmSchemaAdvancedPasswordManagementLockOutPolicyModel
				apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel

				// Construct an instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model
				setCloudDirectoryAdvancedPasswordManagementOptionsModel := new(appidmanagementv4.SetCloudDirectoryAdvancedPasswordManagementOptions)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.AdvancedPasswordManagement = apmSchemaAdvancedPasswordManagementModel
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetCloudDirectoryAdvancedPasswordManagement(setCloudDirectoryAdvancedPasswordManagementOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAuditStatus(getAuditStatusOptions *GetAuditStatusOptions) - Operation response error`, func() {
		getAuditStatusPath := "/management/v4/testString/config/capture_runtime_activity"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAuditStatusPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAuditStatus with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetAuditStatusOptions model
				getAuditStatusOptionsModel := new(appidmanagementv4.GetAuditStatusOptions)
				getAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				getAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetAuditStatus(getAuditStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetAuditStatus(getAuditStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAuditStatus(getAuditStatusOptions *GetAuditStatusOptions)`, func() {
		getAuditStatusPath := "/management/v4/testString/config/capture_runtime_activity"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAuditStatusPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke GetAuditStatus successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetAuditStatusOptions model
				getAuditStatusOptionsModel := new(appidmanagementv4.GetAuditStatusOptions)
				getAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				getAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetAuditStatusWithContext(ctx, getAuditStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetAuditStatus(getAuditStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetAuditStatusWithContext(ctx, getAuditStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAuditStatusPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke GetAuditStatus successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetAuditStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAuditStatusOptions model
				getAuditStatusOptionsModel := new(appidmanagementv4.GetAuditStatusOptions)
				getAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				getAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetAuditStatus(getAuditStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAuditStatus with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetAuditStatusOptions model
				getAuditStatusOptionsModel := new(appidmanagementv4.GetAuditStatusOptions)
				getAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				getAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetAuditStatus(getAuditStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAuditStatusOptions model with no property values
				getAuditStatusOptionsModelNew := new(appidmanagementv4.GetAuditStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetAuditStatus(getAuditStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAuditStatus successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetAuditStatusOptions model
				getAuditStatusOptionsModel := new(appidmanagementv4.GetAuditStatusOptions)
				getAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				getAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetAuditStatus(getAuditStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetAuditStatus(setAuditStatusOptions *SetAuditStatusOptions)`, func() {
		setAuditStatusPath := "/management/v4/testString/config/capture_runtime_activity"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setAuditStatusPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(204)
				}))
			})
			It(`Invoke SetAuditStatus successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.SetAuditStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the SetAuditStatusOptions model
				setAuditStatusOptionsModel := new(appidmanagementv4.SetAuditStatusOptions)
				setAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				setAuditStatusOptionsModel.IsActive = core.BoolPtr(true)
				setAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.SetAuditStatus(setAuditStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke SetAuditStatus with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SetAuditStatusOptions model
				setAuditStatusOptionsModel := new(appidmanagementv4.SetAuditStatusOptions)
				setAuditStatusOptionsModel.TenantID = core.StringPtr("testString")
				setAuditStatusOptionsModel.IsActive = core.BoolPtr(true)
				setAuditStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.SetAuditStatus(setAuditStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the SetAuditStatusOptions model with no property values
				setAuditStatusOptionsModelNew := new(appidmanagementv4.SetAuditStatusOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.SetAuditStatus(setAuditStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListChannels(listChannelsOptions *ListChannelsOptions) - Operation response error`, func() {
		listChannelsPath := "/management/v4/testString/config/cloud_directory/mfa/channels"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listChannelsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListChannels with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListChannelsOptions model
				listChannelsOptionsModel := new(appidmanagementv4.ListChannelsOptions)
				listChannelsOptionsModel.TenantID = core.StringPtr("testString")
				listChannelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.ListChannels(listChannelsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.ListChannels(listChannelsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListChannels(listChannelsOptions *ListChannelsOptions)`, func() {
		listChannelsPath := "/management/v4/testString/config/cloud_directory/mfa/channels"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listChannelsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"channels": [{"type": "Type", "isActive": true, "config": {"key": "Key", "secret": "Secret", "from": "From", "provider": "Provider"}}]}`)
				}))
			})
			It(`Invoke ListChannels successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ListChannelsOptions model
				listChannelsOptionsModel := new(appidmanagementv4.ListChannelsOptions)
				listChannelsOptionsModel.TenantID = core.StringPtr("testString")
				listChannelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.ListChannelsWithContext(ctx, listChannelsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.ListChannels(listChannelsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.ListChannelsWithContext(ctx, listChannelsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listChannelsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"channels": [{"type": "Type", "isActive": true, "config": {"key": "Key", "secret": "Secret", "from": "From", "provider": "Provider"}}]}`)
				}))
			})
			It(`Invoke ListChannels successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.ListChannels(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListChannelsOptions model
				listChannelsOptionsModel := new(appidmanagementv4.ListChannelsOptions)
				listChannelsOptionsModel.TenantID = core.StringPtr("testString")
				listChannelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.ListChannels(listChannelsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListChannels with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListChannelsOptions model
				listChannelsOptionsModel := new(appidmanagementv4.ListChannelsOptions)
				listChannelsOptionsModel.TenantID = core.StringPtr("testString")
				listChannelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.ListChannels(listChannelsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListChannelsOptions model with no property values
				listChannelsOptionsModelNew := new(appidmanagementv4.ListChannelsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.ListChannels(listChannelsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListChannels successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListChannelsOptions model
				listChannelsOptionsModel := new(appidmanagementv4.ListChannelsOptions)
				listChannelsOptionsModel.TenantID = core.StringPtr("testString")
				listChannelsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.ListChannels(listChannelsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetChannel(getChannelOptions *GetChannelOptions) - Operation response error`, func() {
		getChannelPath := "/management/v4/testString/config/cloud_directory/mfa/channels/email"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getChannelPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetChannel with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetChannelOptions model
				getChannelOptionsModel := new(appidmanagementv4.GetChannelOptions)
				getChannelOptionsModel.TenantID = core.StringPtr("testString")
				getChannelOptionsModel.Channel = core.StringPtr("email")
				getChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetChannel(getChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetChannel(getChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetChannel(getChannelOptions *GetChannelOptions)`, func() {
		getChannelPath := "/management/v4/testString/config/cloud_directory/mfa/channels/email"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getChannelPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "type": "Type", "config": {"key": "Key", "secret": "Secret", "from": "From", "provider": "Provider"}}`)
				}))
			})
			It(`Invoke GetChannel successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetChannelOptions model
				getChannelOptionsModel := new(appidmanagementv4.GetChannelOptions)
				getChannelOptionsModel.TenantID = core.StringPtr("testString")
				getChannelOptionsModel.Channel = core.StringPtr("email")
				getChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetChannelWithContext(ctx, getChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetChannel(getChannelOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetChannelWithContext(ctx, getChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getChannelPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "type": "Type", "config": {"key": "Key", "secret": "Secret", "from": "From", "provider": "Provider"}}`)
				}))
			})
			It(`Invoke GetChannel successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetChannel(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetChannelOptions model
				getChannelOptionsModel := new(appidmanagementv4.GetChannelOptions)
				getChannelOptionsModel.TenantID = core.StringPtr("testString")
				getChannelOptionsModel.Channel = core.StringPtr("email")
				getChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetChannel(getChannelOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetChannel with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetChannelOptions model
				getChannelOptionsModel := new(appidmanagementv4.GetChannelOptions)
				getChannelOptionsModel.TenantID = core.StringPtr("testString")
				getChannelOptionsModel.Channel = core.StringPtr("email")
				getChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetChannel(getChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetChannelOptions model with no property values
				getChannelOptionsModelNew := new(appidmanagementv4.GetChannelOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetChannel(getChannelOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetChannel successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetChannelOptions model
				getChannelOptionsModel := new(appidmanagementv4.GetChannelOptions)
				getChannelOptionsModel.TenantID = core.StringPtr("testString")
				getChannelOptionsModel.Channel = core.StringPtr("email")
				getChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetChannel(getChannelOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateChannel(updateChannelOptions *UpdateChannelOptions) - Operation response error`, func() {
		updateChannelPath := "/management/v4/testString/config/cloud_directory/mfa/channels/email"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateChannelPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateChannel with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateChannelOptions model
				updateChannelOptionsModel := new(appidmanagementv4.UpdateChannelOptions)
				updateChannelOptionsModel.TenantID = core.StringPtr("testString")
				updateChannelOptionsModel.Channel = core.StringPtr("email")
				updateChannelOptionsModel.IsActive = core.BoolPtr(true)
				updateChannelOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateChannel(updateChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateChannel(updateChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateChannel(updateChannelOptions *UpdateChannelOptions)`, func() {
		updateChannelPath := "/management/v4/testString/config/cloud_directory/mfa/channels/email"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateChannelPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "type": "Type", "config": {"key": "Key", "secret": "Secret", "from": "From", "provider": "Provider"}}`)
				}))
			})
			It(`Invoke UpdateChannel successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateChannelOptions model
				updateChannelOptionsModel := new(appidmanagementv4.UpdateChannelOptions)
				updateChannelOptionsModel.TenantID = core.StringPtr("testString")
				updateChannelOptionsModel.Channel = core.StringPtr("email")
				updateChannelOptionsModel.IsActive = core.BoolPtr(true)
				updateChannelOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateChannelWithContext(ctx, updateChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateChannel(updateChannelOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateChannelWithContext(ctx, updateChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateChannelPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "type": "Type", "config": {"key": "Key", "secret": "Secret", "from": "From", "provider": "Provider"}}`)
				}))
			})
			It(`Invoke UpdateChannel successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateChannel(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateChannelOptions model
				updateChannelOptionsModel := new(appidmanagementv4.UpdateChannelOptions)
				updateChannelOptionsModel.TenantID = core.StringPtr("testString")
				updateChannelOptionsModel.Channel = core.StringPtr("email")
				updateChannelOptionsModel.IsActive = core.BoolPtr(true)
				updateChannelOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateChannel(updateChannelOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateChannel with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateChannelOptions model
				updateChannelOptionsModel := new(appidmanagementv4.UpdateChannelOptions)
				updateChannelOptionsModel.TenantID = core.StringPtr("testString")
				updateChannelOptionsModel.Channel = core.StringPtr("email")
				updateChannelOptionsModel.IsActive = core.BoolPtr(true)
				updateChannelOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateChannel(updateChannelOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateChannelOptions model with no property values
				updateChannelOptionsModelNew := new(appidmanagementv4.UpdateChannelOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateChannel(updateChannelOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateChannel successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateChannelOptions model
				updateChannelOptionsModel := new(appidmanagementv4.UpdateChannelOptions)
				updateChannelOptionsModel.TenantID = core.StringPtr("testString")
				updateChannelOptionsModel.Channel = core.StringPtr("email")
				updateChannelOptionsModel.IsActive = core.BoolPtr(true)
				updateChannelOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateChannelOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateChannel(updateChannelOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetExtensionConfig(getExtensionConfigOptions *GetExtensionConfigOptions) - Operation response error`, func() {
		getExtensionConfigPath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getExtensionConfigPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetExtensionConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetExtensionConfigOptions model
				getExtensionConfigOptionsModel := new(appidmanagementv4.GetExtensionConfigOptions)
				getExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				getExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				getExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetExtensionConfig(getExtensionConfigOptions *GetExtensionConfigOptions)`, func() {
		getExtensionConfigPath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getExtensionConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"url": "URL", "headers": {"anyKey": "anyValue"}}}`)
				}))
			})
			It(`Invoke GetExtensionConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetExtensionConfigOptions model
				getExtensionConfigOptionsModel := new(appidmanagementv4.GetExtensionConfigOptions)
				getExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				getExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				getExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetExtensionConfigWithContext(ctx, getExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetExtensionConfigWithContext(ctx, getExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getExtensionConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"url": "URL", "headers": {"anyKey": "anyValue"}}}`)
				}))
			})
			It(`Invoke GetExtensionConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetExtensionConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetExtensionConfigOptions model
				getExtensionConfigOptionsModel := new(appidmanagementv4.GetExtensionConfigOptions)
				getExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				getExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				getExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetExtensionConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetExtensionConfigOptions model
				getExtensionConfigOptionsModel := new(appidmanagementv4.GetExtensionConfigOptions)
				getExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				getExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				getExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetExtensionConfigOptions model with no property values
				getExtensionConfigOptionsModelNew := new(appidmanagementv4.GetExtensionConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetExtensionConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetExtensionConfigOptions model
				getExtensionConfigOptionsModel := new(appidmanagementv4.GetExtensionConfigOptions)
				getExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				getExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				getExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetExtensionConfig(getExtensionConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateExtensionConfig(updateExtensionConfigOptions *UpdateExtensionConfigOptions) - Operation response error`, func() {
		updateExtensionConfigPath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateExtensionConfigPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateExtensionConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateExtensionConfigConfig model
				updateExtensionConfigConfigModel := new(appidmanagementv4.UpdateExtensionConfigConfig)
				updateExtensionConfigConfigModel.URL = core.StringPtr("testString")
				updateExtensionConfigConfigModel.HeadersVar = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the UpdateExtensionConfigOptions model
				updateExtensionConfigOptionsModel := new(appidmanagementv4.UpdateExtensionConfigOptions)
				updateExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionConfigOptionsModel.Config = updateExtensionConfigConfigModel
				updateExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateExtensionConfig(updateExtensionConfigOptions *UpdateExtensionConfigOptions)`, func() {
		updateExtensionConfigPath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateExtensionConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"url": "URL", "headers": {"anyKey": "anyValue"}}}`)
				}))
			})
			It(`Invoke UpdateExtensionConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateExtensionConfigConfig model
				updateExtensionConfigConfigModel := new(appidmanagementv4.UpdateExtensionConfigConfig)
				updateExtensionConfigConfigModel.URL = core.StringPtr("testString")
				updateExtensionConfigConfigModel.HeadersVar = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the UpdateExtensionConfigOptions model
				updateExtensionConfigOptionsModel := new(appidmanagementv4.UpdateExtensionConfigOptions)
				updateExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionConfigOptionsModel.Config = updateExtensionConfigConfigModel
				updateExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateExtensionConfigWithContext(ctx, updateExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateExtensionConfigWithContext(ctx, updateExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateExtensionConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"url": "URL", "headers": {"anyKey": "anyValue"}}}`)
				}))
			})
			It(`Invoke UpdateExtensionConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateExtensionConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateExtensionConfigConfig model
				updateExtensionConfigConfigModel := new(appidmanagementv4.UpdateExtensionConfigConfig)
				updateExtensionConfigConfigModel.URL = core.StringPtr("testString")
				updateExtensionConfigConfigModel.HeadersVar = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the UpdateExtensionConfigOptions model
				updateExtensionConfigOptionsModel := new(appidmanagementv4.UpdateExtensionConfigOptions)
				updateExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionConfigOptionsModel.Config = updateExtensionConfigConfigModel
				updateExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateExtensionConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateExtensionConfigConfig model
				updateExtensionConfigConfigModel := new(appidmanagementv4.UpdateExtensionConfigConfig)
				updateExtensionConfigConfigModel.URL = core.StringPtr("testString")
				updateExtensionConfigConfigModel.HeadersVar = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the UpdateExtensionConfigOptions model
				updateExtensionConfigOptionsModel := new(appidmanagementv4.UpdateExtensionConfigOptions)
				updateExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionConfigOptionsModel.Config = updateExtensionConfigConfigModel
				updateExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateExtensionConfigOptions model with no property values
				updateExtensionConfigOptionsModelNew := new(appidmanagementv4.UpdateExtensionConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateExtensionConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateExtensionConfigConfig model
				updateExtensionConfigConfigModel := new(appidmanagementv4.UpdateExtensionConfigConfig)
				updateExtensionConfigConfigModel.URL = core.StringPtr("testString")
				updateExtensionConfigConfigModel.HeadersVar = map[string]interface{}{"anyKey": "anyValue"}

				// Construct an instance of the UpdateExtensionConfigOptions model
				updateExtensionConfigOptionsModel := new(appidmanagementv4.UpdateExtensionConfigOptions)
				updateExtensionConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionConfigOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionConfigOptionsModel.Config = updateExtensionConfigConfigModel
				updateExtensionConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateExtensionConfig(updateExtensionConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateExtensionActive(updateExtensionActiveOptions *UpdateExtensionActiveOptions) - Operation response error`, func() {
		updateExtensionActivePath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa/active"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateExtensionActivePath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateExtensionActive with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateExtensionActiveOptions model
				updateExtensionActiveOptionsModel := new(appidmanagementv4.UpdateExtensionActiveOptions)
				updateExtensionActiveOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionActiveOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionActiveOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionActiveOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateExtensionActiveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateExtensionActive(updateExtensionActiveOptions *UpdateExtensionActiveOptions)`, func() {
		updateExtensionActivePath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa/active"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateExtensionActivePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke UpdateExtensionActive successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateExtensionActiveOptions model
				updateExtensionActiveOptionsModel := new(appidmanagementv4.UpdateExtensionActiveOptions)
				updateExtensionActiveOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionActiveOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionActiveOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionActiveOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateExtensionActiveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateExtensionActiveWithContext(ctx, updateExtensionActiveOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateExtensionActiveWithContext(ctx, updateExtensionActiveOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateExtensionActivePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke UpdateExtensionActive successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateExtensionActive(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateExtensionActiveOptions model
				updateExtensionActiveOptionsModel := new(appidmanagementv4.UpdateExtensionActiveOptions)
				updateExtensionActiveOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionActiveOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionActiveOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionActiveOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateExtensionActiveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateExtensionActive with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateExtensionActiveOptions model
				updateExtensionActiveOptionsModel := new(appidmanagementv4.UpdateExtensionActiveOptions)
				updateExtensionActiveOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionActiveOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionActiveOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionActiveOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateExtensionActiveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateExtensionActiveOptions model with no property values
				updateExtensionActiveOptionsModelNew := new(appidmanagementv4.UpdateExtensionActiveOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateExtensionActive successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateExtensionActiveOptions model
				updateExtensionActiveOptionsModel := new(appidmanagementv4.UpdateExtensionActiveOptions)
				updateExtensionActiveOptionsModel.TenantID = core.StringPtr("testString")
				updateExtensionActiveOptionsModel.Name = core.StringPtr("premfa")
				updateExtensionActiveOptionsModel.IsActive = core.BoolPtr(true)
				updateExtensionActiveOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateExtensionActiveOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateExtensionActive(updateExtensionActiveOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostExtensionsTest(postExtensionsTestOptions *PostExtensionsTestOptions) - Operation response error`, func() {
		postExtensionsTestPath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa/test"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postExtensionsTestPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PostExtensionsTest with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostExtensionsTestOptions model
				postExtensionsTestOptionsModel := new(appidmanagementv4.PostExtensionsTestOptions)
				postExtensionsTestOptionsModel.TenantID = core.StringPtr("testString")
				postExtensionsTestOptionsModel.Name = core.StringPtr("premfa")
				postExtensionsTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostExtensionsTest(postExtensionsTestOptions *PostExtensionsTestOptions)`, func() {
		postExtensionsTestPath := "/management/v4/testString/config/cloud_directory/mfa/extensions/premfa/test"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postExtensionsTestPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"statusCode": 10, "headers": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke PostExtensionsTest successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the PostExtensionsTestOptions model
				postExtensionsTestOptionsModel := new(appidmanagementv4.PostExtensionsTestOptions)
				postExtensionsTestOptionsModel.TenantID = core.StringPtr("testString")
				postExtensionsTestOptionsModel.Name = core.StringPtr("premfa")
				postExtensionsTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.PostExtensionsTestWithContext(ctx, postExtensionsTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.PostExtensionsTestWithContext(ctx, postExtensionsTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postExtensionsTestPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"statusCode": 10, "headers": {"anyKey": "anyValue"}}`)
				}))
			})
			It(`Invoke PostExtensionsTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.PostExtensionsTest(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PostExtensionsTestOptions model
				postExtensionsTestOptionsModel := new(appidmanagementv4.PostExtensionsTestOptions)
				postExtensionsTestOptionsModel.TenantID = core.StringPtr("testString")
				postExtensionsTestOptionsModel.Name = core.StringPtr("premfa")
				postExtensionsTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PostExtensionsTest with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostExtensionsTestOptions model
				postExtensionsTestOptionsModel := new(appidmanagementv4.PostExtensionsTestOptions)
				postExtensionsTestOptionsModel.TenantID = core.StringPtr("testString")
				postExtensionsTestOptionsModel.Name = core.StringPtr("premfa")
				postExtensionsTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PostExtensionsTestOptions model with no property values
				postExtensionsTestOptionsModelNew := new(appidmanagementv4.PostExtensionsTestOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PostExtensionsTest successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the PostExtensionsTestOptions model
				postExtensionsTestOptionsModel := new(appidmanagementv4.PostExtensionsTestOptions)
				postExtensionsTestOptionsModel.TenantID = core.StringPtr("testString")
				postExtensionsTestOptionsModel.Name = core.StringPtr("premfa")
				postExtensionsTestOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.PostExtensionsTest(postExtensionsTestOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMFAConfig(getMFAConfigOptions *GetMFAConfigOptions) - Operation response error`, func() {
		getMFAConfigPath := "/management/v4/testString/config/cloud_directory/mfa"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMFAConfigPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetMFAConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetMFAConfigOptions model
				getMFAConfigOptionsModel := new(appidmanagementv4.GetMFAConfigOptions)
				getMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				getMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetMFAConfig(getMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetMFAConfig(getMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetMFAConfig(getMFAConfigOptions *GetMFAConfigOptions)`, func() {
		getMFAConfigPath := "/management/v4/testString/config/cloud_directory/mfa"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMFAConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke GetMFAConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetMFAConfigOptions model
				getMFAConfigOptionsModel := new(appidmanagementv4.GetMFAConfigOptions)
				getMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				getMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetMFAConfigWithContext(ctx, getMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetMFAConfig(getMFAConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetMFAConfigWithContext(ctx, getMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getMFAConfigPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke GetMFAConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetMFAConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetMFAConfigOptions model
				getMFAConfigOptionsModel := new(appidmanagementv4.GetMFAConfigOptions)
				getMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				getMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetMFAConfig(getMFAConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetMFAConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetMFAConfigOptions model
				getMFAConfigOptionsModel := new(appidmanagementv4.GetMFAConfigOptions)
				getMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				getMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetMFAConfig(getMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetMFAConfigOptions model with no property values
				getMFAConfigOptionsModelNew := new(appidmanagementv4.GetMFAConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetMFAConfig(getMFAConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetMFAConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetMFAConfigOptions model
				getMFAConfigOptionsModel := new(appidmanagementv4.GetMFAConfigOptions)
				getMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				getMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetMFAConfig(getMFAConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateMFAConfig(updateMFAConfigOptions *UpdateMFAConfigOptions) - Operation response error`, func() {
		updateMFAConfigPath := "/management/v4/testString/config/cloud_directory/mfa"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateMFAConfigPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateMFAConfig with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateMFAConfigOptions model
				updateMFAConfigOptionsModel := new(appidmanagementv4.UpdateMFAConfigOptions)
				updateMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateMFAConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateMFAConfigOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateMFAConfig(updateMFAConfigOptions *UpdateMFAConfigOptions)`, func() {
		updateMFAConfigPath := "/management/v4/testString/config/cloud_directory/mfa"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateMFAConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke UpdateMFAConfig successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateMFAConfigOptions model
				updateMFAConfigOptionsModel := new(appidmanagementv4.UpdateMFAConfigOptions)
				updateMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateMFAConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateMFAConfigOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateMFAConfigWithContext(ctx, updateMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateMFAConfigWithContext(ctx, updateMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateMFAConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true}`)
				}))
			})
			It(`Invoke UpdateMFAConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateMFAConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateMFAConfigOptions model
				updateMFAConfigOptionsModel := new(appidmanagementv4.UpdateMFAConfigOptions)
				updateMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateMFAConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateMFAConfigOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateMFAConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateMFAConfigOptions model
				updateMFAConfigOptionsModel := new(appidmanagementv4.UpdateMFAConfigOptions)
				updateMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateMFAConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateMFAConfigOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateMFAConfigOptions model with no property values
				updateMFAConfigOptionsModelNew := new(appidmanagementv4.UpdateMFAConfigOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateMFAConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateMFAConfigOptions model
				updateMFAConfigOptionsModel := new(appidmanagementv4.UpdateMFAConfigOptions)
				updateMFAConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateMFAConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateMFAConfigOptionsModel.Config = map[string]interface{}{"anyKey": "anyValue"}
				updateMFAConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateMFAConfig(updateMFAConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSSOConfig(getSSOConfigOptions *GetSSOConfigOptions)`, func() {
		getSSOConfigPath := "/management/v4/testString/config/cloud_directory/sso"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSSOConfigPath))
					Expect(req.Method).To(Equal("GET"))

					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSSOConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.GetSSOConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetSSOConfigOptions model
				getSSOConfigOptionsModel := new(appidmanagementv4.GetSSOConfigOptions)
				getSSOConfigOptionsModel.TenantID = core.StringPtr("testString")
				getSSOConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.GetSSOConfig(getSSOConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetSSOConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetSSOConfigOptions model
				getSSOConfigOptionsModel := new(appidmanagementv4.GetSSOConfigOptions)
				getSSOConfigOptionsModel.TenantID = core.StringPtr("testString")
				getSSOConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.GetSSOConfig(getSSOConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetSSOConfigOptions model with no property values
				getSSOConfigOptionsModelNew := new(appidmanagementv4.GetSSOConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.GetSSOConfig(getSSOConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSSOConfig(updateSSOConfigOptions *UpdateSSOConfigOptions)`, func() {
		updateSSOConfigPath := "/management/v4/testString/config/cloud_directory/sso"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSSOConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke UpdateSSOConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UpdateSSOConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateSSOConfigOptions model
				updateSSOConfigOptionsModel := new(appidmanagementv4.UpdateSSOConfigOptions)
				updateSSOConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateSSOConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateSSOConfigOptionsModel.InactivityTimeoutSeconds = core.Int64Ptr(int64(86400))
				updateSSOConfigOptionsModel.LogoutRedirectUris = []string{"http://localhost:3000/logout-callback"}
				updateSSOConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UpdateSSOConfig(updateSSOConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateSSOConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateSSOConfigOptions model
				updateSSOConfigOptionsModel := new(appidmanagementv4.UpdateSSOConfigOptions)
				updateSSOConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateSSOConfigOptionsModel.IsActive = core.BoolPtr(true)
				updateSSOConfigOptionsModel.InactivityTimeoutSeconds = core.Int64Ptr(int64(86400))
				updateSSOConfigOptionsModel.LogoutRedirectUris = []string{"http://localhost:3000/logout-callback"}
				updateSSOConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UpdateSSOConfig(updateSSOConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateSSOConfigOptions model with no property values
				updateSSOConfigOptionsModelNew := new(appidmanagementv4.UpdateSSOConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UpdateSSOConfig(updateSSOConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRateLimitConfig(getRateLimitConfigOptions *GetRateLimitConfigOptions)`, func() {
		getRateLimitConfigPath := "/management/v4/testString/config/cloud_directory/rate_limit"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRateLimitConfigPath))
					Expect(req.Method).To(Equal("GET"))

					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRateLimitConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.GetRateLimitConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the GetRateLimitConfigOptions model
				getRateLimitConfigOptionsModel := new(appidmanagementv4.GetRateLimitConfigOptions)
				getRateLimitConfigOptionsModel.TenantID = core.StringPtr("testString")
				getRateLimitConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.GetRateLimitConfig(getRateLimitConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke GetRateLimitConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRateLimitConfigOptions model
				getRateLimitConfigOptionsModel := new(appidmanagementv4.GetRateLimitConfigOptions)
				getRateLimitConfigOptionsModel.TenantID = core.StringPtr("testString")
				getRateLimitConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.GetRateLimitConfig(getRateLimitConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the GetRateLimitConfigOptions model with no property values
				getRateLimitConfigOptionsModelNew := new(appidmanagementv4.GetRateLimitConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.GetRateLimitConfig(getRateLimitConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateRateLimitConfig(updateRateLimitConfigOptions *UpdateRateLimitConfigOptions)`, func() {
		updateRateLimitConfigPath := "/management/v4/testString/config/cloud_directory/rate_limit"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRateLimitConfigPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke UpdateRateLimitConfig successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UpdateRateLimitConfig(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UpdateRateLimitConfigOptions model
				updateRateLimitConfigOptionsModel := new(appidmanagementv4.UpdateRateLimitConfigOptions)
				updateRateLimitConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateRateLimitConfigOptionsModel.SignUpLimitPerMinute = core.Int64Ptr(int64(50))
				updateRateLimitConfigOptionsModel.SignInLimitPerMinute = core.Int64Ptr(int64(60))
				updateRateLimitConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UpdateRateLimitConfig(updateRateLimitConfigOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UpdateRateLimitConfig with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateRateLimitConfigOptions model
				updateRateLimitConfigOptionsModel := new(appidmanagementv4.UpdateRateLimitConfigOptions)
				updateRateLimitConfigOptionsModel.TenantID = core.StringPtr("testString")
				updateRateLimitConfigOptionsModel.SignUpLimitPerMinute = core.Int64Ptr(int64(50))
				updateRateLimitConfigOptionsModel.SignInLimitPerMinute = core.Int64Ptr(int64(60))
				updateRateLimitConfigOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UpdateRateLimitConfig(updateRateLimitConfigOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UpdateRateLimitConfigOptions model with no property values
				updateRateLimitConfigOptionsModelNew := new(appidmanagementv4.UpdateRateLimitConfigOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UpdateRateLimitConfig(updateRateLimitConfigOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFacebookIDP(getFacebookIDPOptions *GetFacebookIDPOptions) - Operation response error`, func() {
		getFacebookIDPPath := "/management/v4/testString/config/idps/facebook"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFacebookIDPPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFacebookIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetFacebookIDPOptions model
				getFacebookIDPOptionsModel := new(appidmanagementv4.GetFacebookIDPOptions)
				getFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				getFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFacebookIDP(getFacebookIDPOptions *GetFacebookIDPOptions)`, func() {
		getFacebookIDPPath := "/management/v4/testString/config/idps/facebook"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFacebookIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke GetFacebookIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetFacebookIDPOptions model
				getFacebookIDPOptionsModel := new(appidmanagementv4.GetFacebookIDPOptions)
				getFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				getFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetFacebookIDPWithContext(ctx, getFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetFacebookIDPWithContext(ctx, getFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFacebookIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke GetFacebookIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetFacebookIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFacebookIDPOptions model
				getFacebookIDPOptionsModel := new(appidmanagementv4.GetFacebookIDPOptions)
				getFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				getFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFacebookIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetFacebookIDPOptions model
				getFacebookIDPOptionsModel := new(appidmanagementv4.GetFacebookIDPOptions)
				getFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				getFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFacebookIDPOptions model with no property values
				getFacebookIDPOptionsModelNew := new(appidmanagementv4.GetFacebookIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetFacebookIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetFacebookIDPOptions model
				getFacebookIDPOptionsModel := new(appidmanagementv4.GetFacebookIDPOptions)
				getFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				getFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetFacebookIDP(getFacebookIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetFacebookIDP(setFacebookIDPOptions *SetFacebookIDPOptions) - Operation response error`, func() {
		setFacebookIDPPath := "/management/v4/testString/config/idps/facebook"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setFacebookIDPPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetFacebookIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetFacebookIDPOptions model
				setFacebookIDPOptionsModel := new(appidmanagementv4.SetFacebookIDPOptions)
				setFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				setFacebookIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetFacebookIDP(setFacebookIDPOptions *SetFacebookIDPOptions)`, func() {
		setFacebookIDPPath := "/management/v4/testString/config/idps/facebook"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setFacebookIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke SetFacebookIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetFacebookIDPOptions model
				setFacebookIDPOptionsModel := new(appidmanagementv4.SetFacebookIDPOptions)
				setFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				setFacebookIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetFacebookIDPWithContext(ctx, setFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetFacebookIDPWithContext(ctx, setFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setFacebookIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke SetFacebookIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetFacebookIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetFacebookIDPOptions model
				setFacebookIDPOptionsModel := new(appidmanagementv4.SetFacebookIDPOptions)
				setFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				setFacebookIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetFacebookIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetFacebookIDPOptions model
				setFacebookIDPOptionsModel := new(appidmanagementv4.SetFacebookIDPOptions)
				setFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				setFacebookIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetFacebookIDPOptions model with no property values
				setFacebookIDPOptionsModelNew := new(appidmanagementv4.SetFacebookIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetFacebookIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetFacebookIDPOptions model
				setFacebookIDPOptionsModel := new(appidmanagementv4.SetFacebookIDPOptions)
				setFacebookIDPOptionsModel.TenantID = core.StringPtr("testString")
				setFacebookIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setFacebookIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetFacebookIDP(setFacebookIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGoogleIDP(getGoogleIDPOptions *GetGoogleIDPOptions) - Operation response error`, func() {
		getGoogleIDPPath := "/management/v4/testString/config/idps/google"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGoogleIDPPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetGoogleIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetGoogleIDPOptions model
				getGoogleIDPOptionsModel := new(appidmanagementv4.GetGoogleIDPOptions)
				getGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				getGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetGoogleIDP(getGoogleIDPOptions *GetGoogleIDPOptions)`, func() {
		getGoogleIDPPath := "/management/v4/testString/config/idps/google"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGoogleIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke GetGoogleIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetGoogleIDPOptions model
				getGoogleIDPOptionsModel := new(appidmanagementv4.GetGoogleIDPOptions)
				getGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				getGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetGoogleIDPWithContext(ctx, getGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetGoogleIDPWithContext(ctx, getGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getGoogleIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke GetGoogleIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetGoogleIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetGoogleIDPOptions model
				getGoogleIDPOptionsModel := new(appidmanagementv4.GetGoogleIDPOptions)
				getGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				getGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetGoogleIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetGoogleIDPOptions model
				getGoogleIDPOptionsModel := new(appidmanagementv4.GetGoogleIDPOptions)
				getGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				getGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetGoogleIDPOptions model with no property values
				getGoogleIDPOptionsModelNew := new(appidmanagementv4.GetGoogleIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetGoogleIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetGoogleIDPOptions model
				getGoogleIDPOptionsModel := new(appidmanagementv4.GetGoogleIDPOptions)
				getGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				getGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetGoogleIDP(getGoogleIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetGoogleIDP(setGoogleIDPOptions *SetGoogleIDPOptions) - Operation response error`, func() {
		setGoogleIDPPath := "/management/v4/testString/config/idps/google"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setGoogleIDPPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetGoogleIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetGoogleIDPOptions model
				setGoogleIDPOptionsModel := new(appidmanagementv4.SetGoogleIDPOptions)
				setGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				setGoogleIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetGoogleIDP(setGoogleIDPOptions *SetGoogleIDPOptions)`, func() {
		setGoogleIDPPath := "/management/v4/testString/config/idps/google"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setGoogleIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke SetGoogleIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetGoogleIDPOptions model
				setGoogleIDPOptionsModel := new(appidmanagementv4.SetGoogleIDPOptions)
				setGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				setGoogleIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetGoogleIDPWithContext(ctx, setGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetGoogleIDPWithContext(ctx, setGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setGoogleIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"idpId": "IDPID", "secret": "Secret"}}`)
				}))
			})
			It(`Invoke SetGoogleIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetGoogleIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetGoogleIDPOptions model
				setGoogleIDPOptionsModel := new(appidmanagementv4.SetGoogleIDPOptions)
				setGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				setGoogleIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetGoogleIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetGoogleIDPOptions model
				setGoogleIDPOptionsModel := new(appidmanagementv4.SetGoogleIDPOptions)
				setGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				setGoogleIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetGoogleIDPOptions model with no property values
				setGoogleIDPOptionsModelNew := new(appidmanagementv4.SetGoogleIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetGoogleIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetGoogleIDPOptions model
				setGoogleIDPOptionsModel := new(appidmanagementv4.SetGoogleIDPOptions)
				setGoogleIDPOptionsModel.TenantID = core.StringPtr("testString")
				setGoogleIDPOptionsModel.IDP = facebookGoogleConfigParamsModel
				setGoogleIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetGoogleIDP(setGoogleIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCustomIDP(getCustomIDPOptions *GetCustomIDPOptions) - Operation response error`, func() {
		getCustomIDPPath := "/management/v4/testString/config/idps/custom"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCustomIDPPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCustomIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCustomIDPOptions model
				getCustomIDPOptionsModel := new(appidmanagementv4.GetCustomIDPOptions)
				getCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCustomIDP(getCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCustomIDP(getCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCustomIDP(getCustomIDPOptions *GetCustomIDPOptions)`, func() {
		getCustomIDPPath := "/management/v4/testString/config/idps/custom"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCustomIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"publicKey": "PublicKey"}}`)
				}))
			})
			It(`Invoke GetCustomIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCustomIDPOptions model
				getCustomIDPOptionsModel := new(appidmanagementv4.GetCustomIDPOptions)
				getCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCustomIDPWithContext(ctx, getCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCustomIDP(getCustomIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCustomIDPWithContext(ctx, getCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCustomIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"publicKey": "PublicKey"}}`)
				}))
			})
			It(`Invoke GetCustomIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCustomIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCustomIDPOptions model
				getCustomIDPOptionsModel := new(appidmanagementv4.GetCustomIDPOptions)
				getCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCustomIDP(getCustomIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCustomIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCustomIDPOptions model
				getCustomIDPOptionsModel := new(appidmanagementv4.GetCustomIDPOptions)
				getCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCustomIDP(getCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCustomIDPOptions model with no property values
				getCustomIDPOptionsModelNew := new(appidmanagementv4.GetCustomIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCustomIDP(getCustomIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCustomIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCustomIDPOptions model
				getCustomIDPOptionsModel := new(appidmanagementv4.GetCustomIDPOptions)
				getCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCustomIDP(getCustomIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCustomIDP(setCustomIDPOptions *SetCustomIDPOptions) - Operation response error`, func() {
		setCustomIDPPath := "/management/v4/testString/config/idps/custom"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCustomIDPPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetCustomIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CustomIDPConfigParamsConfig model
				customIDPConfigParamsConfigModel := new(appidmanagementv4.CustomIDPConfigParamsConfig)
				customIDPConfigParamsConfigModel.PublicKey = core.StringPtr("testString")

				// Construct an instance of the SetCustomIDPOptions model
				setCustomIDPOptionsModel := new(appidmanagementv4.SetCustomIDPOptions)
				setCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCustomIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCustomIDPOptionsModel.Config = customIDPConfigParamsConfigModel
				setCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetCustomIDP(setCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetCustomIDP(setCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCustomIDP(setCustomIDPOptions *SetCustomIDPOptions)`, func() {
		setCustomIDPPath := "/management/v4/testString/config/idps/custom"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCustomIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"publicKey": "PublicKey"}}`)
				}))
			})
			It(`Invoke SetCustomIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the CustomIDPConfigParamsConfig model
				customIDPConfigParamsConfigModel := new(appidmanagementv4.CustomIDPConfigParamsConfig)
				customIDPConfigParamsConfigModel.PublicKey = core.StringPtr("testString")

				// Construct an instance of the SetCustomIDPOptions model
				setCustomIDPOptionsModel := new(appidmanagementv4.SetCustomIDPOptions)
				setCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCustomIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCustomIDPOptionsModel.Config = customIDPConfigParamsConfigModel
				setCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetCustomIDPWithContext(ctx, setCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetCustomIDP(setCustomIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetCustomIDPWithContext(ctx, setCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCustomIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"publicKey": "PublicKey"}}`)
				}))
			})
			It(`Invoke SetCustomIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetCustomIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CustomIDPConfigParamsConfig model
				customIDPConfigParamsConfigModel := new(appidmanagementv4.CustomIDPConfigParamsConfig)
				customIDPConfigParamsConfigModel.PublicKey = core.StringPtr("testString")

				// Construct an instance of the SetCustomIDPOptions model
				setCustomIDPOptionsModel := new(appidmanagementv4.SetCustomIDPOptions)
				setCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCustomIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCustomIDPOptionsModel.Config = customIDPConfigParamsConfigModel
				setCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetCustomIDP(setCustomIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetCustomIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CustomIDPConfigParamsConfig model
				customIDPConfigParamsConfigModel := new(appidmanagementv4.CustomIDPConfigParamsConfig)
				customIDPConfigParamsConfigModel.PublicKey = core.StringPtr("testString")

				// Construct an instance of the SetCustomIDPOptions model
				setCustomIDPOptionsModel := new(appidmanagementv4.SetCustomIDPOptions)
				setCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCustomIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCustomIDPOptionsModel.Config = customIDPConfigParamsConfigModel
				setCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetCustomIDP(setCustomIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetCustomIDPOptions model with no property values
				setCustomIDPOptionsModelNew := new(appidmanagementv4.SetCustomIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetCustomIDP(setCustomIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetCustomIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CustomIDPConfigParamsConfig model
				customIDPConfigParamsConfigModel := new(appidmanagementv4.CustomIDPConfigParamsConfig)
				customIDPConfigParamsConfigModel.PublicKey = core.StringPtr("testString")

				// Construct an instance of the SetCustomIDPOptions model
				setCustomIDPOptionsModel := new(appidmanagementv4.SetCustomIDPOptions)
				setCustomIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCustomIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCustomIDPOptionsModel.Config = customIDPConfigParamsConfigModel
				setCustomIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetCustomIDP(setCustomIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryIDP(getCloudDirectoryIDPOptions *GetCloudDirectoryIDPOptions) - Operation response error`, func() {
		getCloudDirectoryIDPPath := "/management/v4/testString/config/idps/cloud_directory"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryIDPPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCloudDirectoryIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryIDPOptions model
				getCloudDirectoryIDPOptionsModel := new(appidmanagementv4.GetCloudDirectoryIDPOptions)
				getCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCloudDirectoryIDP(getCloudDirectoryIDPOptions *GetCloudDirectoryIDPOptions)`, func() {
		getCloudDirectoryIDPPath := "/management/v4/testString/config/idps/cloud_directory"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"selfServiceEnabled": true, "signupEnabled": true, "interactions": {"identityConfirmation": {"accessMode": "FULL", "methods": ["email"]}, "welcomeEnabled": false, "resetPasswordEnabled": false, "resetPasswordNotificationEnable": true}, "identityField": "email"}}`)
				}))
			})
			It(`Invoke GetCloudDirectoryIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetCloudDirectoryIDPOptions model
				getCloudDirectoryIDPOptionsModel := new(appidmanagementv4.GetCloudDirectoryIDPOptions)
				getCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetCloudDirectoryIDPWithContext(ctx, getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetCloudDirectoryIDPWithContext(ctx, getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCloudDirectoryIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"selfServiceEnabled": true, "signupEnabled": true, "interactions": {"identityConfirmation": {"accessMode": "FULL", "methods": ["email"]}, "welcomeEnabled": false, "resetPasswordEnabled": false, "resetPasswordNotificationEnable": true}, "identityField": "email"}}`)
				}))
			})
			It(`Invoke GetCloudDirectoryIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetCloudDirectoryIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCloudDirectoryIDPOptions model
				getCloudDirectoryIDPOptionsModel := new(appidmanagementv4.GetCloudDirectoryIDPOptions)
				getCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCloudDirectoryIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryIDPOptions model
				getCloudDirectoryIDPOptionsModel := new(appidmanagementv4.GetCloudDirectoryIDPOptions)
				getCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetCloudDirectoryIDPOptions model with no property values
				getCloudDirectoryIDPOptionsModelNew := new(appidmanagementv4.GetCloudDirectoryIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCloudDirectoryIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetCloudDirectoryIDPOptions model
				getCloudDirectoryIDPOptionsModel := new(appidmanagementv4.GetCloudDirectoryIDPOptions)
				getCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				getCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetCloudDirectoryIDP(getCloudDirectoryIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryIDP(setCloudDirectoryIDPOptions *SetCloudDirectoryIDPOptions) - Operation response error`, func() {
		setCloudDirectoryIDPPath := "/management/v4/testString/config/idps/cloud_directory"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryIDPPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetCloudDirectoryIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryConfigParamsInteractionsIdentityConfirmation model
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation)
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode = core.StringPtr("FULL")
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods = []string{"email"}

				// Construct an instance of the CloudDirectoryConfigParamsInteractions model
				cloudDirectoryConfigParamsInteractionsModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractions)
				cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation = cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel
				cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable = core.BoolPtr(true)

				// Construct an instance of the CloudDirectoryConfigParams model
				cloudDirectoryConfigParamsModel := new(appidmanagementv4.CloudDirectoryConfigParams)
				cloudDirectoryConfigParamsModel.SelfServiceEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.SignupEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.Interactions = cloudDirectoryConfigParamsInteractionsModel
				cloudDirectoryConfigParamsModel.IdentityField = core.StringPtr("email")

				// Construct an instance of the SetCloudDirectoryIDPOptions model
				setCloudDirectoryIDPOptionsModel := new(appidmanagementv4.SetCloudDirectoryIDPOptions)
				setCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCloudDirectoryIDPOptionsModel.Config = cloudDirectoryConfigParamsModel
				setCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetCloudDirectoryIDP(setCloudDirectoryIDPOptions *SetCloudDirectoryIDPOptions)`, func() {
		setCloudDirectoryIDPPath := "/management/v4/testString/config/idps/cloud_directory"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"selfServiceEnabled": true, "signupEnabled": true, "interactions": {"identityConfirmation": {"accessMode": "FULL", "methods": ["email"]}, "welcomeEnabled": false, "resetPasswordEnabled": false, "resetPasswordNotificationEnable": true}, "identityField": "email"}}`)
				}))
			})
			It(`Invoke SetCloudDirectoryIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the CloudDirectoryConfigParamsInteractionsIdentityConfirmation model
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation)
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode = core.StringPtr("FULL")
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods = []string{"email"}

				// Construct an instance of the CloudDirectoryConfigParamsInteractions model
				cloudDirectoryConfigParamsInteractionsModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractions)
				cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation = cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel
				cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable = core.BoolPtr(true)

				// Construct an instance of the CloudDirectoryConfigParams model
				cloudDirectoryConfigParamsModel := new(appidmanagementv4.CloudDirectoryConfigParams)
				cloudDirectoryConfigParamsModel.SelfServiceEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.SignupEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.Interactions = cloudDirectoryConfigParamsInteractionsModel
				cloudDirectoryConfigParamsModel.IdentityField = core.StringPtr("email")

				// Construct an instance of the SetCloudDirectoryIDPOptions model
				setCloudDirectoryIDPOptionsModel := new(appidmanagementv4.SetCloudDirectoryIDPOptions)
				setCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCloudDirectoryIDPOptionsModel.Config = cloudDirectoryConfigParamsModel
				setCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetCloudDirectoryIDPWithContext(ctx, setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetCloudDirectoryIDPWithContext(ctx, setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setCloudDirectoryIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"selfServiceEnabled": true, "signupEnabled": true, "interactions": {"identityConfirmation": {"accessMode": "FULL", "methods": ["email"]}, "welcomeEnabled": false, "resetPasswordEnabled": false, "resetPasswordNotificationEnable": true}, "identityField": "email"}}`)
				}))
			})
			It(`Invoke SetCloudDirectoryIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetCloudDirectoryIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudDirectoryConfigParamsInteractionsIdentityConfirmation model
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation)
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode = core.StringPtr("FULL")
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods = []string{"email"}

				// Construct an instance of the CloudDirectoryConfigParamsInteractions model
				cloudDirectoryConfigParamsInteractionsModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractions)
				cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation = cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel
				cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable = core.BoolPtr(true)

				// Construct an instance of the CloudDirectoryConfigParams model
				cloudDirectoryConfigParamsModel := new(appidmanagementv4.CloudDirectoryConfigParams)
				cloudDirectoryConfigParamsModel.SelfServiceEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.SignupEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.Interactions = cloudDirectoryConfigParamsInteractionsModel
				cloudDirectoryConfigParamsModel.IdentityField = core.StringPtr("email")

				// Construct an instance of the SetCloudDirectoryIDPOptions model
				setCloudDirectoryIDPOptionsModel := new(appidmanagementv4.SetCloudDirectoryIDPOptions)
				setCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCloudDirectoryIDPOptionsModel.Config = cloudDirectoryConfigParamsModel
				setCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetCloudDirectoryIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryConfigParamsInteractionsIdentityConfirmation model
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation)
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode = core.StringPtr("FULL")
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods = []string{"email"}

				// Construct an instance of the CloudDirectoryConfigParamsInteractions model
				cloudDirectoryConfigParamsInteractionsModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractions)
				cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation = cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel
				cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable = core.BoolPtr(true)

				// Construct an instance of the CloudDirectoryConfigParams model
				cloudDirectoryConfigParamsModel := new(appidmanagementv4.CloudDirectoryConfigParams)
				cloudDirectoryConfigParamsModel.SelfServiceEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.SignupEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.Interactions = cloudDirectoryConfigParamsInteractionsModel
				cloudDirectoryConfigParamsModel.IdentityField = core.StringPtr("email")

				// Construct an instance of the SetCloudDirectoryIDPOptions model
				setCloudDirectoryIDPOptionsModel := new(appidmanagementv4.SetCloudDirectoryIDPOptions)
				setCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCloudDirectoryIDPOptionsModel.Config = cloudDirectoryConfigParamsModel
				setCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetCloudDirectoryIDPOptions model with no property values
				setCloudDirectoryIDPOptionsModelNew := new(appidmanagementv4.SetCloudDirectoryIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetCloudDirectoryIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the CloudDirectoryConfigParamsInteractionsIdentityConfirmation model
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation)
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode = core.StringPtr("FULL")
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods = []string{"email"}

				// Construct an instance of the CloudDirectoryConfigParamsInteractions model
				cloudDirectoryConfigParamsInteractionsModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractions)
				cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation = cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel
				cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable = core.BoolPtr(true)

				// Construct an instance of the CloudDirectoryConfigParams model
				cloudDirectoryConfigParamsModel := new(appidmanagementv4.CloudDirectoryConfigParams)
				cloudDirectoryConfigParamsModel.SelfServiceEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.SignupEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.Interactions = cloudDirectoryConfigParamsInteractionsModel
				cloudDirectoryConfigParamsModel.IdentityField = core.StringPtr("email")

				// Construct an instance of the SetCloudDirectoryIDPOptions model
				setCloudDirectoryIDPOptionsModel := new(appidmanagementv4.SetCloudDirectoryIDPOptions)
				setCloudDirectoryIDPOptionsModel.TenantID = core.StringPtr("testString")
				setCloudDirectoryIDPOptionsModel.IsActive = core.BoolPtr(true)
				setCloudDirectoryIDPOptionsModel.Config = cloudDirectoryConfigParamsModel
				setCloudDirectoryIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetCloudDirectoryIDP(setCloudDirectoryIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSAMLIDP(getSAMLIDPOptions *GetSAMLIDPOptions) - Operation response error`, func() {
		getSAMLIDPPath := "/management/v4/testString/config/idps/saml"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSAMLIDPPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSAMLIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetSAMLIDPOptions model
				getSAMLIDPOptionsModel := new(appidmanagementv4.GetSAMLIDPOptions)
				getSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSAMLIDP(getSAMLIDPOptions *GetSAMLIDPOptions)`, func() {
		getSAMLIDPPath := "/management/v4/testString/config/idps/saml"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSAMLIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"entityID": "EntityID", "signInUrl": "SignInURL", "certificates": ["Certificates"], "displayName": "DisplayName", "authnContext": {"class": ["urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"], "comparison": "exact"}, "signRequest": false, "encryptResponse": false, "includeScoping": false}}`)
				}))
			})
			It(`Invoke GetSAMLIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetSAMLIDPOptions model
				getSAMLIDPOptionsModel := new(appidmanagementv4.GetSAMLIDPOptions)
				getSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetSAMLIDPWithContext(ctx, getSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetSAMLIDPWithContext(ctx, getSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSAMLIDPPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"entityID": "EntityID", "signInUrl": "SignInURL", "certificates": ["Certificates"], "displayName": "DisplayName", "authnContext": {"class": ["urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"], "comparison": "exact"}, "signRequest": false, "encryptResponse": false, "includeScoping": false}}`)
				}))
			})
			It(`Invoke GetSAMLIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetSAMLIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSAMLIDPOptions model
				getSAMLIDPOptionsModel := new(appidmanagementv4.GetSAMLIDPOptions)
				getSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSAMLIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetSAMLIDPOptions model
				getSAMLIDPOptionsModel := new(appidmanagementv4.GetSAMLIDPOptions)
				getSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSAMLIDPOptions model with no property values
				getSAMLIDPOptionsModelNew := new(appidmanagementv4.GetSAMLIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSAMLIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetSAMLIDPOptions model
				getSAMLIDPOptionsModel := new(appidmanagementv4.GetSAMLIDPOptions)
				getSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				getSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetSAMLIDP(getSAMLIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSAMLIDP(setSAMLIDPOptions *SetSAMLIDPOptions) - Operation response error`, func() {
		setSAMLIDPPath := "/management/v4/testString/config/idps/saml"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setSAMLIDPPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetSAMLIDP with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SAMLConfigParamsAuthnContext model
				samlConfigParamsAuthnContextModel := new(appidmanagementv4.SAMLConfigParamsAuthnContext)
				samlConfigParamsAuthnContextModel.Class = []string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}
				samlConfigParamsAuthnContextModel.Comparison = core.StringPtr("exact")

				// Construct an instance of the SAMLConfigParams model
				samlConfigParamsModel := new(appidmanagementv4.SAMLConfigParams)
				samlConfigParamsModel.EntityID = core.StringPtr("testString")
				samlConfigParamsModel.SignInURL = core.StringPtr("testString")
				samlConfigParamsModel.Certificates = []string{"testString"}
				samlConfigParamsModel.DisplayName = core.StringPtr("testString")
				samlConfigParamsModel.AuthnContext = samlConfigParamsAuthnContextModel
				samlConfigParamsModel.SignRequest = core.BoolPtr(false)
				samlConfigParamsModel.EncryptResponse = core.BoolPtr(false)
				samlConfigParamsModel.IncludeScoping = core.BoolPtr(false)
				samlConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetSAMLIDPOptions model
				setSAMLIDPOptionsModel := new(appidmanagementv4.SetSAMLIDPOptions)
				setSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				setSAMLIDPOptionsModel.IsActive = core.BoolPtr(true)
				setSAMLIDPOptionsModel.Config = samlConfigParamsModel
				setSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSAMLIDP(setSAMLIDPOptions *SetSAMLIDPOptions)`, func() {
		setSAMLIDPPath := "/management/v4/testString/config/idps/saml"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setSAMLIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"entityID": "EntityID", "signInUrl": "SignInURL", "certificates": ["Certificates"], "displayName": "DisplayName", "authnContext": {"class": ["urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"], "comparison": "exact"}, "signRequest": false, "encryptResponse": false, "includeScoping": false}, "validation_data": {"certificates": [{"certificate_index": 16, "expiration_timestamp": 19, "warning": "Warning"}]}}`)
				}))
			})
			It(`Invoke SetSAMLIDP successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the SAMLConfigParamsAuthnContext model
				samlConfigParamsAuthnContextModel := new(appidmanagementv4.SAMLConfigParamsAuthnContext)
				samlConfigParamsAuthnContextModel.Class = []string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}
				samlConfigParamsAuthnContextModel.Comparison = core.StringPtr("exact")

				// Construct an instance of the SAMLConfigParams model
				samlConfigParamsModel := new(appidmanagementv4.SAMLConfigParams)
				samlConfigParamsModel.EntityID = core.StringPtr("testString")
				samlConfigParamsModel.SignInURL = core.StringPtr("testString")
				samlConfigParamsModel.Certificates = []string{"testString"}
				samlConfigParamsModel.DisplayName = core.StringPtr("testString")
				samlConfigParamsModel.AuthnContext = samlConfigParamsAuthnContextModel
				samlConfigParamsModel.SignRequest = core.BoolPtr(false)
				samlConfigParamsModel.EncryptResponse = core.BoolPtr(false)
				samlConfigParamsModel.IncludeScoping = core.BoolPtr(false)
				samlConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetSAMLIDPOptions model
				setSAMLIDPOptionsModel := new(appidmanagementv4.SetSAMLIDPOptions)
				setSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				setSAMLIDPOptionsModel.IsActive = core.BoolPtr(true)
				setSAMLIDPOptionsModel.Config = samlConfigParamsModel
				setSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.SetSAMLIDPWithContext(ctx, setSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.SetSAMLIDPWithContext(ctx, setSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setSAMLIDPPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"isActive": true, "config": {"entityID": "EntityID", "signInUrl": "SignInURL", "certificates": ["Certificates"], "displayName": "DisplayName", "authnContext": {"class": ["urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"], "comparison": "exact"}, "signRequest": false, "encryptResponse": false, "includeScoping": false}, "validation_data": {"certificates": [{"certificate_index": 16, "expiration_timestamp": 19, "warning": "Warning"}]}}`)
				}))
			})
			It(`Invoke SetSAMLIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.SetSAMLIDP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SAMLConfigParamsAuthnContext model
				samlConfigParamsAuthnContextModel := new(appidmanagementv4.SAMLConfigParamsAuthnContext)
				samlConfigParamsAuthnContextModel.Class = []string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}
				samlConfigParamsAuthnContextModel.Comparison = core.StringPtr("exact")

				// Construct an instance of the SAMLConfigParams model
				samlConfigParamsModel := new(appidmanagementv4.SAMLConfigParams)
				samlConfigParamsModel.EntityID = core.StringPtr("testString")
				samlConfigParamsModel.SignInURL = core.StringPtr("testString")
				samlConfigParamsModel.Certificates = []string{"testString"}
				samlConfigParamsModel.DisplayName = core.StringPtr("testString")
				samlConfigParamsModel.AuthnContext = samlConfigParamsAuthnContextModel
				samlConfigParamsModel.SignRequest = core.BoolPtr(false)
				samlConfigParamsModel.EncryptResponse = core.BoolPtr(false)
				samlConfigParamsModel.IncludeScoping = core.BoolPtr(false)
				samlConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetSAMLIDPOptions model
				setSAMLIDPOptionsModel := new(appidmanagementv4.SetSAMLIDPOptions)
				setSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				setSAMLIDPOptionsModel.IsActive = core.BoolPtr(true)
				setSAMLIDPOptionsModel.Config = samlConfigParamsModel
				setSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetSAMLIDP with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SAMLConfigParamsAuthnContext model
				samlConfigParamsAuthnContextModel := new(appidmanagementv4.SAMLConfigParamsAuthnContext)
				samlConfigParamsAuthnContextModel.Class = []string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}
				samlConfigParamsAuthnContextModel.Comparison = core.StringPtr("exact")

				// Construct an instance of the SAMLConfigParams model
				samlConfigParamsModel := new(appidmanagementv4.SAMLConfigParams)
				samlConfigParamsModel.EntityID = core.StringPtr("testString")
				samlConfigParamsModel.SignInURL = core.StringPtr("testString")
				samlConfigParamsModel.Certificates = []string{"testString"}
				samlConfigParamsModel.DisplayName = core.StringPtr("testString")
				samlConfigParamsModel.AuthnContext = samlConfigParamsAuthnContextModel
				samlConfigParamsModel.SignRequest = core.BoolPtr(false)
				samlConfigParamsModel.EncryptResponse = core.BoolPtr(false)
				samlConfigParamsModel.IncludeScoping = core.BoolPtr(false)
				samlConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetSAMLIDPOptions model
				setSAMLIDPOptionsModel := new(appidmanagementv4.SetSAMLIDPOptions)
				setSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				setSAMLIDPOptionsModel.IsActive = core.BoolPtr(true)
				setSAMLIDPOptionsModel.Config = samlConfigParamsModel
				setSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetSAMLIDPOptions model with no property values
				setSAMLIDPOptionsModelNew := new(appidmanagementv4.SetSAMLIDPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke SetSAMLIDP successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the SAMLConfigParamsAuthnContext model
				samlConfigParamsAuthnContextModel := new(appidmanagementv4.SAMLConfigParamsAuthnContext)
				samlConfigParamsAuthnContextModel.Class = []string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}
				samlConfigParamsAuthnContextModel.Comparison = core.StringPtr("exact")

				// Construct an instance of the SAMLConfigParams model
				samlConfigParamsModel := new(appidmanagementv4.SAMLConfigParams)
				samlConfigParamsModel.EntityID = core.StringPtr("testString")
				samlConfigParamsModel.SignInURL = core.StringPtr("testString")
				samlConfigParamsModel.Certificates = []string{"testString"}
				samlConfigParamsModel.DisplayName = core.StringPtr("testString")
				samlConfigParamsModel.AuthnContext = samlConfigParamsAuthnContextModel
				samlConfigParamsModel.SignRequest = core.BoolPtr(false)
				samlConfigParamsModel.EncryptResponse = core.BoolPtr(false)
				samlConfigParamsModel.IncludeScoping = core.BoolPtr(false)
				samlConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the SetSAMLIDPOptions model
				setSAMLIDPOptionsModel := new(appidmanagementv4.SetSAMLIDPOptions)
				setSAMLIDPOptionsModel.TenantID = core.StringPtr("testString")
				setSAMLIDPOptionsModel.IsActive = core.BoolPtr(true)
				setSAMLIDPOptionsModel.Config = samlConfigParamsModel
				setSAMLIDPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.SetSAMLIDP(setSAMLIDPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRoles(listRolesOptions *ListRolesOptions) - Operation response error`, func() {
		listRolesPath := "/management/v4/testString/roles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRolesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRoles with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListRolesOptions model
				listRolesOptionsModel := new(appidmanagementv4.ListRolesOptions)
				listRolesOptionsModel.TenantID = core.StringPtr("testString")
				listRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.ListRoles(listRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.ListRoles(listRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRoles(listRolesOptions *ListRolesOptions)`, func() {
		listRolesPath := "/management/v4/testString/roles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRolesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "12345678-1234-1234-1234-123456789012", "name": "adult", "description": "No movie retrictions in place.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}]}`)
				}))
			})
			It(`Invoke ListRoles successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ListRolesOptions model
				listRolesOptionsModel := new(appidmanagementv4.ListRolesOptions)
				listRolesOptionsModel.TenantID = core.StringPtr("testString")
				listRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.ListRolesWithContext(ctx, listRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.ListRoles(listRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.ListRolesWithContext(ctx, listRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRolesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "12345678-1234-1234-1234-123456789012", "name": "adult", "description": "No movie retrictions in place.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}]}`)
				}))
			})
			It(`Invoke ListRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.ListRoles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRolesOptions model
				listRolesOptionsModel := new(appidmanagementv4.ListRolesOptions)
				listRolesOptionsModel.TenantID = core.StringPtr("testString")
				listRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.ListRoles(listRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListRoles with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListRolesOptions model
				listRolesOptionsModel := new(appidmanagementv4.ListRolesOptions)
				listRolesOptionsModel.TenantID = core.StringPtr("testString")
				listRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.ListRoles(listRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListRolesOptions model with no property values
				listRolesOptionsModelNew := new(appidmanagementv4.ListRolesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.ListRoles(listRolesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ListRolesOptions model
				listRolesOptionsModel := new(appidmanagementv4.ListRolesOptions)
				listRolesOptionsModel.TenantID = core.StringPtr("testString")
				listRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.ListRoles(listRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRole(createRoleOptions *CreateRoleOptions) - Operation response error`, func() {
		createRolePath := "/management/v4/testString/roles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRolePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateRole with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the CreateRoleOptions model
				createRoleOptionsModel := new(appidmanagementv4.CreateRoleOptions)
				createRoleOptionsModel.TenantID = core.StringPtr("testString")
				createRoleOptionsModel.Name = core.StringPtr("child")
				createRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				createRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				createRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.CreateRole(createRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.CreateRole(createRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRole(createRoleOptions *CreateRoleOptions)`, func() {
		createRolePath := "/management/v4/testString/roles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRolePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "12345678-1234-1234-1234-123456789013", "name": "child", "description": "Limits the available movie options to those that might be more appropriate for younger viewers.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}`)
				}))
			})
			It(`Invoke CreateRole successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the CreateRoleOptions model
				createRoleOptionsModel := new(appidmanagementv4.CreateRoleOptions)
				createRoleOptionsModel.TenantID = core.StringPtr("testString")
				createRoleOptionsModel.Name = core.StringPtr("child")
				createRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				createRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				createRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.CreateRoleWithContext(ctx, createRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.CreateRole(createRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.CreateRoleWithContext(ctx, createRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRolePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "12345678-1234-1234-1234-123456789013", "name": "child", "description": "Limits the available movie options to those that might be more appropriate for younger viewers.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}`)
				}))
			})
			It(`Invoke CreateRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.CreateRole(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the CreateRoleOptions model
				createRoleOptionsModel := new(appidmanagementv4.CreateRoleOptions)
				createRoleOptionsModel.TenantID = core.StringPtr("testString")
				createRoleOptionsModel.Name = core.StringPtr("child")
				createRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				createRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				createRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.CreateRole(createRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateRole with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the CreateRoleOptions model
				createRoleOptionsModel := new(appidmanagementv4.CreateRoleOptions)
				createRoleOptionsModel.TenantID = core.StringPtr("testString")
				createRoleOptionsModel.Name = core.StringPtr("child")
				createRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				createRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				createRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.CreateRole(createRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateRoleOptions model with no property values
				createRoleOptionsModelNew := new(appidmanagementv4.CreateRoleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.CreateRole(createRoleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the CreateRoleOptions model
				createRoleOptionsModel := new(appidmanagementv4.CreateRoleOptions)
				createRoleOptionsModel.TenantID = core.StringPtr("testString")
				createRoleOptionsModel.Name = core.StringPtr("child")
				createRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				createRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				createRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.CreateRole(createRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRole(getRoleOptions *GetRoleOptions) - Operation response error`, func() {
		getRolePath := "/management/v4/testString/roles/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRolePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRole with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRoleOptions model
				getRoleOptionsModel := new(appidmanagementv4.GetRoleOptions)
				getRoleOptionsModel.TenantID = core.StringPtr("testString")
				getRoleOptionsModel.RoleID = core.StringPtr("testString")
				getRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetRole(getRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetRole(getRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRole(getRoleOptions *GetRoleOptions)`, func() {
		getRolePath := "/management/v4/testString/roles/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRolePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "12345678-1234-1234-1234-123456789012", "name": "adult", "description": "No movie retrictions in place.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}`)
				}))
			})
			It(`Invoke GetRole successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetRoleOptions model
				getRoleOptionsModel := new(appidmanagementv4.GetRoleOptions)
				getRoleOptionsModel.TenantID = core.StringPtr("testString")
				getRoleOptionsModel.RoleID = core.StringPtr("testString")
				getRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetRoleWithContext(ctx, getRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetRole(getRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetRoleWithContext(ctx, getRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRolePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "12345678-1234-1234-1234-123456789012", "name": "adult", "description": "No movie retrictions in place.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}`)
				}))
			})
			It(`Invoke GetRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetRole(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRoleOptions model
				getRoleOptionsModel := new(appidmanagementv4.GetRoleOptions)
				getRoleOptionsModel.TenantID = core.StringPtr("testString")
				getRoleOptionsModel.RoleID = core.StringPtr("testString")
				getRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetRole(getRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRole with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRoleOptions model
				getRoleOptionsModel := new(appidmanagementv4.GetRoleOptions)
				getRoleOptionsModel.TenantID = core.StringPtr("testString")
				getRoleOptionsModel.RoleID = core.StringPtr("testString")
				getRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetRole(getRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRoleOptions model with no property values
				getRoleOptionsModelNew := new(appidmanagementv4.GetRoleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetRole(getRoleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetRoleOptions model
				getRoleOptionsModel := new(appidmanagementv4.GetRoleOptions)
				getRoleOptionsModel.TenantID = core.StringPtr("testString")
				getRoleOptionsModel.RoleID = core.StringPtr("testString")
				getRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetRole(getRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateRole(updateRoleOptions *UpdateRoleOptions) - Operation response error`, func() {
		updateRolePath := "/management/v4/testString/roles/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRolePath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateRole with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the UpdateRoleOptions model
				updateRoleOptionsModel := new(appidmanagementv4.UpdateRoleOptions)
				updateRoleOptionsModel.TenantID = core.StringPtr("testString")
				updateRoleOptionsModel.RoleID = core.StringPtr("testString")
				updateRoleOptionsModel.Name = core.StringPtr("child")
				updateRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				updateRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				updateRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateRole(updateRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateRole(updateRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateRole(updateRoleOptions *UpdateRoleOptions)`, func() {
		updateRolePath := "/management/v4/testString/roles/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRolePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "12345678-1234-1234-1234-123456789013", "name": "child", "description": "Limits the available movie options to those that might be more appropriate for younger viewers.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}`)
				}))
			})
			It(`Invoke UpdateRole successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the UpdateRoleOptions model
				updateRoleOptionsModel := new(appidmanagementv4.UpdateRoleOptions)
				updateRoleOptionsModel.TenantID = core.StringPtr("testString")
				updateRoleOptionsModel.RoleID = core.StringPtr("testString")
				updateRoleOptionsModel.Name = core.StringPtr("child")
				updateRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				updateRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				updateRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateRoleWithContext(ctx, updateRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateRole(updateRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateRoleWithContext(ctx, updateRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRolePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "12345678-1234-1234-1234-123456789013", "name": "child", "description": "Limits the available movie options to those that might be more appropriate for younger viewers.", "access": [{"application_id": "de33d272-f8a7-4406-8fe8-ab28fd457be5", "scopes": ["Scopes"]}]}`)
				}))
			})
			It(`Invoke UpdateRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateRole(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the UpdateRoleOptions model
				updateRoleOptionsModel := new(appidmanagementv4.UpdateRoleOptions)
				updateRoleOptionsModel.TenantID = core.StringPtr("testString")
				updateRoleOptionsModel.RoleID = core.StringPtr("testString")
				updateRoleOptionsModel.Name = core.StringPtr("child")
				updateRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				updateRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				updateRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateRole(updateRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateRole with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the UpdateRoleOptions model
				updateRoleOptionsModel := new(appidmanagementv4.UpdateRoleOptions)
				updateRoleOptionsModel.TenantID = core.StringPtr("testString")
				updateRoleOptionsModel.RoleID = core.StringPtr("testString")
				updateRoleOptionsModel.Name = core.StringPtr("child")
				updateRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				updateRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				updateRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateRole(updateRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateRoleOptions model with no property values
				updateRoleOptionsModelNew := new(appidmanagementv4.UpdateRoleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateRole(updateRoleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}

				// Construct an instance of the UpdateRoleOptions model
				updateRoleOptionsModel := new(appidmanagementv4.UpdateRoleOptions)
				updateRoleOptionsModel.TenantID = core.StringPtr("testString")
				updateRoleOptionsModel.RoleID = core.StringPtr("testString")
				updateRoleOptionsModel.Name = core.StringPtr("child")
				updateRoleOptionsModel.Access = []appidmanagementv4.RoleAccessItem{*roleAccessItemModel}
				updateRoleOptionsModel.Description = core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")
				updateRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateRole(updateRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteRole(deleteRoleOptions *DeleteRoleOptions)`, func() {
		deleteRolePath := "/management/v4/testString/roles/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteRolePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteRole successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.DeleteRole(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteRoleOptions model
				deleteRoleOptionsModel := new(appidmanagementv4.DeleteRoleOptions)
				deleteRoleOptionsModel.TenantID = core.StringPtr("testString")
				deleteRoleOptionsModel.RoleID = core.StringPtr("testString")
				deleteRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.DeleteRole(deleteRoleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteRole with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the DeleteRoleOptions model
				deleteRoleOptionsModel := new(appidmanagementv4.DeleteRoleOptions)
				deleteRoleOptionsModel.TenantID = core.StringPtr("testString")
				deleteRoleOptionsModel.RoleID = core.StringPtr("testString")
				deleteRoleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.DeleteRole(deleteRoleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteRoleOptions model with no property values
				deleteRoleOptionsModelNew := new(appidmanagementv4.DeleteRoleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.DeleteRole(deleteRoleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersSearchUserProfile(usersSearchUserProfileOptions *UsersSearchUserProfileOptions) - Operation response error`, func() {
		usersSearchUserProfilePath := "/management/v4/testString/users"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersSearchUserProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["dataScope"]).To(Equal([]string{"index"}))
					Expect(req.URL.Query()["email"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UsersSearchUserProfile with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersSearchUserProfileOptions model
				usersSearchUserProfileOptionsModel := new(appidmanagementv4.UsersSearchUserProfileOptions)
				usersSearchUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.DataScope = core.StringPtr("index")
				usersSearchUserProfileOptionsModel.Email = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				usersSearchUserProfileOptionsModel.Count = core.Int64Ptr(int64(0))
				usersSearchUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersSearchUserProfile(usersSearchUserProfileOptions *UsersSearchUserProfileOptions)`, func() {
		usersSearchUserProfilePath := "/management/v4/testString/users"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersSearchUserProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["dataScope"]).To(Equal([]string{"index"}))
					Expect(req.URL.Query()["email"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"totalResults": 12, "itemsPerPage": 12, "requestOptions": {"startIndex": 10, "count": 5}, "users": [{"id": "ID", "idp": "IDP", "email": "Email"}]}`)
				}))
			})
			It(`Invoke UsersSearchUserProfile successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UsersSearchUserProfileOptions model
				usersSearchUserProfileOptionsModel := new(appidmanagementv4.UsersSearchUserProfileOptions)
				usersSearchUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.DataScope = core.StringPtr("index")
				usersSearchUserProfileOptionsModel.Email = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				usersSearchUserProfileOptionsModel.Count = core.Int64Ptr(int64(0))
				usersSearchUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UsersSearchUserProfileWithContext(ctx, usersSearchUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UsersSearchUserProfileWithContext(ctx, usersSearchUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersSearchUserProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["dataScope"]).To(Equal([]string{"index"}))
					Expect(req.URL.Query()["email"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"totalResults": 12, "itemsPerPage": 12, "requestOptions": {"startIndex": 10, "count": 5}, "users": [{"id": "ID", "idp": "IDP", "email": "Email"}]}`)
				}))
			})
			It(`Invoke UsersSearchUserProfile successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UsersSearchUserProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UsersSearchUserProfileOptions model
				usersSearchUserProfileOptionsModel := new(appidmanagementv4.UsersSearchUserProfileOptions)
				usersSearchUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.DataScope = core.StringPtr("index")
				usersSearchUserProfileOptionsModel.Email = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				usersSearchUserProfileOptionsModel.Count = core.Int64Ptr(int64(0))
				usersSearchUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UsersSearchUserProfile with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersSearchUserProfileOptions model
				usersSearchUserProfileOptionsModel := new(appidmanagementv4.UsersSearchUserProfileOptions)
				usersSearchUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.DataScope = core.StringPtr("index")
				usersSearchUserProfileOptionsModel.Email = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				usersSearchUserProfileOptionsModel.Count = core.Int64Ptr(int64(0))
				usersSearchUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UsersSearchUserProfileOptions model with no property values
				usersSearchUserProfileOptionsModelNew := new(appidmanagementv4.UsersSearchUserProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UsersSearchUserProfile successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersSearchUserProfileOptions model
				usersSearchUserProfileOptionsModel := new(appidmanagementv4.UsersSearchUserProfileOptions)
				usersSearchUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.DataScope = core.StringPtr("index")
				usersSearchUserProfileOptionsModel.Email = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSearchUserProfileOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				usersSearchUserProfileOptionsModel.Count = core.Int64Ptr(int64(0))
				usersSearchUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UsersSearchUserProfile(usersSearchUserProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersNominateUser(usersNominateUserOptions *UsersNominateUserOptions)`, func() {
		usersNominateUserPath := "/management/v4/testString/users"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersNominateUserPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(201)
				}))
			})
			It(`Invoke UsersNominateUser successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UsersNominateUser(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UsersNominateUserParamsProfile model
				usersNominateUserParamsProfileModel := new(appidmanagementv4.UsersNominateUserParamsProfile)
				usersNominateUserParamsProfileModel.Attributes = make(map[string]interface{})

				// Construct an instance of the UsersNominateUserOptions model
				usersNominateUserOptionsModel := new(appidmanagementv4.UsersNominateUserOptions)
				usersNominateUserOptionsModel.TenantID = core.StringPtr("testString")
				usersNominateUserOptionsModel.IDP = core.StringPtr("saml")
				usersNominateUserOptionsModel.IDPIdentity = core.StringPtr("appid@ibm.com")
				usersNominateUserOptionsModel.Profile = usersNominateUserParamsProfileModel
				usersNominateUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UsersNominateUser(usersNominateUserOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UsersNominateUser with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersNominateUserParamsProfile model
				usersNominateUserParamsProfileModel := new(appidmanagementv4.UsersNominateUserParamsProfile)
				usersNominateUserParamsProfileModel.Attributes = make(map[string]interface{})

				// Construct an instance of the UsersNominateUserOptions model
				usersNominateUserOptionsModel := new(appidmanagementv4.UsersNominateUserOptions)
				usersNominateUserOptionsModel.TenantID = core.StringPtr("testString")
				usersNominateUserOptionsModel.IDP = core.StringPtr("saml")
				usersNominateUserOptionsModel.IDPIdentity = core.StringPtr("appid@ibm.com")
				usersNominateUserOptionsModel.Profile = usersNominateUserParamsProfileModel
				usersNominateUserOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UsersNominateUser(usersNominateUserOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UsersNominateUserOptions model with no property values
				usersNominateUserOptionsModelNew := new(appidmanagementv4.UsersNominateUserOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UsersNominateUser(usersNominateUserOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UserProfilesExport(userProfilesExportOptions *UserProfilesExportOptions) - Operation response error`, func() {
		userProfilesExportPath := "/management/v4/testString/users/export"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userProfilesExportPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UserProfilesExport with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UserProfilesExportOptions model
				userProfilesExportOptionsModel := new(appidmanagementv4.UserProfilesExportOptions)
				userProfilesExportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				userProfilesExportOptionsModel.Count = core.Int64Ptr(int64(0))
				userProfilesExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UserProfilesExport(userProfilesExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UserProfilesExport(userProfilesExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UserProfilesExport(userProfilesExportOptions *UserProfilesExportOptions)`, func() {
		userProfilesExportPath := "/management/v4/testString/users/export"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userProfilesExportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"users": [{"id": "ID", "identities": [{"provider": "Provider", "id": "ID", "idpUserInfo": {"anyKey": "anyValue"}}], "attributes": {"anyKey": "anyValue"}, "name": "Name", "email": "Email", "picture": "Picture", "gender": "Gender", "locale": "Locale", "preferred_username": "PreferredUsername", "idp": "IDP", "hashedIdpId": "HashedIDPID", "hashedEmail": "HashedEmail", "roles": ["Roles"]}]}`)
				}))
			})
			It(`Invoke UserProfilesExport successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UserProfilesExportOptions model
				userProfilesExportOptionsModel := new(appidmanagementv4.UserProfilesExportOptions)
				userProfilesExportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				userProfilesExportOptionsModel.Count = core.Int64Ptr(int64(0))
				userProfilesExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UserProfilesExportWithContext(ctx, userProfilesExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UserProfilesExport(userProfilesExportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UserProfilesExportWithContext(ctx, userProfilesExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userProfilesExportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["startIndex"]).To(Equal([]string{fmt.Sprint(int64(38))}))
					Expect(req.URL.Query()["count"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"users": [{"id": "ID", "identities": [{"provider": "Provider", "id": "ID", "idpUserInfo": {"anyKey": "anyValue"}}], "attributes": {"anyKey": "anyValue"}, "name": "Name", "email": "Email", "picture": "Picture", "gender": "Gender", "locale": "Locale", "preferred_username": "PreferredUsername", "idp": "IDP", "hashedIdpId": "HashedIDPID", "hashedEmail": "HashedEmail", "roles": ["Roles"]}]}`)
				}))
			})
			It(`Invoke UserProfilesExport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UserProfilesExport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserProfilesExportOptions model
				userProfilesExportOptionsModel := new(appidmanagementv4.UserProfilesExportOptions)
				userProfilesExportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				userProfilesExportOptionsModel.Count = core.Int64Ptr(int64(0))
				userProfilesExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UserProfilesExport(userProfilesExportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UserProfilesExport with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UserProfilesExportOptions model
				userProfilesExportOptionsModel := new(appidmanagementv4.UserProfilesExportOptions)
				userProfilesExportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				userProfilesExportOptionsModel.Count = core.Int64Ptr(int64(0))
				userProfilesExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UserProfilesExport(userProfilesExportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UserProfilesExportOptions model with no property values
				userProfilesExportOptionsModelNew := new(appidmanagementv4.UserProfilesExportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UserProfilesExport(userProfilesExportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UserProfilesExport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UserProfilesExportOptions model
				userProfilesExportOptionsModel := new(appidmanagementv4.UserProfilesExportOptions)
				userProfilesExportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesExportOptionsModel.StartIndex = core.Int64Ptr(int64(38))
				userProfilesExportOptionsModel.Count = core.Int64Ptr(int64(0))
				userProfilesExportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UserProfilesExport(userProfilesExportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UserProfilesImport(userProfilesImportOptions *UserProfilesImportOptions) - Operation response error`, func() {
		userProfilesImportPath := "/management/v4/testString/users/import"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userProfilesImportPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UserProfilesImport with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ExportUserProfileUsersItemIdentitiesItem model
				exportUserProfileUsersItemIdentitiesItemModel := new(appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem)
				exportUserProfileUsersItemIdentitiesItemModel.Provider = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemIdentitiesItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExportUserProfileUsersItem model
				exportUserProfileUsersItemModel := new(appidmanagementv4.ExportUserProfileUsersItem)
				exportUserProfileUsersItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Identities = []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}
				exportUserProfileUsersItemModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemModel.Name = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Email = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Picture = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Gender = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Locale = core.StringPtr("testString")
				exportUserProfileUsersItemModel.PreferredUsername = core.StringPtr("testString")
				exportUserProfileUsersItemModel.IDP = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedIDPID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedEmail = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the UserProfilesImportOptions model
				userProfilesImportOptionsModel := new(appidmanagementv4.UserProfilesImportOptions)
				userProfilesImportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesImportOptionsModel.Users = []appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel}
				userProfilesImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UserProfilesImport(userProfilesImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UserProfilesImport(userProfilesImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UserProfilesImport(userProfilesImportOptions *UserProfilesImportOptions)`, func() {
		userProfilesImportPath := "/management/v4/testString/users/import"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userProfilesImportPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"added": 5, "failed": 6, "failReasons": [{"originalId": "OriginalID", "idp": "IDP", "error": {"anyKey": "anyValue"}}]}`)
				}))
			})
			It(`Invoke UserProfilesImport successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the ExportUserProfileUsersItemIdentitiesItem model
				exportUserProfileUsersItemIdentitiesItemModel := new(appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem)
				exportUserProfileUsersItemIdentitiesItemModel.Provider = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemIdentitiesItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExportUserProfileUsersItem model
				exportUserProfileUsersItemModel := new(appidmanagementv4.ExportUserProfileUsersItem)
				exportUserProfileUsersItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Identities = []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}
				exportUserProfileUsersItemModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemModel.Name = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Email = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Picture = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Gender = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Locale = core.StringPtr("testString")
				exportUserProfileUsersItemModel.PreferredUsername = core.StringPtr("testString")
				exportUserProfileUsersItemModel.IDP = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedIDPID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedEmail = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the UserProfilesImportOptions model
				userProfilesImportOptionsModel := new(appidmanagementv4.UserProfilesImportOptions)
				userProfilesImportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesImportOptionsModel.Users = []appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel}
				userProfilesImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UserProfilesImportWithContext(ctx, userProfilesImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UserProfilesImport(userProfilesImportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UserProfilesImportWithContext(ctx, userProfilesImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(userProfilesImportPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"added": 5, "failed": 6, "failReasons": [{"originalId": "OriginalID", "idp": "IDP", "error": {"anyKey": "anyValue"}}]}`)
				}))
			})
			It(`Invoke UserProfilesImport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UserProfilesImport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExportUserProfileUsersItemIdentitiesItem model
				exportUserProfileUsersItemIdentitiesItemModel := new(appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem)
				exportUserProfileUsersItemIdentitiesItemModel.Provider = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemIdentitiesItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExportUserProfileUsersItem model
				exportUserProfileUsersItemModel := new(appidmanagementv4.ExportUserProfileUsersItem)
				exportUserProfileUsersItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Identities = []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}
				exportUserProfileUsersItemModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemModel.Name = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Email = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Picture = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Gender = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Locale = core.StringPtr("testString")
				exportUserProfileUsersItemModel.PreferredUsername = core.StringPtr("testString")
				exportUserProfileUsersItemModel.IDP = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedIDPID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedEmail = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the UserProfilesImportOptions model
				userProfilesImportOptionsModel := new(appidmanagementv4.UserProfilesImportOptions)
				userProfilesImportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesImportOptionsModel.Users = []appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel}
				userProfilesImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UserProfilesImport(userProfilesImportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UserProfilesImport with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ExportUserProfileUsersItemIdentitiesItem model
				exportUserProfileUsersItemIdentitiesItemModel := new(appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem)
				exportUserProfileUsersItemIdentitiesItemModel.Provider = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemIdentitiesItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExportUserProfileUsersItem model
				exportUserProfileUsersItemModel := new(appidmanagementv4.ExportUserProfileUsersItem)
				exportUserProfileUsersItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Identities = []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}
				exportUserProfileUsersItemModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemModel.Name = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Email = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Picture = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Gender = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Locale = core.StringPtr("testString")
				exportUserProfileUsersItemModel.PreferredUsername = core.StringPtr("testString")
				exportUserProfileUsersItemModel.IDP = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedIDPID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedEmail = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the UserProfilesImportOptions model
				userProfilesImportOptionsModel := new(appidmanagementv4.UserProfilesImportOptions)
				userProfilesImportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesImportOptionsModel.Users = []appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel}
				userProfilesImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UserProfilesImport(userProfilesImportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UserProfilesImportOptions model with no property values
				userProfilesImportOptionsModelNew := new(appidmanagementv4.UserProfilesImportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UserProfilesImport(userProfilesImportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UserProfilesImport successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the ExportUserProfileUsersItemIdentitiesItem model
				exportUserProfileUsersItemIdentitiesItemModel := new(appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem)
				exportUserProfileUsersItemIdentitiesItemModel.Provider = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemIdentitiesItemModel.SetProperty("foo", core.StringPtr("testString"))

				// Construct an instance of the ExportUserProfileUsersItem model
				exportUserProfileUsersItemModel := new(appidmanagementv4.ExportUserProfileUsersItem)
				exportUserProfileUsersItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Identities = []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}
				exportUserProfileUsersItemModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemModel.Name = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Email = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Picture = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Gender = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Locale = core.StringPtr("testString")
				exportUserProfileUsersItemModel.PreferredUsername = core.StringPtr("testString")
				exportUserProfileUsersItemModel.IDP = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedIDPID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedEmail = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Roles = []string{"testString"}

				// Construct an instance of the UserProfilesImportOptions model
				userProfilesImportOptionsModel := new(appidmanagementv4.UserProfilesImportOptions)
				userProfilesImportOptionsModel.TenantID = core.StringPtr("testString")
				userProfilesImportOptionsModel.Users = []appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel}
				userProfilesImportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UserProfilesImport(userProfilesImportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersDeleteUserProfile(usersDeleteUserProfileOptions *UsersDeleteUserProfileOptions)`, func() {
		usersDeleteUserProfilePath := "/management/v4/testString/users/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersDeleteUserProfilePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UsersDeleteUserProfile successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UsersDeleteUserProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UsersDeleteUserProfileOptions model
				usersDeleteUserProfileOptionsModel := new(appidmanagementv4.UsersDeleteUserProfileOptions)
				usersDeleteUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersDeleteUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersDeleteUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UsersDeleteUserProfile(usersDeleteUserProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UsersDeleteUserProfile with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersDeleteUserProfileOptions model
				usersDeleteUserProfileOptionsModel := new(appidmanagementv4.UsersDeleteUserProfileOptions)
				usersDeleteUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersDeleteUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersDeleteUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UsersDeleteUserProfile(usersDeleteUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UsersDeleteUserProfileOptions model with no property values
				usersDeleteUserProfileOptionsModelNew := new(appidmanagementv4.UsersDeleteUserProfileOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UsersDeleteUserProfile(usersDeleteUserProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersRevokeRefreshToken(usersRevokeRefreshTokenOptions *UsersRevokeRefreshTokenOptions)`, func() {
		usersRevokeRefreshTokenPath := "/management/v4/testString/users/testString/revoke_refresh_token"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersRevokeRefreshTokenPath))
					Expect(req.Method).To(Equal("POST"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UsersRevokeRefreshToken successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UsersRevokeRefreshToken(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UsersRevokeRefreshTokenOptions model
				usersRevokeRefreshTokenOptionsModel := new(appidmanagementv4.UsersRevokeRefreshTokenOptions)
				usersRevokeRefreshTokenOptionsModel.TenantID = core.StringPtr("testString")
				usersRevokeRefreshTokenOptionsModel.ID = core.StringPtr("testString")
				usersRevokeRefreshTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UsersRevokeRefreshToken(usersRevokeRefreshTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UsersRevokeRefreshToken with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersRevokeRefreshTokenOptions model
				usersRevokeRefreshTokenOptionsModel := new(appidmanagementv4.UsersRevokeRefreshTokenOptions)
				usersRevokeRefreshTokenOptionsModel.TenantID = core.StringPtr("testString")
				usersRevokeRefreshTokenOptionsModel.ID = core.StringPtr("testString")
				usersRevokeRefreshTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UsersRevokeRefreshToken(usersRevokeRefreshTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UsersRevokeRefreshTokenOptions model with no property values
				usersRevokeRefreshTokenOptionsModelNew := new(appidmanagementv4.UsersRevokeRefreshTokenOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UsersRevokeRefreshToken(usersRevokeRefreshTokenOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersGetUserProfile(usersGetUserProfileOptions *UsersGetUserProfileOptions)`, func() {
		usersGetUserProfilePath := "/management/v4/testString/users/testString/profile"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersGetUserProfilePath))
					Expect(req.Method).To(Equal("GET"))

					res.WriteHeader(200)
				}))
			})
			It(`Invoke UsersGetUserProfile successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UsersGetUserProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UsersGetUserProfileOptions model
				usersGetUserProfileOptionsModel := new(appidmanagementv4.UsersGetUserProfileOptions)
				usersGetUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersGetUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersGetUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UsersGetUserProfile(usersGetUserProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UsersGetUserProfile with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersGetUserProfileOptions model
				usersGetUserProfileOptionsModel := new(appidmanagementv4.UsersGetUserProfileOptions)
				usersGetUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersGetUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersGetUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UsersGetUserProfile(usersGetUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UsersGetUserProfileOptions model with no property values
				usersGetUserProfileOptionsModelNew := new(appidmanagementv4.UsersGetUserProfileOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UsersGetUserProfile(usersGetUserProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UsersSetUserProfile(usersSetUserProfileOptions *UsersSetUserProfileOptions)`, func() {
		usersSetUserProfilePath := "/management/v4/testString/users/testString/profile"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(usersSetUserProfilePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					res.WriteHeader(200)
				}))
			})
			It(`Invoke UsersSetUserProfile successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := appIDManagementService.UsersSetUserProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UsersSetUserProfileOptions model
				usersSetUserProfileOptionsModel := new(appidmanagementv4.UsersSetUserProfileOptions)
				usersSetUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSetUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSetUserProfileOptionsModel.Attributes = make(map[string]interface{})
				usersSetUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = appIDManagementService.UsersSetUserProfile(usersSetUserProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UsersSetUserProfile with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UsersSetUserProfileOptions model
				usersSetUserProfileOptionsModel := new(appidmanagementv4.UsersSetUserProfileOptions)
				usersSetUserProfileOptionsModel.TenantID = core.StringPtr("testString")
				usersSetUserProfileOptionsModel.ID = core.StringPtr("testString")
				usersSetUserProfileOptionsModel.Attributes = make(map[string]interface{})
				usersSetUserProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := appIDManagementService.UsersSetUserProfile(usersSetUserProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UsersSetUserProfileOptions model with no property values
				usersSetUserProfileOptionsModelNew := new(appidmanagementv4.UsersSetUserProfileOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = appIDManagementService.UsersSetUserProfile(usersSetUserProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUserRoles(getUserRolesOptions *GetUserRolesOptions) - Operation response error`, func() {
		getUserRolesPath := "/management/v4/testString/users/testString/roles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserRolesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetUserRoles with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetUserRolesOptions model
				getUserRolesOptionsModel := new(appidmanagementv4.GetUserRolesOptions)
				getUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				getUserRolesOptionsModel.ID = core.StringPtr("testString")
				getUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.GetUserRoles(getUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.GetUserRoles(getUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetUserRoles(getUserRolesOptions *GetUserRolesOptions)`, func() {
		getUserRolesPath := "/management/v4/testString/users/testString/roles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserRolesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "adult"}]}`)
				}))
			})
			It(`Invoke GetUserRoles successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the GetUserRolesOptions model
				getUserRolesOptionsModel := new(appidmanagementv4.GetUserRolesOptions)
				getUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				getUserRolesOptionsModel.ID = core.StringPtr("testString")
				getUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.GetUserRolesWithContext(ctx, getUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.GetUserRoles(getUserRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.GetUserRolesWithContext(ctx, getUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getUserRolesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "adult"}]}`)
				}))
			})
			It(`Invoke GetUserRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.GetUserRoles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetUserRolesOptions model
				getUserRolesOptionsModel := new(appidmanagementv4.GetUserRolesOptions)
				getUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				getUserRolesOptionsModel.ID = core.StringPtr("testString")
				getUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.GetUserRoles(getUserRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetUserRoles with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetUserRolesOptions model
				getUserRolesOptionsModel := new(appidmanagementv4.GetUserRolesOptions)
				getUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				getUserRolesOptionsModel.ID = core.StringPtr("testString")
				getUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.GetUserRoles(getUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetUserRolesOptions model with no property values
				getUserRolesOptionsModelNew := new(appidmanagementv4.GetUserRolesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.GetUserRoles(getUserRolesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetUserRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the GetUserRolesOptions model
				getUserRolesOptionsModel := new(appidmanagementv4.GetUserRolesOptions)
				getUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				getUserRolesOptionsModel.ID = core.StringPtr("testString")
				getUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.GetUserRoles(getUserRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateUserRoles(updateUserRolesOptions *UpdateUserRolesOptions) - Operation response error`, func() {
		updateUserRolesPath := "/management/v4/testString/users/testString/roles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateUserRolesPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateUserRoles with error: Operation response processing error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the UpdateUserRolesOptions model
				updateUserRolesOptionsModel := new(appidmanagementv4.UpdateUserRolesOptions)
				updateUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				updateUserRolesOptionsModel.ID = core.StringPtr("testString")
				updateUserRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				updateUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				appIDManagementService.EnableRetries(0, 0)
				result, response, operationErr = appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateUserRoles(updateUserRolesOptions *UpdateUserRolesOptions)`, func() {
		updateUserRolesPath := "/management/v4/testString/users/testString/roles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateUserRolesPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "child"}]}`)
				}))
			})
			It(`Invoke UpdateUserRoles successfully with retries`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())
				appIDManagementService.EnableRetries(0, 0)

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the UpdateUserRolesOptions model
				updateUserRolesOptionsModel := new(appidmanagementv4.UpdateUserRolesOptions)
				updateUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				updateUserRolesOptionsModel.ID = core.StringPtr("testString")
				updateUserRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				updateUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := appIDManagementService.UpdateUserRolesWithContext(ctx, updateUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				appIDManagementService.DisableRetries()
				result, response, operationErr := appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = appIDManagementService.UpdateUserRolesWithContext(ctx, updateUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateUserRolesPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"roles": [{"id": "111c22c3-38ea-4de8-b5d4-338744d83b0f", "name": "child"}]}`)
				}))
			})
			It(`Invoke UpdateUserRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := appIDManagementService.UpdateUserRoles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the UpdateUserRolesOptions model
				updateUserRolesOptionsModel := new(appidmanagementv4.UpdateUserRolesOptions)
				updateUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				updateUserRolesOptionsModel.ID = core.StringPtr("testString")
				updateUserRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				updateUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateUserRoles with error: Operation validation and request error`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the UpdateUserRolesOptions model
				updateUserRolesOptionsModel := new(appidmanagementv4.UpdateUserRolesOptions)
				updateUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				updateUserRolesOptionsModel.ID = core.StringPtr("testString")
				updateUserRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				updateUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := appIDManagementService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateUserRolesOptions model with no property values
				updateUserRolesOptionsModelNew := new(appidmanagementv4.UpdateUserRolesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateUserRoles successfully`, func() {
				appIDManagementService, serviceErr := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(appIDManagementService).ToNot(BeNil())

				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}

				// Construct an instance of the UpdateUserRolesOptions model
				updateUserRolesOptionsModel := new(appidmanagementv4.UpdateUserRolesOptions)
				updateUserRolesOptionsModel.TenantID = core.StringPtr("testString")
				updateUserRolesOptionsModel.ID = core.StringPtr("testString")
				updateUserRolesOptionsModel.Roles = updateUserRolesParamsRolesModel
				updateUserRolesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := appIDManagementService.UpdateUserRoles(updateUserRolesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			appIDManagementService, _ := appidmanagementv4.NewAppIDManagementV4(&appidmanagementv4.AppIDManagementV4Options{
				URL:           "http://appidmanagementv4modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagement successfully`, func() {
				enabled := true
				var passwordReuse *appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse = nil
				var preventPasswordWithUsername *appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername = nil
				var passwordExpiration *appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration = nil
				var lockOutPolicy *appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy = nil
				_, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagement(enabled, passwordReuse, preventPasswordWithUsername, passwordExpiration, lockOutPolicy)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementLockOutPolicy successfully`, func() {
				enabled := true
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementLockOutPolicy(enabled)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementLockOutPolicyConfig successfully`, func() {
				lockOutTimeSec := int64(60)
				numOfAttempts := int64(1)
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementLockOutPolicyConfig(lockOutTimeSec, numOfAttempts)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval successfully`, func() {
				enabled := true
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval(enabled)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig successfully`, func() {
				minHoursToChangePassword := int64(0)
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig(minHoursToChangePassword)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementPasswordExpiration successfully`, func() {
				enabled := true
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementPasswordExpiration(enabled)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementPasswordExpirationConfig successfully`, func() {
				daysToExpire := int64(1)
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementPasswordExpirationConfig(daysToExpire)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementPasswordReuse successfully`, func() {
				enabled := true
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementPasswordReuse(enabled)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementPasswordReuseConfig successfully`, func() {
				maxPasswordReuse := int64(1)
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementPasswordReuseConfig(maxPasswordReuse)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername successfully`, func() {
				enabled := true
				model, err := appIDManagementService.NewApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername(enabled)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewChangePasswordOptions successfully`, func() {
				// Construct an instance of the ChangePasswordOptions model
				tenantID := "testString"
				changePasswordOptionsNewPassword := "testString"
				changePasswordOptionsUUID := "testString"
				changePasswordOptionsModel := appIDManagementService.NewChangePasswordOptions(tenantID, changePasswordOptionsNewPassword, changePasswordOptionsUUID)
				changePasswordOptionsModel.SetTenantID("testString")
				changePasswordOptionsModel.SetNewPassword("testString")
				changePasswordOptionsModel.SetUUID("testString")
				changePasswordOptionsModel.SetChangedIPAddress("testString")
				changePasswordOptionsModel.SetLanguage("testString")
				changePasswordOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(changePasswordOptionsModel).ToNot(BeNil())
				Expect(changePasswordOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(changePasswordOptionsModel.NewPassword).To(Equal(core.StringPtr("testString")))
				Expect(changePasswordOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(changePasswordOptionsModel.ChangedIPAddress).To(Equal(core.StringPtr("testString")))
				Expect(changePasswordOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(changePasswordOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCloudDirectoryConfigParamsInteractions successfully`, func() {
				var identityConfirmation *appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation = nil
				welcomeEnabled := false
				resetPasswordEnabled := false
				resetPasswordNotificationEnable := true
				_, err := appIDManagementService.NewCloudDirectoryConfigParamsInteractions(identityConfirmation, welcomeEnabled, resetPasswordEnabled, resetPasswordNotificationEnable)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCloudDirectoryConfigParamsInteractionsIdentityConfirmation successfully`, func() {
				accessMode := "FULL"
				model, err := appIDManagementService.NewCloudDirectoryConfigParamsInteractionsIdentityConfirmation(accessMode)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCloudDirectoryExportOptions successfully`, func() {
				// Construct an instance of the CloudDirectoryExportOptions model
				encryptionSecret := "testString"
				tenantID := "testString"
				cloudDirectoryExportOptionsModel := appIDManagementService.NewCloudDirectoryExportOptions(encryptionSecret, tenantID)
				cloudDirectoryExportOptionsModel.SetEncryptionSecret("testString")
				cloudDirectoryExportOptionsModel.SetTenantID("testString")
				cloudDirectoryExportOptionsModel.SetStartIndex(int64(38))
				cloudDirectoryExportOptionsModel.SetCount(int64(0))
				cloudDirectoryExportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(cloudDirectoryExportOptionsModel).ToNot(BeNil())
				Expect(cloudDirectoryExportOptionsModel.EncryptionSecret).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryExportOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryExportOptionsModel.StartIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(cloudDirectoryExportOptionsModel.Count).To(Equal(core.Int64Ptr(int64(0))))
				Expect(cloudDirectoryExportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCloudDirectoryGetUserinfoOptions successfully`, func() {
				// Construct an instance of the CloudDirectoryGetUserinfoOptions model
				tenantID := "testString"
				userID := "testString"
				cloudDirectoryGetUserinfoOptionsModel := appIDManagementService.NewCloudDirectoryGetUserinfoOptions(tenantID, userID)
				cloudDirectoryGetUserinfoOptionsModel.SetTenantID("testString")
				cloudDirectoryGetUserinfoOptionsModel.SetUserID("testString")
				cloudDirectoryGetUserinfoOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(cloudDirectoryGetUserinfoOptionsModel).ToNot(BeNil())
				Expect(cloudDirectoryGetUserinfoOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryGetUserinfoOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryGetUserinfoOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCloudDirectoryImportOptions successfully`, func() {
				// Construct an instance of the ExportUserUsersItemProfile model
				exportUserUsersItemProfileModel := new(appidmanagementv4.ExportUserUsersItemProfile)
				Expect(exportUserUsersItemProfileModel).ToNot(BeNil())
				exportUserUsersItemProfileModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				Expect(exportUserUsersItemProfileModel.Attributes).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))

				// Construct an instance of the ExportUserUsersItem model
				exportUserUsersItemModel := new(appidmanagementv4.ExportUserUsersItem)
				Expect(exportUserUsersItemModel).ToNot(BeNil())
				exportUserUsersItemModel.ScimUser = map[string]interface{}{"anyKey": "anyValue"}
				exportUserUsersItemModel.PasswordHash = core.StringPtr("testString")
				exportUserUsersItemModel.PasswordHashAlg = core.StringPtr("testString")
				exportUserUsersItemModel.Profile = exportUserUsersItemProfileModel
				exportUserUsersItemModel.Roles = []string{"testString"}
				Expect(exportUserUsersItemModel.ScimUser).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(exportUserUsersItemModel.PasswordHash).To(Equal(core.StringPtr("testString")))
				Expect(exportUserUsersItemModel.PasswordHashAlg).To(Equal(core.StringPtr("testString")))
				Expect(exportUserUsersItemModel.Profile).To(Equal(exportUserUsersItemProfileModel))
				Expect(exportUserUsersItemModel.Roles).To(Equal([]string{"testString"}))

				// Construct an instance of the CloudDirectoryImportOptions model
				encryptionSecret := "testString"
				tenantID := "testString"
				cloudDirectoryImportOptionsUsers := []appidmanagementv4.ExportUserUsersItem{}
				cloudDirectoryImportOptionsModel := appIDManagementService.NewCloudDirectoryImportOptions(encryptionSecret, tenantID, cloudDirectoryImportOptionsUsers)
				cloudDirectoryImportOptionsModel.SetEncryptionSecret("testString")
				cloudDirectoryImportOptionsModel.SetTenantID("testString")
				cloudDirectoryImportOptionsModel.SetUsers([]appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel})
				cloudDirectoryImportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(cloudDirectoryImportOptionsModel).ToNot(BeNil())
				Expect(cloudDirectoryImportOptionsModel.EncryptionSecret).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryImportOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryImportOptionsModel.Users).To(Equal([]appidmanagementv4.ExportUserUsersItem{*exportUserUsersItemModel}))
				Expect(cloudDirectoryImportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCloudDirectoryRemoveOptions successfully`, func() {
				// Construct an instance of the CloudDirectoryRemoveOptions model
				tenantID := "testString"
				userID := "testString"
				cloudDirectoryRemoveOptionsModel := appIDManagementService.NewCloudDirectoryRemoveOptions(tenantID, userID)
				cloudDirectoryRemoveOptionsModel.SetTenantID("testString")
				cloudDirectoryRemoveOptionsModel.SetUserID("testString")
				cloudDirectoryRemoveOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(cloudDirectoryRemoveOptionsModel).ToNot(BeNil())
				Expect(cloudDirectoryRemoveOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryRemoveOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectoryRemoveOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCloudDirectorySenderDetailsSenderDetails successfully`, func() {
				var from *appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsFrom = nil
				_, err := appIDManagementService.NewCloudDirectorySenderDetailsSenderDetails(from)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCloudDirectorySenderDetailsSenderDetailsFrom successfully`, func() {
				email := "testString"
				model, err := appIDManagementService.NewCloudDirectorySenderDetailsSenderDetailsFrom(email)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateCloudDirectoryUserOptions successfully`, func() {
				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				Expect(createNewUserEmailsItemModel).ToNot(BeNil())
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)
				Expect(createNewUserEmailsItemModel.Value).To(Equal(core.StringPtr("user@mail.com")))
				Expect(createNewUserEmailsItemModel.Primary).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the CreateCloudDirectoryUserOptions model
				tenantID := "testString"
				createCloudDirectoryUserOptionsEmails := []appidmanagementv4.CreateNewUserEmailsItem{}
				createCloudDirectoryUserOptionsPassword := "userPassword"
				createCloudDirectoryUserOptionsModel := appIDManagementService.NewCreateCloudDirectoryUserOptions(tenantID, createCloudDirectoryUserOptionsEmails, createCloudDirectoryUserOptionsPassword)
				createCloudDirectoryUserOptionsModel.SetTenantID("testString")
				createCloudDirectoryUserOptionsModel.SetEmails([]appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel})
				createCloudDirectoryUserOptionsModel.SetPassword("userPassword")
				createCloudDirectoryUserOptionsModel.SetActive(true)
				createCloudDirectoryUserOptionsModel.SetUserName("myUserName")
				createCloudDirectoryUserOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createCloudDirectoryUserOptionsModel).ToNot(BeNil())
				Expect(createCloudDirectoryUserOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(createCloudDirectoryUserOptionsModel.Emails).To(Equal([]appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}))
				Expect(createCloudDirectoryUserOptionsModel.Password).To(Equal(core.StringPtr("userPassword")))
				Expect(createCloudDirectoryUserOptionsModel.Active).To(Equal(core.BoolPtr(true)))
				Expect(createCloudDirectoryUserOptionsModel.UserName).To(Equal(core.StringPtr("myUserName")))
				Expect(createCloudDirectoryUserOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNewUserEmailsItem successfully`, func() {
				value := "user@mail.com"
				model, err := appIDManagementService.NewCreateNewUserEmailsItem(value)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateRoleOptions successfully`, func() {
				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				Expect(roleAccessItemModel).ToNot(BeNil())
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}
				Expect(roleAccessItemModel.ApplicationID).To(Equal(core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")))
				Expect(roleAccessItemModel.Scopes).To(Equal([]string{"cartoons", "animated"}))

				// Construct an instance of the CreateRoleOptions model
				tenantID := "testString"
				createRoleOptionsName := "child"
				createRoleOptionsAccess := []appidmanagementv4.RoleAccessItem{}
				createRoleOptionsModel := appIDManagementService.NewCreateRoleOptions(tenantID, createRoleOptionsName, createRoleOptionsAccess)
				createRoleOptionsModel.SetTenantID("testString")
				createRoleOptionsModel.SetName("child")
				createRoleOptionsModel.SetAccess([]appidmanagementv4.RoleAccessItem{*roleAccessItemModel})
				createRoleOptionsModel.SetDescription("Limits the available movie options to those that might be more appropriate for younger viewers.")
				createRoleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createRoleOptionsModel).ToNot(BeNil())
				Expect(createRoleOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(createRoleOptionsModel.Name).To(Equal(core.StringPtr("child")))
				Expect(createRoleOptionsModel.Access).To(Equal([]appidmanagementv4.RoleAccessItem{*roleAccessItemModel}))
				Expect(createRoleOptionsModel.Description).To(Equal(core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")))
				Expect(createRoleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteActionURLOptions successfully`, func() {
				// Construct an instance of the DeleteActionURLOptions model
				tenantID := "testString"
				action := "on_user_verified"
				deleteActionURLOptionsModel := appIDManagementService.NewDeleteActionURLOptions(tenantID, action)
				deleteActionURLOptionsModel.SetTenantID("testString")
				deleteActionURLOptionsModel.SetAction("on_user_verified")
				deleteActionURLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteActionURLOptionsModel).ToNot(BeNil())
				Expect(deleteActionURLOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(deleteActionURLOptionsModel.Action).To(Equal(core.StringPtr("on_user_verified")))
				Expect(deleteActionURLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteApplicationOptions successfully`, func() {
				// Construct an instance of the DeleteApplicationOptions model
				tenantID := "testString"
				clientID := "testString"
				deleteApplicationOptionsModel := appIDManagementService.NewDeleteApplicationOptions(tenantID, clientID)
				deleteApplicationOptionsModel.SetTenantID("testString")
				deleteApplicationOptionsModel.SetClientID("testString")
				deleteApplicationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteApplicationOptionsModel).ToNot(BeNil())
				Expect(deleteApplicationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(deleteApplicationOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(deleteApplicationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteCloudDirectoryUserOptions successfully`, func() {
				// Construct an instance of the DeleteCloudDirectoryUserOptions model
				tenantID := "testString"
				userID := "testString"
				deleteCloudDirectoryUserOptionsModel := appIDManagementService.NewDeleteCloudDirectoryUserOptions(tenantID, userID)
				deleteCloudDirectoryUserOptionsModel.SetTenantID("testString")
				deleteCloudDirectoryUserOptionsModel.SetUserID("testString")
				deleteCloudDirectoryUserOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteCloudDirectoryUserOptionsModel).ToNot(BeNil())
				Expect(deleteCloudDirectoryUserOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCloudDirectoryUserOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCloudDirectoryUserOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteRoleOptions successfully`, func() {
				// Construct an instance of the DeleteRoleOptions model
				tenantID := "testString"
				roleID := "testString"
				deleteRoleOptionsModel := appIDManagementService.NewDeleteRoleOptions(tenantID, roleID)
				deleteRoleOptionsModel.SetTenantID("testString")
				deleteRoleOptionsModel.SetRoleID("testString")
				deleteRoleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteRoleOptionsModel).ToNot(BeNil())
				Expect(deleteRoleOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(deleteRoleOptionsModel.RoleID).To(Equal(core.StringPtr("testString")))
				Expect(deleteRoleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTemplateOptions successfully`, func() {
				// Construct an instance of the DeleteTemplateOptions model
				tenantID := "testString"
				templateName := "USER_VERIFICATION"
				language := "testString"
				deleteTemplateOptionsModel := appIDManagementService.NewDeleteTemplateOptions(tenantID, templateName, language)
				deleteTemplateOptionsModel.SetTenantID("testString")
				deleteTemplateOptionsModel.SetTemplateName("USER_VERIFICATION")
				deleteTemplateOptionsModel.SetLanguage("testString")
				deleteTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTemplateOptionsModel).ToNot(BeNil())
				Expect(deleteTemplateOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTemplateOptionsModel.TemplateName).To(Equal(core.StringPtr("USER_VERIFICATION")))
				Expect(deleteTemplateOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(deleteTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewEmailDispatcherParamsCustom successfully`, func() {
				url := "testString"
				var authorization *appidmanagementv4.EmailDispatcherParamsCustomAuthorization = nil
				_, err := appIDManagementService.NewEmailDispatcherParamsCustom(url, authorization)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewEmailDispatcherParamsCustomAuthorization successfully`, func() {
				typeVar := "value"
				model, err := appIDManagementService.NewEmailDispatcherParamsCustomAuthorization(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailDispatcherParamsSendgrid successfully`, func() {
				apiKey := "testString"
				model, err := appIDManagementService.NewEmailDispatcherParamsSendgrid(apiKey)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailSettingTestOptions successfully`, func() {
				// Construct an instance of the EmailSettingsTestParamsEmailSettingsSendgrid model
				emailSettingsTestParamsEmailSettingsSendgridModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsSendgrid)
				Expect(emailSettingsTestParamsEmailSettingsSendgridModel).ToNot(BeNil())
				emailSettingsTestParamsEmailSettingsSendgridModel.APIKey = core.StringPtr("testString")
				Expect(emailSettingsTestParamsEmailSettingsSendgridModel.APIKey).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustomAuthorization model
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization)
				Expect(emailSettingsTestParamsEmailSettingsCustomAuthorizationModel).ToNot(BeNil())
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password = core.StringPtr("testString")
				Expect(emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Type).To(Equal(core.StringPtr("value")))
				Expect(emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Username).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingsTestParamsEmailSettingsCustomAuthorizationModel.Password).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EmailSettingsTestParamsEmailSettingsCustom model
				emailSettingsTestParamsEmailSettingsCustomModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustom)
				Expect(emailSettingsTestParamsEmailSettingsCustomModel).ToNot(BeNil())
				emailSettingsTestParamsEmailSettingsCustomModel.URL = core.StringPtr("testString")
				emailSettingsTestParamsEmailSettingsCustomModel.Authorization = emailSettingsTestParamsEmailSettingsCustomAuthorizationModel
				Expect(emailSettingsTestParamsEmailSettingsCustomModel.URL).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingsTestParamsEmailSettingsCustomModel.Authorization).To(Equal(emailSettingsTestParamsEmailSettingsCustomAuthorizationModel))

				// Construct an instance of the EmailSettingsTestParamsEmailSettings model
				emailSettingsTestParamsEmailSettingsModel := new(appidmanagementv4.EmailSettingsTestParamsEmailSettings)
				Expect(emailSettingsTestParamsEmailSettingsModel).ToNot(BeNil())
				emailSettingsTestParamsEmailSettingsModel.Provider = core.StringPtr("sendgrid")
				emailSettingsTestParamsEmailSettingsModel.Sendgrid = emailSettingsTestParamsEmailSettingsSendgridModel
				emailSettingsTestParamsEmailSettingsModel.Custom = emailSettingsTestParamsEmailSettingsCustomModel
				Expect(emailSettingsTestParamsEmailSettingsModel.Provider).To(Equal(core.StringPtr("sendgrid")))
				Expect(emailSettingsTestParamsEmailSettingsModel.Sendgrid).To(Equal(emailSettingsTestParamsEmailSettingsSendgridModel))
				Expect(emailSettingsTestParamsEmailSettingsModel.Custom).To(Equal(emailSettingsTestParamsEmailSettingsCustomModel))

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsFrom model
				emailSettingsTestParamsSenderDetailsFromModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom)
				Expect(emailSettingsTestParamsSenderDetailsFromModel).ToNot(BeNil())
				emailSettingsTestParamsSenderDetailsFromModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsFromModel.Name = core.StringPtr("testString")
				Expect(emailSettingsTestParamsSenderDetailsFromModel.Email).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingsTestParamsSenderDetailsFromModel.Name).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EmailSettingsTestParamsSenderDetailsReplyTo model
				emailSettingsTestParamsSenderDetailsReplyToModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetailsReplyTo)
				Expect(emailSettingsTestParamsSenderDetailsReplyToModel).ToNot(BeNil())
				emailSettingsTestParamsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				emailSettingsTestParamsSenderDetailsReplyToModel.Name = core.StringPtr("testString")
				Expect(emailSettingsTestParamsSenderDetailsReplyToModel.Email).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingsTestParamsSenderDetailsReplyToModel.Name).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EmailSettingsTestParamsSenderDetails model
				emailSettingsTestParamsSenderDetailsModel := new(appidmanagementv4.EmailSettingsTestParamsSenderDetails)
				Expect(emailSettingsTestParamsSenderDetailsModel).ToNot(BeNil())
				emailSettingsTestParamsSenderDetailsModel.From = emailSettingsTestParamsSenderDetailsFromModel
				emailSettingsTestParamsSenderDetailsModel.ReplyTo = emailSettingsTestParamsSenderDetailsReplyToModel
				Expect(emailSettingsTestParamsSenderDetailsModel.From).To(Equal(emailSettingsTestParamsSenderDetailsFromModel))
				Expect(emailSettingsTestParamsSenderDetailsModel.ReplyTo).To(Equal(emailSettingsTestParamsSenderDetailsReplyToModel))

				// Construct an instance of the EmailSettingTestOptions model
				tenantID := "testString"
				emailSettingTestOptionsEmailTo := "testString"
				var emailSettingTestOptionsEmailSettings *appidmanagementv4.EmailSettingsTestParamsEmailSettings = nil
				var emailSettingTestOptionsSenderDetails *appidmanagementv4.EmailSettingsTestParamsSenderDetails = nil
				emailSettingTestOptionsModel := appIDManagementService.NewEmailSettingTestOptions(tenantID, emailSettingTestOptionsEmailTo, emailSettingTestOptionsEmailSettings, emailSettingTestOptionsSenderDetails)
				emailSettingTestOptionsModel.SetTenantID("testString")
				emailSettingTestOptionsModel.SetEmailTo("testString")
				emailSettingTestOptionsModel.SetEmailSettings(emailSettingsTestParamsEmailSettingsModel)
				emailSettingTestOptionsModel.SetSenderDetails(emailSettingsTestParamsSenderDetailsModel)
				emailSettingTestOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(emailSettingTestOptionsModel).ToNot(BeNil())
				Expect(emailSettingTestOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingTestOptionsModel.EmailTo).To(Equal(core.StringPtr("testString")))
				Expect(emailSettingTestOptionsModel.EmailSettings).To(Equal(emailSettingsTestParamsEmailSettingsModel))
				Expect(emailSettingTestOptionsModel.SenderDetails).To(Equal(emailSettingsTestParamsSenderDetailsModel))
				Expect(emailSettingTestOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewEmailSettingsTestParamsEmailSettings successfully`, func() {
				provider := "sendgrid"
				model, err := appIDManagementService.NewEmailSettingsTestParamsEmailSettings(provider)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailSettingsTestParamsEmailSettingsCustom successfully`, func() {
				url := "testString"
				var authorization *appidmanagementv4.EmailSettingsTestParamsEmailSettingsCustomAuthorization = nil
				_, err := appIDManagementService.NewEmailSettingsTestParamsEmailSettingsCustom(url, authorization)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewEmailSettingsTestParamsEmailSettingsCustomAuthorization successfully`, func() {
				typeVar := "value"
				model, err := appIDManagementService.NewEmailSettingsTestParamsEmailSettingsCustomAuthorization(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailSettingsTestParamsEmailSettingsSendgrid successfully`, func() {
				apiKey := "testString"
				model, err := appIDManagementService.NewEmailSettingsTestParamsEmailSettingsSendgrid(apiKey)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailSettingsTestParamsSenderDetails successfully`, func() {
				var from *appidmanagementv4.EmailSettingsTestParamsSenderDetailsFrom = nil
				_, err := appIDManagementService.NewEmailSettingsTestParamsSenderDetails(from)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewEmailSettingsTestParamsSenderDetailsFrom successfully`, func() {
				email := "testString"
				model, err := appIDManagementService.NewEmailSettingsTestParamsSenderDetailsFrom(email)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailSettingsTestParamsSenderDetailsReplyTo successfully`, func() {
				email := "testString"
				model, err := appIDManagementService.NewEmailSettingsTestParamsSenderDetailsReplyTo(email)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewExportUserProfileUsersItem successfully`, func() {
				id := "testString"
				identities := []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{}
				attributes := map[string]interface{}{"anyKey": "anyValue"}
				model, err := appIDManagementService.NewExportUserProfileUsersItem(id, identities, attributes)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewExportUserUsersItem successfully`, func() {
				scimUser := map[string]interface{}{"anyKey": "anyValue"}
				passwordHash := "testString"
				passwordHashAlg := "testString"
				var profile *appidmanagementv4.ExportUserUsersItemProfile = nil
				roles := []string{"testString"}
				_, err := appIDManagementService.NewExportUserUsersItem(scimUser, passwordHash, passwordHashAlg, profile, roles)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewExportUserUsersItemProfile successfully`, func() {
				attributes := map[string]interface{}{"anyKey": "anyValue"}
				model, err := appIDManagementService.NewExportUserUsersItemProfile(attributes)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFacebookGoogleConfigParamsConfig successfully`, func() {
				idpID := "appID"
				secret := "appsecret"
				model, err := appIDManagementService.NewFacebookGoogleConfigParamsConfig(idpID, secret)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewForgotPasswordResultOptions successfully`, func() {
				// Construct an instance of the ForgotPasswordResultOptions model
				tenantID := "testString"
				forgotPasswordResultOptionsContext := "testString"
				forgotPasswordResultOptionsModel := appIDManagementService.NewForgotPasswordResultOptions(tenantID, forgotPasswordResultOptionsContext)
				forgotPasswordResultOptionsModel.SetTenantID("testString")
				forgotPasswordResultOptionsModel.SetContext("testString")
				forgotPasswordResultOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(forgotPasswordResultOptionsModel).ToNot(BeNil())
				Expect(forgotPasswordResultOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(forgotPasswordResultOptionsModel.Context).To(Equal(core.StringPtr("testString")))
				Expect(forgotPasswordResultOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetApplicationOptions successfully`, func() {
				// Construct an instance of the GetApplicationOptions model
				tenantID := "testString"
				clientID := "testString"
				getApplicationOptionsModel := appIDManagementService.NewGetApplicationOptions(tenantID, clientID)
				getApplicationOptionsModel.SetTenantID("testString")
				getApplicationOptionsModel.SetClientID("testString")
				getApplicationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getApplicationOptionsModel).ToNot(BeNil())
				Expect(getApplicationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getApplicationOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(getApplicationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetApplicationRolesOptions successfully`, func() {
				// Construct an instance of the GetApplicationRolesOptions model
				tenantID := "testString"
				clientID := "testString"
				getApplicationRolesOptionsModel := appIDManagementService.NewGetApplicationRolesOptions(tenantID, clientID)
				getApplicationRolesOptionsModel.SetTenantID("testString")
				getApplicationRolesOptionsModel.SetClientID("testString")
				getApplicationRolesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getApplicationRolesOptionsModel).ToNot(BeNil())
				Expect(getApplicationRolesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getApplicationRolesOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(getApplicationRolesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetApplicationScopesOptions successfully`, func() {
				// Construct an instance of the GetApplicationScopesOptions model
				tenantID := "testString"
				clientID := "testString"
				getApplicationScopesOptionsModel := appIDManagementService.NewGetApplicationScopesOptions(tenantID, clientID)
				getApplicationScopesOptionsModel.SetTenantID("testString")
				getApplicationScopesOptionsModel.SetClientID("testString")
				getApplicationScopesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getApplicationScopesOptionsModel).ToNot(BeNil())
				Expect(getApplicationScopesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getApplicationScopesOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(getApplicationScopesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAuditStatusOptions successfully`, func() {
				// Construct an instance of the GetAuditStatusOptions model
				tenantID := "testString"
				getAuditStatusOptionsModel := appIDManagementService.NewGetAuditStatusOptions(tenantID)
				getAuditStatusOptionsModel.SetTenantID("testString")
				getAuditStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAuditStatusOptionsModel).ToNot(BeNil())
				Expect(getAuditStatusOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getAuditStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetChannelOptions successfully`, func() {
				// Construct an instance of the GetChannelOptions model
				tenantID := "testString"
				channel := "email"
				getChannelOptionsModel := appIDManagementService.NewGetChannelOptions(tenantID, channel)
				getChannelOptionsModel.SetTenantID("testString")
				getChannelOptionsModel.SetChannel("email")
				getChannelOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getChannelOptionsModel).ToNot(BeNil())
				Expect(getChannelOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getChannelOptionsModel.Channel).To(Equal(core.StringPtr("email")))
				Expect(getChannelOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectoryActionURLOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectoryActionURLOptions model
				tenantID := "testString"
				action := "on_user_verified"
				getCloudDirectoryActionURLOptionsModel := appIDManagementService.NewGetCloudDirectoryActionURLOptions(tenantID, action)
				getCloudDirectoryActionURLOptionsModel.SetTenantID("testString")
				getCloudDirectoryActionURLOptionsModel.SetAction("on_user_verified")
				getCloudDirectoryActionURLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectoryActionURLOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectoryActionURLOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryActionURLOptionsModel.Action).To(Equal(core.StringPtr("on_user_verified")))
				Expect(getCloudDirectoryActionURLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectoryAdvancedPasswordManagementOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectoryAdvancedPasswordManagementOptions model
				tenantID := "testString"
				getCloudDirectoryAdvancedPasswordManagementOptionsModel := appIDManagementService.NewGetCloudDirectoryAdvancedPasswordManagementOptions(tenantID)
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.SetTenantID("testString")
				getCloudDirectoryAdvancedPasswordManagementOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectoryAdvancedPasswordManagementOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectoryEmailDispatcherOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectoryEmailDispatcherOptions model
				tenantID := "testString"
				getCloudDirectoryEmailDispatcherOptionsModel := appIDManagementService.NewGetCloudDirectoryEmailDispatcherOptions(tenantID)
				getCloudDirectoryEmailDispatcherOptionsModel.SetTenantID("testString")
				getCloudDirectoryEmailDispatcherOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectoryEmailDispatcherOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectoryEmailDispatcherOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryEmailDispatcherOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectoryIDPOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectoryIDPOptions model
				tenantID := "testString"
				getCloudDirectoryIDPOptionsModel := appIDManagementService.NewGetCloudDirectoryIDPOptions(tenantID)
				getCloudDirectoryIDPOptionsModel.SetTenantID("testString")
				getCloudDirectoryIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectoryIDPOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectoryIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectoryPasswordRegexOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectoryPasswordRegexOptions model
				tenantID := "testString"
				getCloudDirectoryPasswordRegexOptionsModel := appIDManagementService.NewGetCloudDirectoryPasswordRegexOptions(tenantID)
				getCloudDirectoryPasswordRegexOptionsModel.SetTenantID("testString")
				getCloudDirectoryPasswordRegexOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectoryPasswordRegexOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectoryPasswordRegexOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryPasswordRegexOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectorySenderDetailsOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectorySenderDetailsOptions model
				tenantID := "testString"
				getCloudDirectorySenderDetailsOptionsModel := appIDManagementService.NewGetCloudDirectorySenderDetailsOptions(tenantID)
				getCloudDirectorySenderDetailsOptionsModel.SetTenantID("testString")
				getCloudDirectorySenderDetailsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectorySenderDetailsOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectorySenderDetailsOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectorySenderDetailsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCloudDirectoryUserOptions successfully`, func() {
				// Construct an instance of the GetCloudDirectoryUserOptions model
				tenantID := "testString"
				userID := "testString"
				getCloudDirectoryUserOptionsModel := appIDManagementService.NewGetCloudDirectoryUserOptions(tenantID, userID)
				getCloudDirectoryUserOptionsModel.SetTenantID("testString")
				getCloudDirectoryUserOptionsModel.SetUserID("testString")
				getCloudDirectoryUserOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCloudDirectoryUserOptionsModel).ToNot(BeNil())
				Expect(getCloudDirectoryUserOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryUserOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(getCloudDirectoryUserOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCustomIDPOptions successfully`, func() {
				// Construct an instance of the GetCustomIDPOptions model
				tenantID := "testString"
				getCustomIDPOptionsModel := appIDManagementService.NewGetCustomIDPOptions(tenantID)
				getCustomIDPOptionsModel.SetTenantID("testString")
				getCustomIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCustomIDPOptionsModel).ToNot(BeNil())
				Expect(getCustomIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getCustomIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetExtensionConfigOptions successfully`, func() {
				// Construct an instance of the GetExtensionConfigOptions model
				tenantID := "testString"
				name := "premfa"
				getExtensionConfigOptionsModel := appIDManagementService.NewGetExtensionConfigOptions(tenantID, name)
				getExtensionConfigOptionsModel.SetTenantID("testString")
				getExtensionConfigOptionsModel.SetName("premfa")
				getExtensionConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getExtensionConfigOptionsModel).ToNot(BeNil())
				Expect(getExtensionConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getExtensionConfigOptionsModel.Name).To(Equal(core.StringPtr("premfa")))
				Expect(getExtensionConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFacebookIDPOptions successfully`, func() {
				// Construct an instance of the GetFacebookIDPOptions model
				tenantID := "testString"
				getFacebookIDPOptionsModel := appIDManagementService.NewGetFacebookIDPOptions(tenantID)
				getFacebookIDPOptionsModel.SetTenantID("testString")
				getFacebookIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFacebookIDPOptionsModel).ToNot(BeNil())
				Expect(getFacebookIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getFacebookIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetGoogleIDPOptions successfully`, func() {
				// Construct an instance of the GetGoogleIDPOptions model
				tenantID := "testString"
				getGoogleIDPOptionsModel := appIDManagementService.NewGetGoogleIDPOptions(tenantID)
				getGoogleIDPOptionsModel.SetTenantID("testString")
				getGoogleIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getGoogleIDPOptionsModel).ToNot(BeNil())
				Expect(getGoogleIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getGoogleIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLocalizationOptions successfully`, func() {
				// Construct an instance of the GetLocalizationOptions model
				tenantID := "testString"
				getLocalizationOptionsModel := appIDManagementService.NewGetLocalizationOptions(tenantID)
				getLocalizationOptionsModel.SetTenantID("testString")
				getLocalizationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLocalizationOptionsModel).ToNot(BeNil())
				Expect(getLocalizationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getLocalizationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMFAConfigOptions successfully`, func() {
				// Construct an instance of the GetMFAConfigOptions model
				tenantID := "testString"
				getMFAConfigOptionsModel := appIDManagementService.NewGetMFAConfigOptions(tenantID)
				getMFAConfigOptionsModel.SetTenantID("testString")
				getMFAConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMFAConfigOptionsModel).ToNot(BeNil())
				Expect(getMFAConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getMFAConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetMediaOptions successfully`, func() {
				// Construct an instance of the GetMediaOptions model
				tenantID := "testString"
				getMediaOptionsModel := appIDManagementService.NewGetMediaOptions(tenantID)
				getMediaOptionsModel.SetTenantID("testString")
				getMediaOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getMediaOptionsModel).ToNot(BeNil())
				Expect(getMediaOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getMediaOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRateLimitConfigOptions successfully`, func() {
				// Construct an instance of the GetRateLimitConfigOptions model
				tenantID := "testString"
				getRateLimitConfigOptionsModel := appIDManagementService.NewGetRateLimitConfigOptions(tenantID)
				getRateLimitConfigOptionsModel.SetTenantID("testString")
				getRateLimitConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRateLimitConfigOptionsModel).ToNot(BeNil())
				Expect(getRateLimitConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getRateLimitConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRedirectUrisOptions successfully`, func() {
				// Construct an instance of the GetRedirectUrisOptions model
				tenantID := "testString"
				getRedirectUrisOptionsModel := appIDManagementService.NewGetRedirectUrisOptions(tenantID)
				getRedirectUrisOptionsModel.SetTenantID("testString")
				getRedirectUrisOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRedirectUrisOptionsModel).ToNot(BeNil())
				Expect(getRedirectUrisOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getRedirectUrisOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRoleOptions successfully`, func() {
				// Construct an instance of the GetRoleOptions model
				tenantID := "testString"
				roleID := "testString"
				getRoleOptionsModel := appIDManagementService.NewGetRoleOptions(tenantID, roleID)
				getRoleOptionsModel.SetTenantID("testString")
				getRoleOptionsModel.SetRoleID("testString")
				getRoleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRoleOptionsModel).ToNot(BeNil())
				Expect(getRoleOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getRoleOptionsModel.RoleID).To(Equal(core.StringPtr("testString")))
				Expect(getRoleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSSOConfigOptions successfully`, func() {
				// Construct an instance of the GetSSOConfigOptions model
				tenantID := "testString"
				getSSOConfigOptionsModel := appIDManagementService.NewGetSSOConfigOptions(tenantID)
				getSSOConfigOptionsModel.SetTenantID("testString")
				getSSOConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSSOConfigOptionsModel).ToNot(BeNil())
				Expect(getSSOConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getSSOConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSAMLIDPOptions successfully`, func() {
				// Construct an instance of the GetSAMLIDPOptions model
				tenantID := "testString"
				getSAMLIDPOptionsModel := appIDManagementService.NewGetSAMLIDPOptions(tenantID)
				getSAMLIDPOptionsModel.SetTenantID("testString")
				getSAMLIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSAMLIDPOptionsModel).ToNot(BeNil())
				Expect(getSAMLIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getSAMLIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSAMLMetadataOptions successfully`, func() {
				// Construct an instance of the GetSAMLMetadataOptions model
				tenantID := "testString"
				getSAMLMetadataOptionsModel := appIDManagementService.NewGetSAMLMetadataOptions(tenantID)
				getSAMLMetadataOptionsModel.SetTenantID("testString")
				getSAMLMetadataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSAMLMetadataOptionsModel).ToNot(BeNil())
				Expect(getSAMLMetadataOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getSAMLMetadataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateOptions successfully`, func() {
				// Construct an instance of the GetTemplateOptions model
				tenantID := "testString"
				templateName := "USER_VERIFICATION"
				language := "testString"
				getTemplateOptionsModel := appIDManagementService.NewGetTemplateOptions(tenantID, templateName, language)
				getTemplateOptionsModel.SetTenantID("testString")
				getTemplateOptionsModel.SetTemplateName("USER_VERIFICATION")
				getTemplateOptionsModel.SetLanguage("testString")
				getTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateOptionsModel).ToNot(BeNil())
				Expect(getTemplateOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateOptionsModel.TemplateName).To(Equal(core.StringPtr("USER_VERIFICATION")))
				Expect(getTemplateOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetThemeColorOptions successfully`, func() {
				// Construct an instance of the GetThemeColorOptions model
				tenantID := "testString"
				getThemeColorOptionsModel := appIDManagementService.NewGetThemeColorOptions(tenantID)
				getThemeColorOptionsModel.SetTenantID("testString")
				getThemeColorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getThemeColorOptionsModel).ToNot(BeNil())
				Expect(getThemeColorOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getThemeColorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetThemeTextOptions successfully`, func() {
				// Construct an instance of the GetThemeTextOptions model
				tenantID := "testString"
				getThemeTextOptionsModel := appIDManagementService.NewGetThemeTextOptions(tenantID)
				getThemeTextOptionsModel.SetTenantID("testString")
				getThemeTextOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getThemeTextOptionsModel).ToNot(BeNil())
				Expect(getThemeTextOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getThemeTextOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTokensConfigOptions successfully`, func() {
				// Construct an instance of the GetTokensConfigOptions model
				tenantID := "testString"
				getTokensConfigOptionsModel := appIDManagementService.NewGetTokensConfigOptions(tenantID)
				getTokensConfigOptionsModel.SetTenantID("testString")
				getTokensConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTokensConfigOptionsModel).ToNot(BeNil())
				Expect(getTokensConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getTokensConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUserProfilesConfigOptions successfully`, func() {
				// Construct an instance of the GetUserProfilesConfigOptions model
				tenantID := "testString"
				getUserProfilesConfigOptionsModel := appIDManagementService.NewGetUserProfilesConfigOptions(tenantID)
				getUserProfilesConfigOptionsModel.SetTenantID("testString")
				getUserProfilesConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUserProfilesConfigOptionsModel).ToNot(BeNil())
				Expect(getUserProfilesConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getUserProfilesConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetUserRolesOptions successfully`, func() {
				// Construct an instance of the GetUserRolesOptions model
				tenantID := "testString"
				id := "testString"
				getUserRolesOptionsModel := appIDManagementService.NewGetUserRolesOptions(tenantID, id)
				getUserRolesOptionsModel.SetTenantID("testString")
				getUserRolesOptionsModel.SetID("testString")
				getUserRolesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getUserRolesOptionsModel).ToNot(BeNil())
				Expect(getUserRolesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(getUserRolesOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getUserRolesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewInvalidateUserSSOSessionsOptions successfully`, func() {
				// Construct an instance of the InvalidateUserSSOSessionsOptions model
				tenantID := "testString"
				userID := "testString"
				invalidateUserSSOSessionsOptionsModel := appIDManagementService.NewInvalidateUserSSOSessionsOptions(tenantID, userID)
				invalidateUserSSOSessionsOptionsModel.SetTenantID("testString")
				invalidateUserSSOSessionsOptionsModel.SetUserID("testString")
				invalidateUserSSOSessionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(invalidateUserSSOSessionsOptionsModel).ToNot(BeNil())
				Expect(invalidateUserSSOSessionsOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(invalidateUserSSOSessionsOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(invalidateUserSSOSessionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListApplicationsOptions successfully`, func() {
				// Construct an instance of the ListApplicationsOptions model
				tenantID := "testString"
				listApplicationsOptionsModel := appIDManagementService.NewListApplicationsOptions(tenantID)
				listApplicationsOptionsModel.SetTenantID("testString")
				listApplicationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listApplicationsOptionsModel).ToNot(BeNil())
				Expect(listApplicationsOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(listApplicationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListChannelsOptions successfully`, func() {
				// Construct an instance of the ListChannelsOptions model
				tenantID := "testString"
				listChannelsOptionsModel := appIDManagementService.NewListChannelsOptions(tenantID)
				listChannelsOptionsModel.SetTenantID("testString")
				listChannelsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listChannelsOptionsModel).ToNot(BeNil())
				Expect(listChannelsOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(listChannelsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListCloudDirectoryUsersOptions successfully`, func() {
				// Construct an instance of the ListCloudDirectoryUsersOptions model
				tenantID := "testString"
				listCloudDirectoryUsersOptionsModel := appIDManagementService.NewListCloudDirectoryUsersOptions(tenantID)
				listCloudDirectoryUsersOptionsModel.SetTenantID("testString")
				listCloudDirectoryUsersOptionsModel.SetStartIndex(int64(38))
				listCloudDirectoryUsersOptionsModel.SetCount(int64(0))
				listCloudDirectoryUsersOptionsModel.SetQuery("testString")
				listCloudDirectoryUsersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listCloudDirectoryUsersOptionsModel).ToNot(BeNil())
				Expect(listCloudDirectoryUsersOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(listCloudDirectoryUsersOptionsModel.StartIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(listCloudDirectoryUsersOptionsModel.Count).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listCloudDirectoryUsersOptionsModel.Query).To(Equal(core.StringPtr("testString")))
				Expect(listCloudDirectoryUsersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRolesOptions successfully`, func() {
				// Construct an instance of the ListRolesOptions model
				tenantID := "testString"
				listRolesOptionsModel := appIDManagementService.NewListRolesOptions(tenantID)
				listRolesOptionsModel.SetTenantID("testString")
				listRolesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRolesOptionsModel).ToNot(BeNil())
				Expect(listRolesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(listRolesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostEmailDispatcherTestOptions successfully`, func() {
				// Construct an instance of the PostEmailDispatcherTestOptions model
				tenantID := "testString"
				postEmailDispatcherTestOptionsEmail := "testString"
				postEmailDispatcherTestOptionsModel := appIDManagementService.NewPostEmailDispatcherTestOptions(tenantID, postEmailDispatcherTestOptionsEmail)
				postEmailDispatcherTestOptionsModel.SetTenantID("testString")
				postEmailDispatcherTestOptionsModel.SetEmail("testString")
				postEmailDispatcherTestOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postEmailDispatcherTestOptionsModel).ToNot(BeNil())
				Expect(postEmailDispatcherTestOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(postEmailDispatcherTestOptionsModel.Email).To(Equal(core.StringPtr("testString")))
				Expect(postEmailDispatcherTestOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostExtensionsTestOptions successfully`, func() {
				// Construct an instance of the PostExtensionsTestOptions model
				tenantID := "testString"
				name := "premfa"
				postExtensionsTestOptionsModel := appIDManagementService.NewPostExtensionsTestOptions(tenantID, name)
				postExtensionsTestOptionsModel.SetTenantID("testString")
				postExtensionsTestOptionsModel.SetName("premfa")
				postExtensionsTestOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postExtensionsTestOptionsModel).ToNot(BeNil())
				Expect(postExtensionsTestOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(postExtensionsTestOptionsModel.Name).To(Equal(core.StringPtr("premfa")))
				Expect(postExtensionsTestOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostMediaOptions successfully`, func() {
				// Construct an instance of the PostMediaOptions model
				tenantID := "testString"
				mediaType := "logo"
				file := CreateMockReader("This is a mock file.")
				postMediaOptionsModel := appIDManagementService.NewPostMediaOptions(tenantID, mediaType, file)
				postMediaOptionsModel.SetTenantID("testString")
				postMediaOptionsModel.SetMediaType("logo")
				postMediaOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				postMediaOptionsModel.SetFileContentType("testString")
				postMediaOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postMediaOptionsModel).ToNot(BeNil())
				Expect(postMediaOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(postMediaOptionsModel.MediaType).To(Equal(core.StringPtr("logo")))
				Expect(postMediaOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(postMediaOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(postMediaOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostSMSDispatcherTestOptions successfully`, func() {
				// Construct an instance of the PostSMSDispatcherTestOptions model
				tenantID := "testString"
				postSMSDispatcherTestOptionsPhoneNumber := "+1-999-999-9999"
				postSMSDispatcherTestOptionsModel := appIDManagementService.NewPostSMSDispatcherTestOptions(tenantID, postSMSDispatcherTestOptionsPhoneNumber)
				postSMSDispatcherTestOptionsModel.SetTenantID("testString")
				postSMSDispatcherTestOptionsModel.SetPhoneNumber("+1-999-999-9999")
				postSMSDispatcherTestOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postSMSDispatcherTestOptionsModel).ToNot(BeNil())
				Expect(postSMSDispatcherTestOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(postSMSDispatcherTestOptionsModel.PhoneNumber).To(Equal(core.StringPtr("+1-999-999-9999")))
				Expect(postSMSDispatcherTestOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostThemeColorOptions successfully`, func() {
				// Construct an instance of the PostThemeColorOptions model
				tenantID := "testString"
				postThemeColorOptionsModel := appIDManagementService.NewPostThemeColorOptions(tenantID)
				postThemeColorOptionsModel.SetTenantID("testString")
				postThemeColorOptionsModel.SetHeaderColor("#EEF2F5")
				postThemeColorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postThemeColorOptionsModel).ToNot(BeNil())
				Expect(postThemeColorOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(postThemeColorOptionsModel.HeaderColor).To(Equal(core.StringPtr("#EEF2F5")))
				Expect(postThemeColorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostThemeTextOptions successfully`, func() {
				// Construct an instance of the PostThemeTextOptions model
				tenantID := "testString"
				postThemeTextOptionsModel := appIDManagementService.NewPostThemeTextOptions(tenantID)
				postThemeTextOptionsModel.SetTenantID("testString")
				postThemeTextOptionsModel.SetTabTitle("Login")
				postThemeTextOptionsModel.SetFootnote("Powered by App ID")
				postThemeTextOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postThemeTextOptionsModel).ToNot(BeNil())
				Expect(postThemeTextOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(postThemeTextOptionsModel.TabTitle).To(Equal(core.StringPtr("Login")))
				Expect(postThemeTextOptionsModel.Footnote).To(Equal(core.StringPtr("Powered by App ID")))
				Expect(postThemeTextOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPutApplicationsRolesOptions successfully`, func() {
				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				Expect(updateUserRolesParamsRolesModel).ToNot(BeNil())
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}
				Expect(updateUserRolesParamsRolesModel.Ids).To(Equal([]string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}))

				// Construct an instance of the PutApplicationsRolesOptions model
				tenantID := "testString"
				clientID := "testString"
				var putApplicationsRolesOptionsRoles *appidmanagementv4.UpdateUserRolesParamsRoles = nil
				putApplicationsRolesOptionsModel := appIDManagementService.NewPutApplicationsRolesOptions(tenantID, clientID, putApplicationsRolesOptionsRoles)
				putApplicationsRolesOptionsModel.SetTenantID("testString")
				putApplicationsRolesOptionsModel.SetClientID("testString")
				putApplicationsRolesOptionsModel.SetRoles(updateUserRolesParamsRolesModel)
				putApplicationsRolesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(putApplicationsRolesOptionsModel).ToNot(BeNil())
				Expect(putApplicationsRolesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(putApplicationsRolesOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(putApplicationsRolesOptionsModel.Roles).To(Equal(updateUserRolesParamsRolesModel))
				Expect(putApplicationsRolesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPutApplicationsScopesOptions successfully`, func() {
				// Construct an instance of the PutApplicationsScopesOptions model
				tenantID := "testString"
				clientID := "testString"
				putApplicationsScopesOptionsModel := appIDManagementService.NewPutApplicationsScopesOptions(tenantID, clientID)
				putApplicationsScopesOptionsModel.SetTenantID("testString")
				putApplicationsScopesOptionsModel.SetClientID("testString")
				putApplicationsScopesOptionsModel.SetScopes([]string{"cartoons", "horror", "animated"})
				putApplicationsScopesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(putApplicationsScopesOptionsModel).ToNot(BeNil())
				Expect(putApplicationsScopesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(putApplicationsScopesOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(putApplicationsScopesOptionsModel.Scopes).To(Equal([]string{"cartoons", "horror", "animated"}))
				Expect(putApplicationsScopesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPutTokensConfigOptions successfully`, func() {
				// Construct an instance of the TokenClaimMapping model
				tokenClaimMappingModel := new(appidmanagementv4.TokenClaimMapping)
				Expect(tokenClaimMappingModel).ToNot(BeNil())
				tokenClaimMappingModel.Source = core.StringPtr("saml")
				tokenClaimMappingModel.SourceClaim = core.StringPtr("testString")
				tokenClaimMappingModel.DestinationClaim = core.StringPtr("testString")
				Expect(tokenClaimMappingModel.Source).To(Equal(core.StringPtr("saml")))
				Expect(tokenClaimMappingModel.SourceClaim).To(Equal(core.StringPtr("testString")))
				Expect(tokenClaimMappingModel.DestinationClaim).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AccessTokenConfigParams model
				accessTokenConfigParamsModel := new(appidmanagementv4.AccessTokenConfigParams)
				Expect(accessTokenConfigParamsModel).ToNot(BeNil())
				accessTokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(3600))
				Expect(accessTokenConfigParamsModel.ExpiresIn).To(Equal(core.Int64Ptr(int64(3600))))

				// Construct an instance of the TokenConfigParams model
				tokenConfigParamsModel := new(appidmanagementv4.TokenConfigParams)
				Expect(tokenConfigParamsModel).ToNot(BeNil())
				tokenConfigParamsModel.ExpiresIn = core.Int64Ptr(int64(2592000))
				tokenConfigParamsModel.Enabled = core.BoolPtr(true)
				Expect(tokenConfigParamsModel.ExpiresIn).To(Equal(core.Int64Ptr(int64(2592000))))
				Expect(tokenConfigParamsModel.Enabled).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the PutTokensConfigOptions model
				tenantID := "testString"
				putTokensConfigOptionsModel := appIDManagementService.NewPutTokensConfigOptions(tenantID)
				putTokensConfigOptionsModel.SetTenantID("testString")
				putTokensConfigOptionsModel.SetIDTokenClaims([]appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel})
				putTokensConfigOptionsModel.SetAccessTokenClaims([]appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel})
				putTokensConfigOptionsModel.SetAccess(accessTokenConfigParamsModel)
				putTokensConfigOptionsModel.SetRefresh(tokenConfigParamsModel)
				putTokensConfigOptionsModel.SetAnonymousAccess(tokenConfigParamsModel)
				putTokensConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(putTokensConfigOptionsModel).ToNot(BeNil())
				Expect(putTokensConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(putTokensConfigOptionsModel.IDTokenClaims).To(Equal([]appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}))
				Expect(putTokensConfigOptionsModel.AccessTokenClaims).To(Equal([]appidmanagementv4.TokenClaimMapping{*tokenClaimMappingModel}))
				Expect(putTokensConfigOptionsModel.Access).To(Equal(accessTokenConfigParamsModel))
				Expect(putTokensConfigOptionsModel.Refresh).To(Equal(tokenConfigParamsModel))
				Expect(putTokensConfigOptionsModel.AnonymousAccess).To(Equal(tokenConfigParamsModel))
				Expect(putTokensConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRegisterApplicationOptions successfully`, func() {
				// Construct an instance of the RegisterApplicationOptions model
				tenantID := "testString"
				registerApplicationOptionsName := "testString"
				registerApplicationOptionsModel := appIDManagementService.NewRegisterApplicationOptions(tenantID, registerApplicationOptionsName)
				registerApplicationOptionsModel.SetTenantID("testString")
				registerApplicationOptionsModel.SetName("testString")
				registerApplicationOptionsModel.SetType("testString")
				registerApplicationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(registerApplicationOptionsModel).ToNot(BeNil())
				Expect(registerApplicationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(registerApplicationOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(registerApplicationOptionsModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(registerApplicationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewResendNotificationOptions successfully`, func() {
				// Construct an instance of the ResendNotificationOptions model
				tenantID := "testString"
				templateName := "USER_VERIFICATION"
				resendNotificationOptionsUUID := "testString"
				resendNotificationOptionsModel := appIDManagementService.NewResendNotificationOptions(tenantID, templateName, resendNotificationOptionsUUID)
				resendNotificationOptionsModel.SetTenantID("testString")
				resendNotificationOptionsModel.SetTemplateName("USER_VERIFICATION")
				resendNotificationOptionsModel.SetUUID("testString")
				resendNotificationOptionsModel.SetLanguage("testString")
				resendNotificationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(resendNotificationOptionsModel).ToNot(BeNil())
				Expect(resendNotificationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(resendNotificationOptionsModel.TemplateName).To(Equal(core.StringPtr("USER_VERIFICATION")))
				Expect(resendNotificationOptionsModel.UUID).To(Equal(core.StringPtr("testString")))
				Expect(resendNotificationOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(resendNotificationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetAuditStatusOptions successfully`, func() {
				// Construct an instance of the SetAuditStatusOptions model
				tenantID := "testString"
				setAuditStatusOptionsIsActive := true
				setAuditStatusOptionsModel := appIDManagementService.NewSetAuditStatusOptions(tenantID, setAuditStatusOptionsIsActive)
				setAuditStatusOptionsModel.SetTenantID("testString")
				setAuditStatusOptionsModel.SetIsActive(true)
				setAuditStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setAuditStatusOptionsModel).ToNot(BeNil())
				Expect(setAuditStatusOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setAuditStatusOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(setAuditStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCloudDirectoryActionOptions successfully`, func() {
				// Construct an instance of the SetCloudDirectoryActionOptions model
				tenantID := "testString"
				action := "on_user_verified"
				setCloudDirectoryActionOptionsActionURL := "testString"
				setCloudDirectoryActionOptionsModel := appIDManagementService.NewSetCloudDirectoryActionOptions(tenantID, action, setCloudDirectoryActionOptionsActionURL)
				setCloudDirectoryActionOptionsModel.SetTenantID("testString")
				setCloudDirectoryActionOptionsModel.SetAction("on_user_verified")
				setCloudDirectoryActionOptionsModel.SetActionURL("testString")
				setCloudDirectoryActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCloudDirectoryActionOptionsModel).ToNot(BeNil())
				Expect(setCloudDirectoryActionOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryActionOptionsModel.Action).To(Equal(core.StringPtr("on_user_verified")))
				Expect(setCloudDirectoryActionOptionsModel.ActionURL).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCloudDirectoryAdvancedPasswordManagementOptions successfully`, func() {
				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuseConfig model
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuseConfig)
				Expect(apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse = core.Int64Ptr(int64(1))
				Expect(apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel.MaxPasswordReuse).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordReuse model
				apmSchemaAdvancedPasswordManagementPasswordReuseModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordReuse)
				Expect(apmSchemaAdvancedPasswordManagementPasswordReuseModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config = apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel
				Expect(apmSchemaAdvancedPasswordManagementPasswordReuseModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apmSchemaAdvancedPasswordManagementPasswordReuseModel.Config).To(Equal(apmSchemaAdvancedPasswordManagementPasswordReuseConfigModel))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername model
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPreventPasswordWithUsername)
				Expect(apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled = core.BoolPtr(true)
				Expect(apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel.Enabled).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig model
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpirationConfig)
				Expect(apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire = core.Int64Ptr(int64(1))
				Expect(apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel.DaysToExpire).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementPasswordExpiration model
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementPasswordExpiration)
				Expect(apmSchemaAdvancedPasswordManagementPasswordExpirationModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config = apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel
				Expect(apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apmSchemaAdvancedPasswordManagementPasswordExpirationModel.Config).To(Equal(apmSchemaAdvancedPasswordManagementPasswordExpirationConfigModel))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig model
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicyConfig)
				Expect(apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec = core.Int64Ptr(int64(60))
				apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts = core.Int64Ptr(int64(1))
				Expect(apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.LockOutTimeSec).To(Equal(core.Int64Ptr(int64(60))))
				Expect(apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel.NumOfAttempts).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementLockOutPolicy model
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementLockOutPolicy)
				Expect(apmSchemaAdvancedPasswordManagementLockOutPolicyModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config = apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel
				Expect(apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apmSchemaAdvancedPasswordManagementLockOutPolicyModel.Config).To(Equal(apmSchemaAdvancedPasswordManagementLockOutPolicyConfigModel))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfig)
				Expect(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword = core.Int64Ptr(int64(0))
				Expect(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel.MinHoursToChangePassword).To(Equal(core.Int64Ptr(int64(0))))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval model
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagementMinPasswordChangeInterval)
				Expect(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel
				Expect(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel.Config).To(Equal(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalConfigModel))

				// Construct an instance of the ApmSchemaAdvancedPasswordManagement model
				apmSchemaAdvancedPasswordManagementModel := new(appidmanagementv4.ApmSchemaAdvancedPasswordManagement)
				Expect(apmSchemaAdvancedPasswordManagementModel).ToNot(BeNil())
				apmSchemaAdvancedPasswordManagementModel.Enabled = core.BoolPtr(true)
				apmSchemaAdvancedPasswordManagementModel.PasswordReuse = apmSchemaAdvancedPasswordManagementPasswordReuseModel
				apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername = apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel
				apmSchemaAdvancedPasswordManagementModel.PasswordExpiration = apmSchemaAdvancedPasswordManagementPasswordExpirationModel
				apmSchemaAdvancedPasswordManagementModel.LockOutPolicy = apmSchemaAdvancedPasswordManagementLockOutPolicyModel
				apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval = apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel
				Expect(apmSchemaAdvancedPasswordManagementModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apmSchemaAdvancedPasswordManagementModel.PasswordReuse).To(Equal(apmSchemaAdvancedPasswordManagementPasswordReuseModel))
				Expect(apmSchemaAdvancedPasswordManagementModel.PreventPasswordWithUsername).To(Equal(apmSchemaAdvancedPasswordManagementPreventPasswordWithUsernameModel))
				Expect(apmSchemaAdvancedPasswordManagementModel.PasswordExpiration).To(Equal(apmSchemaAdvancedPasswordManagementPasswordExpirationModel))
				Expect(apmSchemaAdvancedPasswordManagementModel.LockOutPolicy).To(Equal(apmSchemaAdvancedPasswordManagementLockOutPolicyModel))
				Expect(apmSchemaAdvancedPasswordManagementModel.MinPasswordChangeInterval).To(Equal(apmSchemaAdvancedPasswordManagementMinPasswordChangeIntervalModel))

				// Construct an instance of the SetCloudDirectoryAdvancedPasswordManagementOptions model
				tenantID := "testString"
				var setCloudDirectoryAdvancedPasswordManagementOptionsAdvancedPasswordManagement *appidmanagementv4.ApmSchemaAdvancedPasswordManagement = nil
				setCloudDirectoryAdvancedPasswordManagementOptionsModel := appIDManagementService.NewSetCloudDirectoryAdvancedPasswordManagementOptions(tenantID, setCloudDirectoryAdvancedPasswordManagementOptionsAdvancedPasswordManagement)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.SetTenantID("testString")
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.SetAdvancedPasswordManagement(apmSchemaAdvancedPasswordManagementModel)
				setCloudDirectoryAdvancedPasswordManagementOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCloudDirectoryAdvancedPasswordManagementOptionsModel).ToNot(BeNil())
				Expect(setCloudDirectoryAdvancedPasswordManagementOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryAdvancedPasswordManagementOptionsModel.AdvancedPasswordManagement).To(Equal(apmSchemaAdvancedPasswordManagementModel))
				Expect(setCloudDirectoryAdvancedPasswordManagementOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCloudDirectoryEmailDispatcherOptions successfully`, func() {
				// Construct an instance of the EmailDispatcherParamsSendgrid model
				emailDispatcherParamsSendgridModel := new(appidmanagementv4.EmailDispatcherParamsSendgrid)
				Expect(emailDispatcherParamsSendgridModel).ToNot(BeNil())
				emailDispatcherParamsSendgridModel.APIKey = core.StringPtr("testString")
				Expect(emailDispatcherParamsSendgridModel.APIKey).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EmailDispatcherParamsCustomAuthorization model
				emailDispatcherParamsCustomAuthorizationModel := new(appidmanagementv4.EmailDispatcherParamsCustomAuthorization)
				Expect(emailDispatcherParamsCustomAuthorizationModel).ToNot(BeNil())
				emailDispatcherParamsCustomAuthorizationModel.Type = core.StringPtr("value")
				emailDispatcherParamsCustomAuthorizationModel.Value = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Username = core.StringPtr("testString")
				emailDispatcherParamsCustomAuthorizationModel.Password = core.StringPtr("testString")
				Expect(emailDispatcherParamsCustomAuthorizationModel.Type).To(Equal(core.StringPtr("value")))
				Expect(emailDispatcherParamsCustomAuthorizationModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(emailDispatcherParamsCustomAuthorizationModel.Username).To(Equal(core.StringPtr("testString")))
				Expect(emailDispatcherParamsCustomAuthorizationModel.Password).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EmailDispatcherParamsCustom model
				emailDispatcherParamsCustomModel := new(appidmanagementv4.EmailDispatcherParamsCustom)
				Expect(emailDispatcherParamsCustomModel).ToNot(BeNil())
				emailDispatcherParamsCustomModel.URL = core.StringPtr("testString")
				emailDispatcherParamsCustomModel.Authorization = emailDispatcherParamsCustomAuthorizationModel
				Expect(emailDispatcherParamsCustomModel.URL).To(Equal(core.StringPtr("testString")))
				Expect(emailDispatcherParamsCustomModel.Authorization).To(Equal(emailDispatcherParamsCustomAuthorizationModel))

				// Construct an instance of the SetCloudDirectoryEmailDispatcherOptions model
				tenantID := "testString"
				setCloudDirectoryEmailDispatcherOptionsProvider := "sendgrid"
				setCloudDirectoryEmailDispatcherOptionsModel := appIDManagementService.NewSetCloudDirectoryEmailDispatcherOptions(tenantID, setCloudDirectoryEmailDispatcherOptionsProvider)
				setCloudDirectoryEmailDispatcherOptionsModel.SetTenantID("testString")
				setCloudDirectoryEmailDispatcherOptionsModel.SetProvider("sendgrid")
				setCloudDirectoryEmailDispatcherOptionsModel.SetSendgrid(emailDispatcherParamsSendgridModel)
				setCloudDirectoryEmailDispatcherOptionsModel.SetCustom(emailDispatcherParamsCustomModel)
				setCloudDirectoryEmailDispatcherOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCloudDirectoryEmailDispatcherOptionsModel).ToNot(BeNil())
				Expect(setCloudDirectoryEmailDispatcherOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryEmailDispatcherOptionsModel.Provider).To(Equal(core.StringPtr("sendgrid")))
				Expect(setCloudDirectoryEmailDispatcherOptionsModel.Sendgrid).To(Equal(emailDispatcherParamsSendgridModel))
				Expect(setCloudDirectoryEmailDispatcherOptionsModel.Custom).To(Equal(emailDispatcherParamsCustomModel))
				Expect(setCloudDirectoryEmailDispatcherOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCloudDirectoryIDPOptions successfully`, func() {
				// Construct an instance of the CloudDirectoryConfigParamsInteractionsIdentityConfirmation model
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractionsIdentityConfirmation)
				Expect(cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel).ToNot(BeNil())
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode = core.StringPtr("FULL")
				cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods = []string{"email"}
				Expect(cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.AccessMode).To(Equal(core.StringPtr("FULL")))
				Expect(cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel.Methods).To(Equal([]string{"email"}))

				// Construct an instance of the CloudDirectoryConfigParamsInteractions model
				cloudDirectoryConfigParamsInteractionsModel := new(appidmanagementv4.CloudDirectoryConfigParamsInteractions)
				Expect(cloudDirectoryConfigParamsInteractionsModel).ToNot(BeNil())
				cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation = cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel
				cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled = core.BoolPtr(false)
				cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable = core.BoolPtr(true)
				Expect(cloudDirectoryConfigParamsInteractionsModel.IdentityConfirmation).To(Equal(cloudDirectoryConfigParamsInteractionsIdentityConfirmationModel))
				Expect(cloudDirectoryConfigParamsInteractionsModel.WelcomeEnabled).To(Equal(core.BoolPtr(false)))
				Expect(cloudDirectoryConfigParamsInteractionsModel.ResetPasswordEnabled).To(Equal(core.BoolPtr(false)))
				Expect(cloudDirectoryConfigParamsInteractionsModel.ResetPasswordNotificationEnable).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the CloudDirectoryConfigParams model
				cloudDirectoryConfigParamsModel := new(appidmanagementv4.CloudDirectoryConfigParams)
				Expect(cloudDirectoryConfigParamsModel).ToNot(BeNil())
				cloudDirectoryConfigParamsModel.SelfServiceEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.SignupEnabled = core.BoolPtr(true)
				cloudDirectoryConfigParamsModel.Interactions = cloudDirectoryConfigParamsInteractionsModel
				cloudDirectoryConfigParamsModel.IdentityField = core.StringPtr("email")
				Expect(cloudDirectoryConfigParamsModel.SelfServiceEnabled).To(Equal(core.BoolPtr(true)))
				Expect(cloudDirectoryConfigParamsModel.SignupEnabled).To(Equal(core.BoolPtr(true)))
				Expect(cloudDirectoryConfigParamsModel.Interactions).To(Equal(cloudDirectoryConfigParamsInteractionsModel))
				Expect(cloudDirectoryConfigParamsModel.IdentityField).To(Equal(core.StringPtr("email")))

				// Construct an instance of the SetCloudDirectoryIDPOptions model
				tenantID := "testString"
				setCloudDirectoryIDPOptionsIsActive := true
				var setCloudDirectoryIDPOptionsConfig *appidmanagementv4.CloudDirectoryConfigParams = nil
				setCloudDirectoryIDPOptionsModel := appIDManagementService.NewSetCloudDirectoryIDPOptions(tenantID, setCloudDirectoryIDPOptionsIsActive, setCloudDirectoryIDPOptionsConfig)
				setCloudDirectoryIDPOptionsModel.SetTenantID("testString")
				setCloudDirectoryIDPOptionsModel.SetIsActive(true)
				setCloudDirectoryIDPOptionsModel.SetConfig(cloudDirectoryConfigParamsModel)
				setCloudDirectoryIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCloudDirectoryIDPOptionsModel).ToNot(BeNil())
				Expect(setCloudDirectoryIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryIDPOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(setCloudDirectoryIDPOptionsModel.Config).To(Equal(cloudDirectoryConfigParamsModel))
				Expect(setCloudDirectoryIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCloudDirectoryPasswordRegexOptions successfully`, func() {
				// Construct an instance of the SetCloudDirectoryPasswordRegexOptions model
				tenantID := "testString"
				setCloudDirectoryPasswordRegexOptionsModel := appIDManagementService.NewSetCloudDirectoryPasswordRegexOptions(tenantID)
				setCloudDirectoryPasswordRegexOptionsModel.SetTenantID("testString")
				setCloudDirectoryPasswordRegexOptionsModel.SetRegex("testString")
				setCloudDirectoryPasswordRegexOptionsModel.SetBase64EncodedRegex("testString")
				setCloudDirectoryPasswordRegexOptionsModel.SetErrorMessage("testString")
				setCloudDirectoryPasswordRegexOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCloudDirectoryPasswordRegexOptionsModel).ToNot(BeNil())
				Expect(setCloudDirectoryPasswordRegexOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryPasswordRegexOptionsModel.Regex).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryPasswordRegexOptionsModel.Base64EncodedRegex).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryPasswordRegexOptionsModel.ErrorMessage).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectoryPasswordRegexOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCloudDirectorySenderDetailsOptions successfully`, func() {
				// Construct an instance of the CloudDirectorySenderDetailsSenderDetailsFrom model
				cloudDirectorySenderDetailsSenderDetailsFromModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsFrom)
				Expect(cloudDirectorySenderDetailsSenderDetailsFromModel).ToNot(BeNil())
				cloudDirectorySenderDetailsSenderDetailsFromModel.Name = core.StringPtr("testString")
				cloudDirectorySenderDetailsSenderDetailsFromModel.Email = core.StringPtr("testString")
				Expect(cloudDirectorySenderDetailsSenderDetailsFromModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectorySenderDetailsSenderDetailsFromModel.Email).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetailsReplyTo model
				cloudDirectorySenderDetailsSenderDetailsReplyToModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetailsReplyTo)
				Expect(cloudDirectorySenderDetailsSenderDetailsReplyToModel).ToNot(BeNil())
				cloudDirectorySenderDetailsSenderDetailsReplyToModel.Name = core.StringPtr("testString")
				cloudDirectorySenderDetailsSenderDetailsReplyToModel.Email = core.StringPtr("testString")
				Expect(cloudDirectorySenderDetailsSenderDetailsReplyToModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(cloudDirectorySenderDetailsSenderDetailsReplyToModel.Email).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CloudDirectorySenderDetailsSenderDetails model
				cloudDirectorySenderDetailsSenderDetailsModel := new(appidmanagementv4.CloudDirectorySenderDetailsSenderDetails)
				Expect(cloudDirectorySenderDetailsSenderDetailsModel).ToNot(BeNil())
				cloudDirectorySenderDetailsSenderDetailsModel.From = cloudDirectorySenderDetailsSenderDetailsFromModel
				cloudDirectorySenderDetailsSenderDetailsModel.ReplyTo = cloudDirectorySenderDetailsSenderDetailsReplyToModel
				cloudDirectorySenderDetailsSenderDetailsModel.LinkExpirationSec = core.Int64Ptr(int64(900))
				Expect(cloudDirectorySenderDetailsSenderDetailsModel.From).To(Equal(cloudDirectorySenderDetailsSenderDetailsFromModel))
				Expect(cloudDirectorySenderDetailsSenderDetailsModel.ReplyTo).To(Equal(cloudDirectorySenderDetailsSenderDetailsReplyToModel))
				Expect(cloudDirectorySenderDetailsSenderDetailsModel.LinkExpirationSec).To(Equal(core.Int64Ptr(int64(900))))

				// Construct an instance of the SetCloudDirectorySenderDetailsOptions model
				tenantID := "testString"
				var setCloudDirectorySenderDetailsOptionsSenderDetails *appidmanagementv4.CloudDirectorySenderDetailsSenderDetails = nil
				setCloudDirectorySenderDetailsOptionsModel := appIDManagementService.NewSetCloudDirectorySenderDetailsOptions(tenantID, setCloudDirectorySenderDetailsOptionsSenderDetails)
				setCloudDirectorySenderDetailsOptionsModel.SetTenantID("testString")
				setCloudDirectorySenderDetailsOptionsModel.SetSenderDetails(cloudDirectorySenderDetailsSenderDetailsModel)
				setCloudDirectorySenderDetailsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCloudDirectorySenderDetailsOptionsModel).ToNot(BeNil())
				Expect(setCloudDirectorySenderDetailsOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCloudDirectorySenderDetailsOptionsModel.SenderDetails).To(Equal(cloudDirectorySenderDetailsSenderDetailsModel))
				Expect(setCloudDirectorySenderDetailsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetCustomIDPOptions successfully`, func() {
				// Construct an instance of the CustomIDPConfigParamsConfig model
				customIDPConfigParamsConfigModel := new(appidmanagementv4.CustomIDPConfigParamsConfig)
				Expect(customIDPConfigParamsConfigModel).ToNot(BeNil())
				customIDPConfigParamsConfigModel.PublicKey = core.StringPtr("testString")
				Expect(customIDPConfigParamsConfigModel.PublicKey).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SetCustomIDPOptions model
				tenantID := "testString"
				setCustomIDPOptionsIsActive := true
				setCustomIDPOptionsModel := appIDManagementService.NewSetCustomIDPOptions(tenantID, setCustomIDPOptionsIsActive)
				setCustomIDPOptionsModel.SetTenantID("testString")
				setCustomIDPOptionsModel.SetIsActive(true)
				setCustomIDPOptionsModel.SetConfig(customIDPConfigParamsConfigModel)
				setCustomIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setCustomIDPOptionsModel).ToNot(BeNil())
				Expect(setCustomIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setCustomIDPOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(setCustomIDPOptionsModel.Config).To(Equal(customIDPConfigParamsConfigModel))
				Expect(setCustomIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetFacebookIDPOptions successfully`, func() {
				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				Expect(facebookGoogleConfigParamsConfigModel).ToNot(BeNil())
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")
				Expect(facebookGoogleConfigParamsConfigModel.IDPID).To(Equal(core.StringPtr("appID")))
				Expect(facebookGoogleConfigParamsConfigModel.Secret).To(Equal(core.StringPtr("appsecret")))

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				Expect(facebookGoogleConfigParamsModel).ToNot(BeNil())
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(facebookGoogleConfigParamsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(facebookGoogleConfigParamsModel.Config).To(Equal(facebookGoogleConfigParamsConfigModel))
				Expect(facebookGoogleConfigParamsModel.GetProperties()).ToNot(BeEmpty())
				Expect(facebookGoogleConfigParamsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SetFacebookIDPOptions model
				tenantID := "testString"
				var idp *appidmanagementv4.FacebookGoogleConfigParams = nil
				setFacebookIDPOptionsModel := appIDManagementService.NewSetFacebookIDPOptions(tenantID, idp)
				setFacebookIDPOptionsModel.SetTenantID("testString")
				setFacebookIDPOptionsModel.SetIDP(facebookGoogleConfigParamsModel)
				setFacebookIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setFacebookIDPOptionsModel).ToNot(BeNil())
				Expect(setFacebookIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setFacebookIDPOptionsModel.IDP).To(Equal(facebookGoogleConfigParamsModel))
				Expect(setFacebookIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetGoogleIDPOptions successfully`, func() {
				// Construct an instance of the FacebookGoogleConfigParamsConfig model
				facebookGoogleConfigParamsConfigModel := new(appidmanagementv4.FacebookGoogleConfigParamsConfig)
				Expect(facebookGoogleConfigParamsConfigModel).ToNot(BeNil())
				facebookGoogleConfigParamsConfigModel.IDPID = core.StringPtr("appID")
				facebookGoogleConfigParamsConfigModel.Secret = core.StringPtr("appsecret")
				Expect(facebookGoogleConfigParamsConfigModel.IDPID).To(Equal(core.StringPtr("appID")))
				Expect(facebookGoogleConfigParamsConfigModel.Secret).To(Equal(core.StringPtr("appsecret")))

				// Construct an instance of the FacebookGoogleConfigParams model
				facebookGoogleConfigParamsModel := new(appidmanagementv4.FacebookGoogleConfigParams)
				Expect(facebookGoogleConfigParamsModel).ToNot(BeNil())
				facebookGoogleConfigParamsModel.IsActive = core.BoolPtr(true)
				facebookGoogleConfigParamsModel.Config = facebookGoogleConfigParamsConfigModel
				facebookGoogleConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(facebookGoogleConfigParamsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(facebookGoogleConfigParamsModel.Config).To(Equal(facebookGoogleConfigParamsConfigModel))
				Expect(facebookGoogleConfigParamsModel.GetProperties()).ToNot(BeEmpty())
				Expect(facebookGoogleConfigParamsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SetGoogleIDPOptions model
				tenantID := "testString"
				var idp *appidmanagementv4.FacebookGoogleConfigParams = nil
				setGoogleIDPOptionsModel := appIDManagementService.NewSetGoogleIDPOptions(tenantID, idp)
				setGoogleIDPOptionsModel.SetTenantID("testString")
				setGoogleIDPOptionsModel.SetIDP(facebookGoogleConfigParamsModel)
				setGoogleIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setGoogleIDPOptionsModel).ToNot(BeNil())
				Expect(setGoogleIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setGoogleIDPOptionsModel.IDP).To(Equal(facebookGoogleConfigParamsModel))
				Expect(setGoogleIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewSetSAMLIDPOptions successfully`, func() {
				// Construct an instance of the SAMLConfigParamsAuthnContext model
				samlConfigParamsAuthnContextModel := new(appidmanagementv4.SAMLConfigParamsAuthnContext)
				Expect(samlConfigParamsAuthnContextModel).ToNot(BeNil())
				samlConfigParamsAuthnContextModel.Class = []string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}
				samlConfigParamsAuthnContextModel.Comparison = core.StringPtr("exact")
				Expect(samlConfigParamsAuthnContextModel.Class).To(Equal([]string{"urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol"}))
				Expect(samlConfigParamsAuthnContextModel.Comparison).To(Equal(core.StringPtr("exact")))

				// Construct an instance of the SAMLConfigParams model
				samlConfigParamsModel := new(appidmanagementv4.SAMLConfigParams)
				Expect(samlConfigParamsModel).ToNot(BeNil())
				samlConfigParamsModel.EntityID = core.StringPtr("testString")
				samlConfigParamsModel.SignInURL = core.StringPtr("testString")
				samlConfigParamsModel.Certificates = []string{"testString"}
				samlConfigParamsModel.DisplayName = core.StringPtr("testString")
				samlConfigParamsModel.AuthnContext = samlConfigParamsAuthnContextModel
				samlConfigParamsModel.SignRequest = core.BoolPtr(false)
				samlConfigParamsModel.EncryptResponse = core.BoolPtr(false)
				samlConfigParamsModel.IncludeScoping = core.BoolPtr(false)
				samlConfigParamsModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(samlConfigParamsModel.EntityID).To(Equal(core.StringPtr("testString")))
				Expect(samlConfigParamsModel.SignInURL).To(Equal(core.StringPtr("testString")))
				Expect(samlConfigParamsModel.Certificates).To(Equal([]string{"testString"}))
				Expect(samlConfigParamsModel.DisplayName).To(Equal(core.StringPtr("testString")))
				Expect(samlConfigParamsModel.AuthnContext).To(Equal(samlConfigParamsAuthnContextModel))
				Expect(samlConfigParamsModel.SignRequest).To(Equal(core.BoolPtr(false)))
				Expect(samlConfigParamsModel.EncryptResponse).To(Equal(core.BoolPtr(false)))
				Expect(samlConfigParamsModel.IncludeScoping).To(Equal(core.BoolPtr(false)))
				Expect(samlConfigParamsModel.GetProperties()).ToNot(BeEmpty())
				Expect(samlConfigParamsModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the SetSAMLIDPOptions model
				tenantID := "testString"
				setSamlidpOptionsIsActive := true
				setSAMLIDPOptionsModel := appIDManagementService.NewSetSAMLIDPOptions(tenantID, setSamlidpOptionsIsActive)
				setSAMLIDPOptionsModel.SetTenantID("testString")
				setSAMLIDPOptionsModel.SetIsActive(true)
				setSAMLIDPOptionsModel.SetConfig(samlConfigParamsModel)
				setSAMLIDPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setSAMLIDPOptionsModel).ToNot(BeNil())
				Expect(setSAMLIDPOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(setSAMLIDPOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(setSAMLIDPOptionsModel.Config).To(Equal(samlConfigParamsModel))
				Expect(setSAMLIDPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewStartForgotPasswordOptions successfully`, func() {
				// Construct an instance of the StartForgotPasswordOptions model
				tenantID := "testString"
				startForgotPasswordOptionsUser := "testString"
				startForgotPasswordOptionsModel := appIDManagementService.NewStartForgotPasswordOptions(tenantID, startForgotPasswordOptionsUser)
				startForgotPasswordOptionsModel.SetTenantID("testString")
				startForgotPasswordOptionsModel.SetUser("testString")
				startForgotPasswordOptionsModel.SetLanguage("testString")
				startForgotPasswordOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(startForgotPasswordOptionsModel).ToNot(BeNil())
				Expect(startForgotPasswordOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(startForgotPasswordOptionsModel.User).To(Equal(core.StringPtr("testString")))
				Expect(startForgotPasswordOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(startForgotPasswordOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewStartSignUpOptions successfully`, func() {
				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				Expect(createNewUserEmailsItemModel).ToNot(BeNil())
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)
				Expect(createNewUserEmailsItemModel.Value).To(Equal(core.StringPtr("user@mail.com")))
				Expect(createNewUserEmailsItemModel.Primary).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the StartSignUpOptions model
				tenantID := "testString"
				shouldCreateProfile := true
				startSignUpOptionsEmails := []appidmanagementv4.CreateNewUserEmailsItem{}
				startSignUpOptionsPassword := "userPassword"
				startSignUpOptionsModel := appIDManagementService.NewStartSignUpOptions(tenantID, shouldCreateProfile, startSignUpOptionsEmails, startSignUpOptionsPassword)
				startSignUpOptionsModel.SetTenantID("testString")
				startSignUpOptionsModel.SetShouldCreateProfile(true)
				startSignUpOptionsModel.SetEmails([]appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel})
				startSignUpOptionsModel.SetPassword("userPassword")
				startSignUpOptionsModel.SetActive(true)
				startSignUpOptionsModel.SetUserName("myUserName")
				startSignUpOptionsModel.SetLanguage("testString")
				startSignUpOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(startSignUpOptionsModel).ToNot(BeNil())
				Expect(startSignUpOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(startSignUpOptionsModel.ShouldCreateProfile).To(Equal(core.BoolPtr(true)))
				Expect(startSignUpOptionsModel.Emails).To(Equal([]appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}))
				Expect(startSignUpOptionsModel.Password).To(Equal(core.StringPtr("userPassword")))
				Expect(startSignUpOptionsModel.Active).To(Equal(core.BoolPtr(true)))
				Expect(startSignUpOptionsModel.UserName).To(Equal(core.StringPtr("myUserName")))
				Expect(startSignUpOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(startSignUpOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateApplicationOptions successfully`, func() {
				// Construct an instance of the UpdateApplicationOptions model
				tenantID := "testString"
				clientID := "testString"
				updateApplicationOptionsName := "testString"
				updateApplicationOptionsModel := appIDManagementService.NewUpdateApplicationOptions(tenantID, clientID, updateApplicationOptionsName)
				updateApplicationOptionsModel.SetTenantID("testString")
				updateApplicationOptionsModel.SetClientID("testString")
				updateApplicationOptionsModel.SetName("testString")
				updateApplicationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateApplicationOptionsModel).ToNot(BeNil())
				Expect(updateApplicationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateApplicationOptionsModel.ClientID).To(Equal(core.StringPtr("testString")))
				Expect(updateApplicationOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(updateApplicationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateChannelOptions successfully`, func() {
				// Construct an instance of the UpdateChannelOptions model
				tenantID := "testString"
				channel := "email"
				updateChannelOptionsIsActive := true
				updateChannelOptionsModel := appIDManagementService.NewUpdateChannelOptions(tenantID, channel, updateChannelOptionsIsActive)
				updateChannelOptionsModel.SetTenantID("testString")
				updateChannelOptionsModel.SetChannel("email")
				updateChannelOptionsModel.SetIsActive(true)
				updateChannelOptionsModel.SetConfig(map[string]interface{}{"anyKey": "anyValue"})
				updateChannelOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateChannelOptionsModel).ToNot(BeNil())
				Expect(updateChannelOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateChannelOptionsModel.Channel).To(Equal(core.StringPtr("email")))
				Expect(updateChannelOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateChannelOptionsModel.Config).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(updateChannelOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateCloudDirectoryUserOptions successfully`, func() {
				// Construct an instance of the CreateNewUserEmailsItem model
				createNewUserEmailsItemModel := new(appidmanagementv4.CreateNewUserEmailsItem)
				Expect(createNewUserEmailsItemModel).ToNot(BeNil())
				createNewUserEmailsItemModel.Value = core.StringPtr("user@mail.com")
				createNewUserEmailsItemModel.Primary = core.BoolPtr(true)
				Expect(createNewUserEmailsItemModel.Value).To(Equal(core.StringPtr("user@mail.com")))
				Expect(createNewUserEmailsItemModel.Primary).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the UpdateCloudDirectoryUserOptions model
				tenantID := "testString"
				userID := "testString"
				updateCloudDirectoryUserOptionsEmails := []appidmanagementv4.CreateNewUserEmailsItem{}
				updateCloudDirectoryUserOptionsModel := appIDManagementService.NewUpdateCloudDirectoryUserOptions(tenantID, userID, updateCloudDirectoryUserOptionsEmails)
				updateCloudDirectoryUserOptionsModel.SetTenantID("testString")
				updateCloudDirectoryUserOptionsModel.SetUserID("testString")
				updateCloudDirectoryUserOptionsModel.SetEmails([]appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel})
				updateCloudDirectoryUserOptionsModel.SetActive(true)
				updateCloudDirectoryUserOptionsModel.SetUserName("myUserName")
				updateCloudDirectoryUserOptionsModel.SetPassword("userPassword")
				updateCloudDirectoryUserOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateCloudDirectoryUserOptionsModel).ToNot(BeNil())
				Expect(updateCloudDirectoryUserOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateCloudDirectoryUserOptionsModel.UserID).To(Equal(core.StringPtr("testString")))
				Expect(updateCloudDirectoryUserOptionsModel.Emails).To(Equal([]appidmanagementv4.CreateNewUserEmailsItem{*createNewUserEmailsItemModel}))
				Expect(updateCloudDirectoryUserOptionsModel.Active).To(Equal(core.BoolPtr(true)))
				Expect(updateCloudDirectoryUserOptionsModel.UserName).To(Equal(core.StringPtr("myUserName")))
				Expect(updateCloudDirectoryUserOptionsModel.Password).To(Equal(core.StringPtr("userPassword")))
				Expect(updateCloudDirectoryUserOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateExtensionActiveOptions successfully`, func() {
				// Construct an instance of the UpdateExtensionActiveOptions model
				tenantID := "testString"
				name := "premfa"
				updateExtensionActiveOptionsIsActive := true
				updateExtensionActiveOptionsModel := appIDManagementService.NewUpdateExtensionActiveOptions(tenantID, name, updateExtensionActiveOptionsIsActive)
				updateExtensionActiveOptionsModel.SetTenantID("testString")
				updateExtensionActiveOptionsModel.SetName("premfa")
				updateExtensionActiveOptionsModel.SetIsActive(true)
				updateExtensionActiveOptionsModel.SetConfig(map[string]interface{}{"anyKey": "anyValue"})
				updateExtensionActiveOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateExtensionActiveOptionsModel).ToNot(BeNil())
				Expect(updateExtensionActiveOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateExtensionActiveOptionsModel.Name).To(Equal(core.StringPtr("premfa")))
				Expect(updateExtensionActiveOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateExtensionActiveOptionsModel.Config).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(updateExtensionActiveOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateExtensionConfigOptions successfully`, func() {
				// Construct an instance of the UpdateExtensionConfigConfig model
				updateExtensionConfigConfigModel := new(appidmanagementv4.UpdateExtensionConfigConfig)
				Expect(updateExtensionConfigConfigModel).ToNot(BeNil())
				updateExtensionConfigConfigModel.URL = core.StringPtr("testString")
				updateExtensionConfigConfigModel.HeadersVar = map[string]interface{}{"anyKey": "anyValue"}
				Expect(updateExtensionConfigConfigModel.URL).To(Equal(core.StringPtr("testString")))
				Expect(updateExtensionConfigConfigModel.HeadersVar).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))

				// Construct an instance of the UpdateExtensionConfigOptions model
				tenantID := "testString"
				name := "premfa"
				updateExtensionConfigOptionsIsActive := true
				updateExtensionConfigOptionsModel := appIDManagementService.NewUpdateExtensionConfigOptions(tenantID, name, updateExtensionConfigOptionsIsActive)
				updateExtensionConfigOptionsModel.SetTenantID("testString")
				updateExtensionConfigOptionsModel.SetName("premfa")
				updateExtensionConfigOptionsModel.SetIsActive(true)
				updateExtensionConfigOptionsModel.SetConfig(updateExtensionConfigConfigModel)
				updateExtensionConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateExtensionConfigOptionsModel).ToNot(BeNil())
				Expect(updateExtensionConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateExtensionConfigOptionsModel.Name).To(Equal(core.StringPtr("premfa")))
				Expect(updateExtensionConfigOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateExtensionConfigOptionsModel.Config).To(Equal(updateExtensionConfigConfigModel))
				Expect(updateExtensionConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLocalizationOptions successfully`, func() {
				// Construct an instance of the UpdateLocalizationOptions model
				tenantID := "testString"
				updateLocalizationOptionsModel := appIDManagementService.NewUpdateLocalizationOptions(tenantID)
				updateLocalizationOptionsModel.SetTenantID("testString")
				updateLocalizationOptionsModel.SetLanguages([]string{"testString"})
				updateLocalizationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLocalizationOptionsModel).ToNot(BeNil())
				Expect(updateLocalizationOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateLocalizationOptionsModel.Languages).To(Equal([]string{"testString"}))
				Expect(updateLocalizationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateMFAConfigOptions successfully`, func() {
				// Construct an instance of the UpdateMFAConfigOptions model
				tenantID := "testString"
				updateMFAConfigOptionsIsActive := true
				updateMFAConfigOptionsModel := appIDManagementService.NewUpdateMFAConfigOptions(tenantID, updateMFAConfigOptionsIsActive)
				updateMFAConfigOptionsModel.SetTenantID("testString")
				updateMFAConfigOptionsModel.SetIsActive(true)
				updateMFAConfigOptionsModel.SetConfig(map[string]interface{}{"anyKey": "anyValue"})
				updateMFAConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateMFAConfigOptionsModel).ToNot(BeNil())
				Expect(updateMFAConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateMFAConfigOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateMFAConfigOptionsModel.Config).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(updateMFAConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateRateLimitConfigOptions successfully`, func() {
				// Construct an instance of the UpdateRateLimitConfigOptions model
				tenantID := "testString"
				updateRateLimitConfigOptionsSignUpLimitPerMinute := int64(50)
				updateRateLimitConfigOptionsSignInLimitPerMinute := int64(60)
				updateRateLimitConfigOptionsModel := appIDManagementService.NewUpdateRateLimitConfigOptions(tenantID, updateRateLimitConfigOptionsSignUpLimitPerMinute, updateRateLimitConfigOptionsSignInLimitPerMinute)
				updateRateLimitConfigOptionsModel.SetTenantID("testString")
				updateRateLimitConfigOptionsModel.SetSignUpLimitPerMinute(int64(50))
				updateRateLimitConfigOptionsModel.SetSignInLimitPerMinute(int64(60))
				updateRateLimitConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateRateLimitConfigOptionsModel).ToNot(BeNil())
				Expect(updateRateLimitConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateRateLimitConfigOptionsModel.SignUpLimitPerMinute).To(Equal(core.Int64Ptr(int64(50))))
				Expect(updateRateLimitConfigOptionsModel.SignInLimitPerMinute).To(Equal(core.Int64Ptr(int64(60))))
				Expect(updateRateLimitConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateRedirectUrisOptions successfully`, func() {
				// Construct an instance of the RedirectURIConfig model
				redirectURIConfigModel := new(appidmanagementv4.RedirectURIConfig)
				Expect(redirectURIConfigModel).ToNot(BeNil())
				redirectURIConfigModel.RedirectUris = []string{"http://localhost:3000/oauth-callback"}
				redirectURIConfigModel.TrustCloudIAMRedirectUris = core.BoolPtr(true)
				redirectURIConfigModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(redirectURIConfigModel.RedirectUris).To(Equal([]string{"http://localhost:3000/oauth-callback"}))
				Expect(redirectURIConfigModel.TrustCloudIAMRedirectUris).To(Equal(core.BoolPtr(true)))
				Expect(redirectURIConfigModel.GetProperties()).ToNot(BeEmpty())
				Expect(redirectURIConfigModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateRedirectUrisOptions model
				tenantID := "testString"
				var redirectUrisArray *appidmanagementv4.RedirectURIConfig = nil
				updateRedirectUrisOptionsModel := appIDManagementService.NewUpdateRedirectUrisOptions(tenantID, redirectUrisArray)
				updateRedirectUrisOptionsModel.SetTenantID("testString")
				updateRedirectUrisOptionsModel.SetRedirectUrisArray(redirectURIConfigModel)
				updateRedirectUrisOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateRedirectUrisOptionsModel).ToNot(BeNil())
				Expect(updateRedirectUrisOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateRedirectUrisOptionsModel.RedirectUrisArray).To(Equal(redirectURIConfigModel))
				Expect(updateRedirectUrisOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateRoleOptions successfully`, func() {
				// Construct an instance of the RoleAccessItem model
				roleAccessItemModel := new(appidmanagementv4.RoleAccessItem)
				Expect(roleAccessItemModel).ToNot(BeNil())
				roleAccessItemModel.ApplicationID = core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")
				roleAccessItemModel.Scopes = []string{"cartoons", "animated"}
				Expect(roleAccessItemModel.ApplicationID).To(Equal(core.StringPtr("de33d272-f8a7-4406-8fe8-ab28fd457be5")))
				Expect(roleAccessItemModel.Scopes).To(Equal([]string{"cartoons", "animated"}))

				// Construct an instance of the UpdateRoleOptions model
				tenantID := "testString"
				roleID := "testString"
				updateRoleOptionsName := "child"
				updateRoleOptionsAccess := []appidmanagementv4.RoleAccessItem{}
				updateRoleOptionsModel := appIDManagementService.NewUpdateRoleOptions(tenantID, roleID, updateRoleOptionsName, updateRoleOptionsAccess)
				updateRoleOptionsModel.SetTenantID("testString")
				updateRoleOptionsModel.SetRoleID("testString")
				updateRoleOptionsModel.SetName("child")
				updateRoleOptionsModel.SetAccess([]appidmanagementv4.RoleAccessItem{*roleAccessItemModel})
				updateRoleOptionsModel.SetDescription("Limits the available movie options to those that might be more appropriate for younger viewers.")
				updateRoleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateRoleOptionsModel).ToNot(BeNil())
				Expect(updateRoleOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateRoleOptionsModel.RoleID).To(Equal(core.StringPtr("testString")))
				Expect(updateRoleOptionsModel.Name).To(Equal(core.StringPtr("child")))
				Expect(updateRoleOptionsModel.Access).To(Equal([]appidmanagementv4.RoleAccessItem{*roleAccessItemModel}))
				Expect(updateRoleOptionsModel.Description).To(Equal(core.StringPtr("Limits the available movie options to those that might be more appropriate for younger viewers.")))
				Expect(updateRoleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSSOConfigOptions successfully`, func() {
				// Construct an instance of the UpdateSSOConfigOptions model
				tenantID := "testString"
				updateSSOConfigOptionsIsActive := true
				updateSSOConfigOptionsInactivityTimeoutSeconds := int64(86400)
				updateSSOConfigOptionsLogoutRedirectUris := []string{"http://localhost:3000/logout-callback"}
				updateSSOConfigOptionsModel := appIDManagementService.NewUpdateSSOConfigOptions(tenantID, updateSSOConfigOptionsIsActive, updateSSOConfigOptionsInactivityTimeoutSeconds, updateSSOConfigOptionsLogoutRedirectUris)
				updateSSOConfigOptionsModel.SetTenantID("testString")
				updateSSOConfigOptionsModel.SetIsActive(true)
				updateSSOConfigOptionsModel.SetInactivityTimeoutSeconds(int64(86400))
				updateSSOConfigOptionsModel.SetLogoutRedirectUris([]string{"http://localhost:3000/logout-callback"})
				updateSSOConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSSOConfigOptionsModel).ToNot(BeNil())
				Expect(updateSSOConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateSSOConfigOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateSSOConfigOptionsModel.InactivityTimeoutSeconds).To(Equal(core.Int64Ptr(int64(86400))))
				Expect(updateSSOConfigOptionsModel.LogoutRedirectUris).To(Equal([]string{"http://localhost:3000/logout-callback"}))
				Expect(updateSSOConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateTemplateOptions successfully`, func() {
				// Construct an instance of the UpdateTemplateOptions model
				tenantID := "testString"
				templateName := "USER_VERIFICATION"
				language := "testString"
				updateTemplateOptionsSubject := "testString"
				updateTemplateOptionsModel := appIDManagementService.NewUpdateTemplateOptions(tenantID, templateName, language, updateTemplateOptionsSubject)
				updateTemplateOptionsModel.SetTenantID("testString")
				updateTemplateOptionsModel.SetTemplateName("USER_VERIFICATION")
				updateTemplateOptionsModel.SetLanguage("testString")
				updateTemplateOptionsModel.SetSubject("testString")
				updateTemplateOptionsModel.SetHTMLBody("testString")
				updateTemplateOptionsModel.SetBase64EncodedHTMLBody("testString")
				updateTemplateOptionsModel.SetPlainTextBody("testString")
				updateTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateTemplateOptionsModel).ToNot(BeNil())
				Expect(updateTemplateOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateOptionsModel.TemplateName).To(Equal(core.StringPtr("USER_VERIFICATION")))
				Expect(updateTemplateOptionsModel.Language).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateOptionsModel.Subject).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateOptionsModel.HTMLBody).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateOptionsModel.Base64EncodedHTMLBody).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateOptionsModel.PlainTextBody).To(Equal(core.StringPtr("testString")))
				Expect(updateTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateUserProfilesConfigOptions successfully`, func() {
				// Construct an instance of the UpdateUserProfilesConfigOptions model
				tenantID := "testString"
				updateUserProfilesConfigOptionsIsActive := true
				updateUserProfilesConfigOptionsModel := appIDManagementService.NewUpdateUserProfilesConfigOptions(tenantID, updateUserProfilesConfigOptionsIsActive)
				updateUserProfilesConfigOptionsModel.SetTenantID("testString")
				updateUserProfilesConfigOptionsModel.SetIsActive(true)
				updateUserProfilesConfigOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateUserProfilesConfigOptionsModel).ToNot(BeNil())
				Expect(updateUserProfilesConfigOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateUserProfilesConfigOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateUserProfilesConfigOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateUserRolesOptions successfully`, func() {
				// Construct an instance of the UpdateUserRolesParamsRoles model
				updateUserRolesParamsRolesModel := new(appidmanagementv4.UpdateUserRolesParamsRoles)
				Expect(updateUserRolesParamsRolesModel).ToNot(BeNil())
				updateUserRolesParamsRolesModel.Ids = []string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}
				Expect(updateUserRolesParamsRolesModel.Ids).To(Equal([]string{"111c22c3-38ea-4de8-b5d4-338744d83b0f"}))

				// Construct an instance of the UpdateUserRolesOptions model
				tenantID := "testString"
				id := "testString"
				var updateUserRolesOptionsRoles *appidmanagementv4.UpdateUserRolesParamsRoles = nil
				updateUserRolesOptionsModel := appIDManagementService.NewUpdateUserRolesOptions(tenantID, id, updateUserRolesOptionsRoles)
				updateUserRolesOptionsModel.SetTenantID("testString")
				updateUserRolesOptionsModel.SetID("testString")
				updateUserRolesOptionsModel.SetRoles(updateUserRolesParamsRolesModel)
				updateUserRolesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateUserRolesOptionsModel).ToNot(BeNil())
				Expect(updateUserRolesOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(updateUserRolesOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateUserRolesOptionsModel.Roles).To(Equal(updateUserRolesParamsRolesModel))
				Expect(updateUserRolesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUserProfilesExportOptions successfully`, func() {
				// Construct an instance of the UserProfilesExportOptions model
				tenantID := "testString"
				userProfilesExportOptionsModel := appIDManagementService.NewUserProfilesExportOptions(tenantID)
				userProfilesExportOptionsModel.SetTenantID("testString")
				userProfilesExportOptionsModel.SetStartIndex(int64(38))
				userProfilesExportOptionsModel.SetCount(int64(0))
				userProfilesExportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(userProfilesExportOptionsModel).ToNot(BeNil())
				Expect(userProfilesExportOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(userProfilesExportOptionsModel.StartIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(userProfilesExportOptionsModel.Count).To(Equal(core.Int64Ptr(int64(0))))
				Expect(userProfilesExportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUserProfilesImportOptions successfully`, func() {
				// Construct an instance of the ExportUserProfileUsersItemIdentitiesItem model
				exportUserProfileUsersItemIdentitiesItemModel := new(appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem)
				Expect(exportUserProfileUsersItemIdentitiesItemModel).ToNot(BeNil())
				exportUserProfileUsersItemIdentitiesItemModel.Provider = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemIdentitiesItemModel.SetProperty("foo", core.StringPtr("testString"))
				Expect(exportUserProfileUsersItemIdentitiesItemModel.Provider).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemIdentitiesItemModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemIdentitiesItemModel.IDPUserInfo).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(exportUserProfileUsersItemIdentitiesItemModel.GetProperties()).ToNot(BeEmpty())
				Expect(exportUserProfileUsersItemIdentitiesItemModel.GetProperty("foo")).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExportUserProfileUsersItem model
				exportUserProfileUsersItemModel := new(appidmanagementv4.ExportUserProfileUsersItem)
				Expect(exportUserProfileUsersItemModel).ToNot(BeNil())
				exportUserProfileUsersItemModel.ID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Identities = []appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}
				exportUserProfileUsersItemModel.Attributes = map[string]interface{}{"anyKey": "anyValue"}
				exportUserProfileUsersItemModel.Name = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Email = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Picture = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Gender = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Locale = core.StringPtr("testString")
				exportUserProfileUsersItemModel.PreferredUsername = core.StringPtr("testString")
				exportUserProfileUsersItemModel.IDP = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedIDPID = core.StringPtr("testString")
				exportUserProfileUsersItemModel.HashedEmail = core.StringPtr("testString")
				exportUserProfileUsersItemModel.Roles = []string{"testString"}
				Expect(exportUserProfileUsersItemModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.Identities).To(Equal([]appidmanagementv4.ExportUserProfileUsersItemIdentitiesItem{*exportUserProfileUsersItemIdentitiesItemModel}))
				Expect(exportUserProfileUsersItemModel.Attributes).To(Equal(map[string]interface{}{"anyKey": "anyValue"}))
				Expect(exportUserProfileUsersItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.Email).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.Picture).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.Gender).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.Locale).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.PreferredUsername).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.IDP).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.HashedIDPID).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.HashedEmail).To(Equal(core.StringPtr("testString")))
				Expect(exportUserProfileUsersItemModel.Roles).To(Equal([]string{"testString"}))

				// Construct an instance of the UserProfilesImportOptions model
				tenantID := "testString"
				userProfilesImportOptionsUsers := []appidmanagementv4.ExportUserProfileUsersItem{}
				userProfilesImportOptionsModel := appIDManagementService.NewUserProfilesImportOptions(tenantID, userProfilesImportOptionsUsers)
				userProfilesImportOptionsModel.SetTenantID("testString")
				userProfilesImportOptionsModel.SetUsers([]appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel})
				userProfilesImportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(userProfilesImportOptionsModel).ToNot(BeNil())
				Expect(userProfilesImportOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(userProfilesImportOptionsModel.Users).To(Equal([]appidmanagementv4.ExportUserProfileUsersItem{*exportUserProfileUsersItemModel}))
				Expect(userProfilesImportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUserVerificationResultOptions successfully`, func() {
				// Construct an instance of the UserVerificationResultOptions model
				tenantID := "testString"
				userVerificationResultOptionsContext := "testString"
				userVerificationResultOptionsModel := appIDManagementService.NewUserVerificationResultOptions(tenantID, userVerificationResultOptionsContext)
				userVerificationResultOptionsModel.SetTenantID("testString")
				userVerificationResultOptionsModel.SetContext("testString")
				userVerificationResultOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(userVerificationResultOptionsModel).ToNot(BeNil())
				Expect(userVerificationResultOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(userVerificationResultOptionsModel.Context).To(Equal(core.StringPtr("testString")))
				Expect(userVerificationResultOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUsersDeleteUserProfileOptions successfully`, func() {
				// Construct an instance of the UsersDeleteUserProfileOptions model
				tenantID := "testString"
				id := "testString"
				usersDeleteUserProfileOptionsModel := appIDManagementService.NewUsersDeleteUserProfileOptions(tenantID, id)
				usersDeleteUserProfileOptionsModel.SetTenantID("testString")
				usersDeleteUserProfileOptionsModel.SetID("testString")
				usersDeleteUserProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(usersDeleteUserProfileOptionsModel).ToNot(BeNil())
				Expect(usersDeleteUserProfileOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(usersDeleteUserProfileOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(usersDeleteUserProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUsersGetUserProfileOptions successfully`, func() {
				// Construct an instance of the UsersGetUserProfileOptions model
				tenantID := "testString"
				id := "testString"
				usersGetUserProfileOptionsModel := appIDManagementService.NewUsersGetUserProfileOptions(tenantID, id)
				usersGetUserProfileOptionsModel.SetTenantID("testString")
				usersGetUserProfileOptionsModel.SetID("testString")
				usersGetUserProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(usersGetUserProfileOptionsModel).ToNot(BeNil())
				Expect(usersGetUserProfileOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(usersGetUserProfileOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(usersGetUserProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUsersNominateUserOptions successfully`, func() {
				// Construct an instance of the UsersNominateUserParamsProfile model
				usersNominateUserParamsProfileModel := new(appidmanagementv4.UsersNominateUserParamsProfile)
				Expect(usersNominateUserParamsProfileModel).ToNot(BeNil())
				usersNominateUserParamsProfileModel.Attributes = make(map[string]interface{})
				Expect(usersNominateUserParamsProfileModel.Attributes).To(Equal(make(map[string]interface{})))

				// Construct an instance of the UsersNominateUserOptions model
				tenantID := "testString"
				usersNominateUserOptionsIDP := "saml"
				usersNominateUserOptionsIDPIdentity := "appid@ibm.com"
				usersNominateUserOptionsModel := appIDManagementService.NewUsersNominateUserOptions(tenantID, usersNominateUserOptionsIDP, usersNominateUserOptionsIDPIdentity)
				usersNominateUserOptionsModel.SetTenantID("testString")
				usersNominateUserOptionsModel.SetIDP("saml")
				usersNominateUserOptionsModel.SetIDPIdentity("appid@ibm.com")
				usersNominateUserOptionsModel.SetProfile(usersNominateUserParamsProfileModel)
				usersNominateUserOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(usersNominateUserOptionsModel).ToNot(BeNil())
				Expect(usersNominateUserOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(usersNominateUserOptionsModel.IDP).To(Equal(core.StringPtr("saml")))
				Expect(usersNominateUserOptionsModel.IDPIdentity).To(Equal(core.StringPtr("appid@ibm.com")))
				Expect(usersNominateUserOptionsModel.Profile).To(Equal(usersNominateUserParamsProfileModel))
				Expect(usersNominateUserOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUsersRevokeRefreshTokenOptions successfully`, func() {
				// Construct an instance of the UsersRevokeRefreshTokenOptions model
				tenantID := "testString"
				id := "testString"
				usersRevokeRefreshTokenOptionsModel := appIDManagementService.NewUsersRevokeRefreshTokenOptions(tenantID, id)
				usersRevokeRefreshTokenOptionsModel.SetTenantID("testString")
				usersRevokeRefreshTokenOptionsModel.SetID("testString")
				usersRevokeRefreshTokenOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(usersRevokeRefreshTokenOptionsModel).ToNot(BeNil())
				Expect(usersRevokeRefreshTokenOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(usersRevokeRefreshTokenOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(usersRevokeRefreshTokenOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUsersSearchUserProfileOptions successfully`, func() {
				// Construct an instance of the UsersSearchUserProfileOptions model
				tenantID := "testString"
				dataScope := "index"
				usersSearchUserProfileOptionsModel := appIDManagementService.NewUsersSearchUserProfileOptions(tenantID, dataScope)
				usersSearchUserProfileOptionsModel.SetTenantID("testString")
				usersSearchUserProfileOptionsModel.SetDataScope("index")
				usersSearchUserProfileOptionsModel.SetEmail("testString")
				usersSearchUserProfileOptionsModel.SetID("testString")
				usersSearchUserProfileOptionsModel.SetStartIndex(int64(38))
				usersSearchUserProfileOptionsModel.SetCount(int64(0))
				usersSearchUserProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(usersSearchUserProfileOptionsModel).ToNot(BeNil())
				Expect(usersSearchUserProfileOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(usersSearchUserProfileOptionsModel.DataScope).To(Equal(core.StringPtr("index")))
				Expect(usersSearchUserProfileOptionsModel.Email).To(Equal(core.StringPtr("testString")))
				Expect(usersSearchUserProfileOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(usersSearchUserProfileOptionsModel.StartIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(usersSearchUserProfileOptionsModel.Count).To(Equal(core.Int64Ptr(int64(0))))
				Expect(usersSearchUserProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUsersSetUserProfileOptions successfully`, func() {
				// Construct an instance of the UsersSetUserProfileOptions model
				tenantID := "testString"
				id := "testString"
				usersSetUserProfileOptionsAttributes := make(map[string]interface{})
				usersSetUserProfileOptionsModel := appIDManagementService.NewUsersSetUserProfileOptions(tenantID, id, usersSetUserProfileOptionsAttributes)
				usersSetUserProfileOptionsModel.SetTenantID("testString")
				usersSetUserProfileOptionsModel.SetID("testString")
				usersSetUserProfileOptionsModel.SetAttributes(make(map[string]interface{}))
				usersSetUserProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(usersSetUserProfileOptionsModel).ToNot(BeNil())
				Expect(usersSetUserProfileOptionsModel.TenantID).To(Equal(core.StringPtr("testString")))
				Expect(usersSetUserProfileOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(usersSetUserProfileOptionsModel.Attributes).To(Equal(make(map[string]interface{})))
				Expect(usersSetUserProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAccessTokenConfigParams successfully`, func() {
				expiresIn := int64(38)
				model, err := appIDManagementService.NewAccessTokenConfigParams(expiresIn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApmSchema successfully`, func() {
				var advancedPasswordManagement *appidmanagementv4.ApmSchemaAdvancedPasswordManagement = nil
				_, err := appIDManagementService.NewApmSchema(advancedPasswordManagement)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCloudDirectoryConfigParams successfully`, func() {
				selfServiceEnabled := true
				var interactions *appidmanagementv4.CloudDirectoryConfigParamsInteractions = nil
				_, err := appIDManagementService.NewCloudDirectoryConfigParams(selfServiceEnabled, interactions)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCloudDirectorySenderDetails successfully`, func() {
				var senderDetails *appidmanagementv4.CloudDirectorySenderDetailsSenderDetails = nil
				_, err := appIDManagementService.NewCloudDirectorySenderDetails(senderDetails)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCustomIDPConfigParams successfully`, func() {
				isActive := true
				model, err := appIDManagementService.NewCustomIDPConfigParams(isActive)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEmailDispatcherParams successfully`, func() {
				provider := "sendgrid"
				model, err := appIDManagementService.NewEmailDispatcherParams(provider)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewExportUser successfully`, func() {
				users := []appidmanagementv4.ExportUserUsersItem{}
				model, err := appIDManagementService.NewExportUser(users)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewExportUserProfile successfully`, func() {
				users := []appidmanagementv4.ExportUserProfileUsersItem{}
				model, err := appIDManagementService.NewExportUserProfile(users)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewExtensionActive successfully`, func() {
				isActive := true
				model, err := appIDManagementService.NewExtensionActive(isActive)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFacebookGoogleConfigParams successfully`, func() {
				isActive := true
				model, err := appIDManagementService.NewFacebookGoogleConfigParams(isActive)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewGetLanguages successfully`, func() {
				languages := []string{"testString"}
				model, err := appIDManagementService.NewGetLanguages(languages)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRoleAccessItem successfully`, func() {
				applicationID := "de33d272-f8a7-4406-8fe8-ab28fd457be5"
				scopes := []string{"cartoons", "animated"}
				model, err := appIDManagementService.NewRoleAccessItem(applicationID, scopes)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSAMLConfigParams successfully`, func() {
				entityID := "testString"
				signInURL := "testString"
				certificates := []string{"testString"}
				model, err := appIDManagementService.NewSAMLConfigParams(entityID, signInURL, certificates)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTokenClaimMapping successfully`, func() {
				source := "saml"
				model, err := appIDManagementService.NewTokenClaimMapping(source)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewTokenConfigParams successfully`, func() {
				expiresIn := int64(38)
				enabled := true
				model, err := appIDManagementService.NewTokenConfigParams(expiresIn, enabled)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUpdateExtensionConfig successfully`, func() {
				isActive := true
				model, err := appIDManagementService.NewUpdateExtensionConfig(isActive)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
